{"version":3,"sources":["app/components/layouts/VerticalStackItemLayout.tsx","app/components/layouts/VirtualKeyboardSpacer.tsx","modules/editor/registerProseMirror.ts","utils/preventDefault.ts","modules/editor/components/EditorMenu.tsx","../node_modules/orderedmap/index.js","../src/diff.js","../src/fragment.js","../src/comparedeep.js","../src/mark.js","../src/replace.js","../src/resolvedpos.js","../src/node.js","../src/content.js","../src/schema.js","../src/from_dom.js","../src/to_dom.js","../src/map.js","../src/transform.js","../src/step.js","../src/replace_step.js","../src/structure.js","../src/mark_step.js","../src/selection.js","../src/transaction.js","../src/state.js","../src/plugin.js","../src/commands.js","../src/dropcursor.js","../node_modules/w3c-keyname/index.js","../src/keymap.js","../src/browser.js","../src/dom.js","../src/domcoords.js","../src/viewdesc.js","../src/capturekeys.js","../src/trackmappings.js","../src/domchange.js","../src/clipboard.js","../src/domobserver.js","../src/input.js","../src/decoration.js","../src/index.js","../src/gapcursor.js","../node_modules/rope-sequence/dist/index.js","../src/history.js","../src/inputrules.js","../src/rules.js","../src/rulebuilders.js","modules/editor/TodoPlugin/TodoInputRule.ts","modules/editor/TodoPlugin/TodoNodeView.ts","modules/editor/TodoPlugin/TodoPlugin.ts","modules/editor/TodoPlugin/TodoSchema.ts","modules/editor/TodoPlugin/index.ts","modules/editor/DefaultPlugin/DefaultInputRule.ts","../src/schema-list.js","modules/editor/DefaultPlugin/DefaultKeymap.ts","modules/editor/DefaultPlugin/DefaultPlugin.ts","../src/schema-basic.js","modules/editor/DefaultPlugin/DefaultSchema.ts","modules/editor/DefaultPlugin/index.ts","modules/editor/EditorState.ts","modules/editor/editorStyle.tsx","../node_modules/option-t/lib/Maybe/tap.js","0","../node_modules/markdown-it/lib/common/entities.js","../node_modules/uc.micro/categories/P/regex.js","../node_modules/mdurl/encode.js","../node_modules/mdurl/decode.js","../node_modules/mdurl/format.js","../node_modules/mdurl/parse.js","../node_modules/mdurl/index.js","../node_modules/uc.micro/properties/Any/regex.js","../node_modules/uc.micro/categories/Cc/regex.js","../node_modules/uc.micro/categories/Cf/regex.js","../node_modules/uc.micro/categories/Z/regex.js","../node_modules/uc.micro/index.js","../node_modules/markdown-it/lib/common/utils.js","../node_modules/markdown-it/lib/helpers/parse_link_label.js","../node_modules/markdown-it/lib/helpers/parse_link_destination.js","../node_modules/markdown-it/lib/helpers/parse_link_title.js","../node_modules/markdown-it/lib/helpers/index.js","../node_modules/markdown-it/lib/renderer.js","../node_modules/markdown-it/lib/ruler.js","../node_modules/markdown-it/lib/rules_core/normalize.js","../node_modules/markdown-it/lib/rules_core/block.js","../node_modules/markdown-it/lib/rules_core/inline.js","../node_modules/markdown-it/lib/rules_core/linkify.js","../node_modules/markdown-it/lib/rules_core/replacements.js","../node_modules/markdown-it/lib/rules_core/smartquotes.js","../node_modules/markdown-it/lib/token.js","../node_modules/markdown-it/lib/rules_core/state_core.js","../node_modules/markdown-it/lib/parser_core.js","../node_modules/markdown-it/lib/rules_block/table.js","../node_modules/markdown-it/lib/rules_block/code.js","../node_modules/markdown-it/lib/rules_block/fence.js","../node_modules/markdown-it/lib/rules_block/blockquote.js","../node_modules/markdown-it/lib/rules_block/hr.js","../node_modules/markdown-it/lib/rules_block/list.js","../node_modules/markdown-it/lib/rules_block/reference.js","../node_modules/markdown-it/lib/rules_block/heading.js","../node_modules/markdown-it/lib/rules_block/lheading.js","../node_modules/markdown-it/lib/common/html_blocks.js","../node_modules/markdown-it/lib/common/html_re.js","../node_modules/markdown-it/lib/rules_block/html_block.js","../node_modules/markdown-it/lib/rules_block/paragraph.js","../node_modules/markdown-it/lib/rules_block/state_block.js","../node_modules/markdown-it/lib/parser_block.js","../node_modules/markdown-it/lib/rules_inline/text.js","../node_modules/markdown-it/lib/rules_inline/newline.js","../node_modules/markdown-it/lib/rules_inline/escape.js","../node_modules/markdown-it/lib/rules_inline/backticks.js","../node_modules/markdown-it/lib/rules_inline/strikethrough.js","../node_modules/markdown-it/lib/rules_inline/emphasis.js","../node_modules/markdown-it/lib/rules_inline/link.js","../node_modules/markdown-it/lib/rules_inline/image.js","../node_modules/markdown-it/lib/rules_inline/autolink.js","../node_modules/markdown-it/lib/rules_inline/html_inline.js","../node_modules/markdown-it/lib/rules_inline/entity.js","../node_modules/markdown-it/lib/rules_inline/balance_pairs.js","../node_modules/markdown-it/lib/rules_inline/text_collapse.js","../node_modules/markdown-it/lib/rules_inline/state_inline.js","../node_modules/markdown-it/lib/parser_inline.js","../node_modules/linkify-it/lib/re.js","../node_modules/linkify-it/index.js","../node_modules/punycode/punycode.js","../node_modules/markdown-it/lib/presets/default.js","../node_modules/markdown-it/lib/presets/zero.js","../node_modules/markdown-it/lib/presets/commonmark.js","../node_modules/markdown-it/lib/index.js","../node_modules/markdown-it/index.js","../src/from_markdown.js","../src/to_markdown.js","modules/editor/MarkdownPlugin/MarkdownSerializer.ts","modules/editor/utils/findParentNode.ts","modules/editor/TodoPlugin/TodoCommand.ts","modules/editor/MenuItem.ts","modules/editor/EditorView.ts","modules/editor/useEditor.tsx","modules/editor/index.ts","utils/stickToTop.ts","utils/useDebouncedCallback.ts","pages/note/components/NotePage.tsx"],"names":["let","prototypeAccessors","const","p","n","prototypeAccessors$1","super","i","type","loop","next","states","prop","mark","text","this","rules","name","ReplaceError","slice","Slice","index","d","Fragment","splitting","joinable","MarkType","found","ReplaceStep","ReplaceAroundStep","Mark","Transform","Node","liftTarget","NodeSelection","Selection","canJoin","joinPoint","TextSelection","canSplit","AllSelection","findWrapping","$from","$to","Plugin","dropPoint","browser","dom","pos","child","desc","search","j","DOMSerializer","result","EditorState","Mapping","DOMParser","anchor","sel","span","from","$cur","keydownHandler","DecorationSet","Decoration","PluginKey","NodeRange","tr","Schema","module","exports","Aacute","aacute","Abreve","abreve","ac","acd","acE","Acirc","acirc","acute","Acy","acy","AElig","aelig","af","Afr","afr","Agrave","agrave","alefsym","aleph","Alpha","alpha","Amacr","amacr","amalg","amp","AMP","andand","And","and","andd","andslope","andv","ang","ange","angle","angmsdaa","angmsdab","angmsdac","angmsdad","angmsdae","angmsdaf","angmsdag","angmsdah","angmsd","angrt","angrtvb","angrtvbd","angsph","angst","angzarr","Aogon","aogon","Aopf","aopf","apacir","ap","apE","ape","apid","apos","ApplyFunction","approx","approxeq","Aring","aring","Ascr","ascr","Assign","ast","asymp","asympeq","Atilde","atilde","Auml","auml","awconint","awint","backcong","backepsilon","backprime","backsim","backsimeq","Backslash","Barv","barvee","barwed","Barwed","barwedge","bbrk","bbrktbrk","bcong","Bcy","bcy","bdquo","becaus","because","Because","bemptyv","bepsi","bernou","Bernoullis","Beta","beta","beth","between","Bfr","bfr","bigcap","bigcirc","bigcup","bigodot","bigoplus","bigotimes","bigsqcup","bigstar","bigtriangledown","bigtriangleup","biguplus","bigvee","bigwedge","bkarow","blacklozenge","blacksquare","blacktriangle","blacktriangledown","blacktriangleleft","blacktriangleright","blank","blk12","blk14","blk34","block","bne","bnequiv","bNot","bnot","Bopf","bopf","bot","bottom","bowtie","boxbox","boxdl","boxdL","boxDl","boxDL","boxdr","boxdR","boxDr","boxDR","boxh","boxH","boxhd","boxHd","boxhD","boxHD","boxhu","boxHu","boxhU","boxHU","boxminus","boxplus","boxtimes","boxul","boxuL","boxUl","boxUL","boxur","boxuR","boxUr","boxUR","boxv","boxV","boxvh","boxvH","boxVh","boxVH","boxvl","boxvL","boxVl","boxVL","boxvr","boxvR","boxVr","boxVR","bprime","breve","Breve","brvbar","bscr","Bscr","bsemi","bsim","bsime","bsolb","bsol","bsolhsub","bull","bullet","bump","bumpE","bumpe","Bumpeq","bumpeq","Cacute","cacute","capand","capbrcup","capcap","cap","Cap","capcup","capdot","CapitalDifferentialD","caps","caret","caron","Cayleys","ccaps","Ccaron","ccaron","Ccedil","ccedil","Ccirc","ccirc","Cconint","ccups","ccupssm","Cdot","cdot","cedil","Cedilla","cemptyv","cent","centerdot","CenterDot","cfr","Cfr","CHcy","chcy","check","checkmark","Chi","chi","circ","circeq","circlearrowleft","circlearrowright","circledast","circledcirc","circleddash","CircleDot","circledR","circledS","CircleMinus","CirclePlus","CircleTimes","cir","cirE","cire","cirfnint","cirmid","cirscir","ClockwiseContourIntegral","CloseCurlyDoubleQuote","CloseCurlyQuote","clubs","clubsuit","colon","Colon","Colone","colone","coloneq","comma","commat","comp","compfn","complement","complexes","cong","congdot","Congruent","conint","Conint","ContourIntegral","copf","Copf","coprod","Coproduct","copy","COPY","copysr","CounterClockwiseContourIntegral","crarr","cross","Cross","Cscr","cscr","csub","csube","csup","csupe","ctdot","cudarrl","cudarrr","cuepr","cuesc","cularr","cularrp","cupbrcap","cupcap","CupCap","cup","Cup","cupcup","cupdot","cupor","cups","curarr","curarrm","curlyeqprec","curlyeqsucc","curlyvee","curlywedge","curren","curvearrowleft","curvearrowright","cuvee","cuwed","cwconint","cwint","cylcty","dagger","Dagger","daleth","darr","Darr","dArr","dash","Dashv","dashv","dbkarow","dblac","Dcaron","dcaron","Dcy","dcy","ddagger","ddarr","DD","dd","DDotrahd","ddotseq","deg","Del","Delta","delta","demptyv","dfisht","Dfr","dfr","dHar","dharl","dharr","DiacriticalAcute","DiacriticalDot","DiacriticalDoubleAcute","DiacriticalGrave","DiacriticalTilde","diam","diamond","Diamond","diamondsuit","diams","die","DifferentialD","digamma","disin","div","divide","divideontimes","divonx","DJcy","djcy","dlcorn","dlcrop","dollar","Dopf","dopf","Dot","dot","DotDot","doteq","doteqdot","DotEqual","dotminus","dotplus","dotsquare","doublebarwedge","DoubleContourIntegral","DoubleDot","DoubleDownArrow","DoubleLeftArrow","DoubleLeftRightArrow","DoubleLeftTee","DoubleLongLeftArrow","DoubleLongLeftRightArrow","DoubleLongRightArrow","DoubleRightArrow","DoubleRightTee","DoubleUpArrow","DoubleUpDownArrow","DoubleVerticalBar","DownArrowBar","downarrow","DownArrow","Downarrow","DownArrowUpArrow","DownBreve","downdownarrows","downharpoonleft","downharpoonright","DownLeftRightVector","DownLeftTeeVector","DownLeftVectorBar","DownLeftVector","DownRightTeeVector","DownRightVectorBar","DownRightVector","DownTeeArrow","DownTee","drbkarow","drcorn","drcrop","Dscr","dscr","DScy","dscy","dsol","Dstrok","dstrok","dtdot","dtri","dtrif","duarr","duhar","dwangle","DZcy","dzcy","dzigrarr","Eacute","eacute","easter","Ecaron","ecaron","Ecirc","ecirc","ecir","ecolon","Ecy","ecy","eDDot","Edot","edot","eDot","ee","efDot","Efr","efr","eg","Egrave","egrave","egs","egsdot","el","Element","elinters","ell","els","elsdot","Emacr","emacr","empty","emptyset","EmptySmallSquare","emptyv","EmptyVerySmallSquare","emsp13","emsp14","emsp","ENG","eng","ensp","Eogon","eogon","Eopf","eopf","epar","eparsl","eplus","epsi","Epsilon","epsilon","epsiv","eqcirc","eqcolon","eqsim","eqslantgtr","eqslantless","Equal","equals","EqualTilde","equest","Equilibrium","equiv","equivDD","eqvparsl","erarr","erDot","escr","Escr","esdot","Esim","esim","Eta","eta","ETH","eth","Euml","euml","euro","excl","exist","Exists","expectation","exponentiale","ExponentialE","fallingdotseq","Fcy","fcy","female","ffilig","fflig","ffllig","Ffr","ffr","filig","FilledSmallSquare","FilledVerySmallSquare","fjlig","flat","fllig","fltns","fnof","Fopf","fopf","forall","ForAll","fork","forkv","Fouriertrf","fpartint","frac12","frac13","frac14","frac15","frac16","frac18","frac23","frac25","frac34","frac35","frac38","frac45","frac56","frac58","frac78","frasl","frown","fscr","Fscr","gacute","Gamma","gamma","Gammad","gammad","gap","Gbreve","gbreve","Gcedil","Gcirc","gcirc","Gcy","gcy","Gdot","gdot","ge","gE","gEl","gel","geq","geqq","geqslant","gescc","ges","gesdot","gesdoto","gesdotol","gesl","gesles","Gfr","gfr","gg","Gg","ggg","gimel","GJcy","gjcy","gla","gl","glE","glj","gnap","gnapprox","gne","gnE","gneq","gneqq","gnsim","Gopf","gopf","grave","GreaterEqual","GreaterEqualLess","GreaterFullEqual","GreaterGreater","GreaterLess","GreaterSlantEqual","GreaterTilde","Gscr","gscr","gsim","gsime","gsiml","gtcc","gtcir","gt","GT","Gt","gtdot","gtlPar","gtquest","gtrapprox","gtrarr","gtrdot","gtreqless","gtreqqless","gtrless","gtrsim","gvertneqq","gvnE","Hacek","hairsp","half","hamilt","HARDcy","hardcy","harrcir","harr","hArr","harrw","Hat","hbar","Hcirc","hcirc","hearts","heartsuit","hellip","hercon","hfr","Hfr","HilbertSpace","hksearow","hkswarow","hoarr","homtht","hookleftarrow","hookrightarrow","hopf","Hopf","horbar","HorizontalLine","hscr","Hscr","hslash","Hstrok","hstrok","HumpDownHump","HumpEqual","hybull","hyphen","Iacute","iacute","ic","Icirc","icirc","Icy","icy","Idot","IEcy","iecy","iexcl","iff","ifr","Ifr","Igrave","igrave","ii","iiiint","iiint","iinfin","iiota","IJlig","ijlig","Imacr","imacr","image","ImaginaryI","imagline","imagpart","imath","Im","imof","imped","Implies","incare","in","infin","infintie","inodot","intcal","int","Int","integers","Integral","intercal","Intersection","intlarhk","intprod","InvisibleComma","InvisibleTimes","IOcy","iocy","Iogon","iogon","Iopf","iopf","Iota","iota","iprod","iquest","iscr","Iscr","isin","isindot","isinE","isins","isinsv","isinv","it","Itilde","itilde","Iukcy","iukcy","Iuml","iuml","Jcirc","jcirc","Jcy","jcy","Jfr","jfr","jmath","Jopf","jopf","Jscr","jscr","Jsercy","jsercy","Jukcy","jukcy","Kappa","kappa","kappav","Kcedil","kcedil","Kcy","kcy","Kfr","kfr","kgreen","KHcy","khcy","KJcy","kjcy","Kopf","kopf","Kscr","kscr","lAarr","Lacute","lacute","laemptyv","lagran","Lambda","lambda","lang","Lang","langd","langle","lap","Laplacetrf","laquo","larrb","larrbfs","larr","Larr","lArr","larrfs","larrhk","larrlp","larrpl","larrsim","larrtl","latail","lAtail","lat","late","lates","lbarr","lBarr","lbbrk","lbrace","lbrack","lbrke","lbrksld","lbrkslu","Lcaron","lcaron","Lcedil","lcedil","lceil","lcub","Lcy","lcy","ldca","ldquo","ldquor","ldrdhar","ldrushar","ldsh","le","lE","LeftAngleBracket","LeftArrowBar","leftarrow","LeftArrow","Leftarrow","LeftArrowRightArrow","leftarrowtail","LeftCeiling","LeftDoubleBracket","LeftDownTeeVector","LeftDownVectorBar","LeftDownVector","LeftFloor","leftharpoondown","leftharpoonup","leftleftarrows","leftrightarrow","LeftRightArrow","Leftrightarrow","leftrightarrows","leftrightharpoons","leftrightsquigarrow","LeftRightVector","LeftTeeArrow","LeftTee","LeftTeeVector","leftthreetimes","LeftTriangleBar","LeftTriangle","LeftTriangleEqual","LeftUpDownVector","LeftUpTeeVector","LeftUpVectorBar","LeftUpVector","LeftVectorBar","LeftVector","lEg","leg","leq","leqq","leqslant","lescc","les","lesdot","lesdoto","lesdotor","lesg","lesges","lessapprox","lessdot","lesseqgtr","lesseqqgtr","LessEqualGreater","LessFullEqual","LessGreater","lessgtr","LessLess","lesssim","LessSlantEqual","LessTilde","lfisht","lfloor","Lfr","lfr","lg","lgE","lHar","lhard","lharu","lharul","lhblk","LJcy","ljcy","llarr","ll","Ll","llcorner","Lleftarrow","llhard","lltri","Lmidot","lmidot","lmoustache","lmoust","lnap","lnapprox","lne","lnE","lneq","lneqq","lnsim","loang","loarr","lobrk","longleftarrow","LongLeftArrow","Longleftarrow","longleftrightarrow","LongLeftRightArrow","Longleftrightarrow","longmapsto","longrightarrow","LongRightArrow","Longrightarrow","looparrowleft","looparrowright","lopar","Lopf","lopf","loplus","lotimes","lowast","lowbar","LowerLeftArrow","LowerRightArrow","loz","lozenge","lozf","lpar","lparlt","lrarr","lrcorner","lrhar","lrhard","lrm","lrtri","lsaquo","lscr","Lscr","lsh","Lsh","lsim","lsime","lsimg","lsqb","lsquo","lsquor","Lstrok","lstrok","ltcc","ltcir","lt","LT","Lt","ltdot","lthree","ltimes","ltlarr","ltquest","ltri","ltrie","ltrif","ltrPar","lurdshar","luruhar","lvertneqq","lvnE","macr","male","malt","maltese","Map","map","mapsto","mapstodown","mapstoleft","mapstoup","marker","mcomma","Mcy","mcy","mdash","mDDot","measuredangle","MediumSpace","Mellintrf","Mfr","mfr","mho","micro","midast","midcir","mid","middot","minusb","minus","minusd","minusdu","MinusPlus","mlcp","mldr","mnplus","models","Mopf","mopf","mp","mscr","Mscr","mstpos","Mu","mu","multimap","mumap","nabla","Nacute","nacute","nang","nap","napE","napid","napos","napprox","natural","naturals","natur","nbsp","nbump","nbumpe","ncap","Ncaron","ncaron","Ncedil","ncedil","ncong","ncongdot","ncup","Ncy","ncy","ndash","nearhk","nearr","neArr","nearrow","ne","nedot","NegativeMediumSpace","NegativeThickSpace","NegativeThinSpace","NegativeVeryThinSpace","nequiv","nesear","nesim","NestedGreaterGreater","NestedLessLess","NewLine","nexist","nexists","Nfr","nfr","ngE","nge","ngeq","ngeqq","ngeqslant","nges","nGg","ngsim","nGt","ngt","ngtr","nGtv","nharr","nhArr","nhpar","ni","nis","nisd","niv","NJcy","njcy","nlarr","nlArr","nldr","nlE","nle","nleftarrow","nLeftarrow","nleftrightarrow","nLeftrightarrow","nleq","nleqq","nleqslant","nles","nless","nLl","nlsim","nLt","nlt","nltri","nltrie","nLtv","nmid","NoBreak","NonBreakingSpace","nopf","Nopf","Not","not","NotCongruent","NotCupCap","NotDoubleVerticalBar","NotElement","NotEqual","NotEqualTilde","NotExists","NotGreater","NotGreaterEqual","NotGreaterFullEqual","NotGreaterGreater","NotGreaterLess","NotGreaterSlantEqual","NotGreaterTilde","NotHumpDownHump","NotHumpEqual","notin","notindot","notinE","notinva","notinvb","notinvc","NotLeftTriangleBar","NotLeftTriangle","NotLeftTriangleEqual","NotLess","NotLessEqual","NotLessGreater","NotLessLess","NotLessSlantEqual","NotLessTilde","NotNestedGreaterGreater","NotNestedLessLess","notni","notniva","notnivb","notnivc","NotPrecedes","NotPrecedesEqual","NotPrecedesSlantEqual","NotReverseElement","NotRightTriangleBar","NotRightTriangle","NotRightTriangleEqual","NotSquareSubset","NotSquareSubsetEqual","NotSquareSuperset","NotSquareSupersetEqual","NotSubset","NotSubsetEqual","NotSucceeds","NotSucceedsEqual","NotSucceedsSlantEqual","NotSucceedsTilde","NotSuperset","NotSupersetEqual","NotTilde","NotTildeEqual","NotTildeFullEqual","NotTildeTilde","NotVerticalBar","nparallel","npar","nparsl","npart","npolint","npr","nprcue","nprec","npreceq","npre","nrarrc","nrarr","nrArr","nrarrw","nrightarrow","nRightarrow","nrtri","nrtrie","nsc","nsccue","nsce","Nscr","nscr","nshortmid","nshortparallel","nsim","nsime","nsimeq","nsmid","nspar","nsqsube","nsqsupe","nsub","nsubE","nsube","nsubset","nsubseteq","nsubseteqq","nsucc","nsucceq","nsup","nsupE","nsupe","nsupset","nsupseteq","nsupseteqq","ntgl","Ntilde","ntilde","ntlg","ntriangleleft","ntrianglelefteq","ntriangleright","ntrianglerighteq","Nu","nu","num","numero","numsp","nvap","nvdash","nvDash","nVdash","nVDash","nvge","nvgt","nvHarr","nvinfin","nvlArr","nvle","nvlt","nvltrie","nvrArr","nvrtrie","nvsim","nwarhk","nwarr","nwArr","nwarrow","nwnear","Oacute","oacute","oast","Ocirc","ocirc","ocir","Ocy","ocy","odash","Odblac","odblac","odiv","odot","odsold","OElig","oelig","ofcir","Ofr","ofr","ogon","Ograve","ograve","ogt","ohbar","ohm","oint","olarr","olcir","olcross","oline","olt","Omacr","omacr","Omega","omega","Omicron","omicron","omid","ominus","Oopf","oopf","opar","OpenCurlyDoubleQuote","OpenCurlyQuote","operp","oplus","orarr","Or","or","ord","order","orderof","ordf","ordm","origof","oror","orslope","orv","oS","Oscr","oscr","Oslash","oslash","osol","Otilde","otilde","otimesas","Otimes","otimes","Ouml","ouml","ovbar","OverBar","OverBrace","OverBracket","OverParenthesis","para","parallel","par","parsim","parsl","part","PartialD","Pcy","pcy","percnt","period","permil","perp","pertenk","Pfr","pfr","Phi","phi","phiv","phmmat","phone","Pi","pi","pitchfork","piv","planck","planckh","plankv","plusacir","plusb","pluscir","plus","plusdo","plusdu","pluse","PlusMinus","plusmn","plussim","plustwo","pm","Poincareplane","pointint","popf","Popf","pound","prap","Pr","pr","prcue","precapprox","prec","preccurlyeq","Precedes","PrecedesEqual","PrecedesSlantEqual","PrecedesTilde","preceq","precnapprox","precneqq","precnsim","pre","prE","precsim","prime","Prime","primes","prnap","prnE","prnsim","prod","Product","profalar","profline","profsurf","Proportional","Proportion","propto","prsim","prurel","Pscr","pscr","Psi","psi","puncsp","Qfr","qfr","qint","qopf","Qopf","qprime","Qscr","qscr","quaternions","quatint","quest","questeq","quot","QUOT","rAarr","race","Racute","racute","radic","raemptyv","rang","Rang","rangd","range","rangle","raquo","rarrap","rarrb","rarrbfs","rarrc","rarr","Rarr","rArr","rarrfs","rarrhk","rarrlp","rarrpl","rarrsim","Rarrtl","rarrtl","rarrw","ratail","rAtail","ratio","rationals","rbarr","rBarr","RBarr","rbbrk","rbrace","rbrack","rbrke","rbrksld","rbrkslu","Rcaron","rcaron","Rcedil","rcedil","rceil","rcub","Rcy","rcy","rdca","rdldhar","rdquo","rdquor","rdsh","real","realine","realpart","reals","Re","rect","reg","REG","ReverseElement","ReverseEquilibrium","ReverseUpEquilibrium","rfisht","rfloor","rfr","Rfr","rHar","rhard","rharu","rharul","Rho","rho","rhov","RightAngleBracket","RightArrowBar","rightarrow","RightArrow","Rightarrow","RightArrowLeftArrow","rightarrowtail","RightCeiling","RightDoubleBracket","RightDownTeeVector","RightDownVectorBar","RightDownVector","RightFloor","rightharpoondown","rightharpoonup","rightleftarrows","rightleftharpoons","rightrightarrows","rightsquigarrow","RightTeeArrow","RightTee","RightTeeVector","rightthreetimes","RightTriangleBar","RightTriangle","RightTriangleEqual","RightUpDownVector","RightUpTeeVector","RightUpVectorBar","RightUpVector","RightVectorBar","RightVector","ring","risingdotseq","rlarr","rlhar","rlm","rmoustache","rmoust","rnmid","roang","roarr","robrk","ropar","ropf","Ropf","roplus","rotimes","RoundImplies","rpar","rpargt","rppolint","rrarr","Rrightarrow","rsaquo","rscr","Rscr","rsh","Rsh","rsqb","rsquo","rsquor","rthree","rtimes","rtri","rtrie","rtrif","rtriltri","RuleDelayed","ruluhar","rx","Sacute","sacute","sbquo","scap","Scaron","scaron","Sc","sc","sccue","sce","scE","Scedil","scedil","Scirc","scirc","scnap","scnE","scnsim","scpolint","scsim","Scy","scy","sdotb","sdot","sdote","searhk","searr","seArr","searrow","sect","semi","seswar","setminus","setmn","sext","Sfr","sfr","sfrown","sharp","SHCHcy","shchcy","SHcy","shcy","ShortDownArrow","ShortLeftArrow","shortmid","shortparallel","ShortRightArrow","ShortUpArrow","shy","Sigma","sigma","sigmaf","sigmav","sim","simdot","sime","simeq","simg","simgE","siml","simlE","simne","simplus","simrarr","slarr","SmallCircle","smallsetminus","smashp","smeparsl","smid","smile","smt","smte","smtes","SOFTcy","softcy","solbar","solb","sol","Sopf","sopf","spades","spadesuit","spar","sqcap","sqcaps","sqcup","sqcups","Sqrt","sqsub","sqsube","sqsubset","sqsubseteq","sqsup","sqsupe","sqsupset","sqsupseteq","square","Square","SquareIntersection","SquareSubset","SquareSubsetEqual","SquareSuperset","SquareSupersetEqual","SquareUnion","squarf","squ","squf","srarr","Sscr","sscr","ssetmn","ssmile","sstarf","Star","star","starf","straightepsilon","straightphi","strns","sub","Sub","subdot","subE","sube","subedot","submult","subnE","subne","subplus","subrarr","subset","Subset","subseteq","subseteqq","SubsetEqual","subsetneq","subsetneqq","subsim","subsub","subsup","succapprox","succ","succcurlyeq","Succeeds","SucceedsEqual","SucceedsSlantEqual","SucceedsTilde","succeq","succnapprox","succneqq","succnsim","succsim","SuchThat","sum","Sum","sung","sup1","sup2","sup3","sup","Sup","supdot","supdsub","supE","supe","supedot","Superset","SupersetEqual","suphsol","suphsub","suplarr","supmult","supnE","supne","supplus","supset","Supset","supseteq","supseteqq","supsetneq","supsetneqq","supsim","supsub","supsup","swarhk","swarr","swArr","swarrow","swnwar","szlig","Tab","target","Tau","tau","tbrk","Tcaron","tcaron","Tcedil","tcedil","Tcy","tcy","tdot","telrec","Tfr","tfr","there4","therefore","Therefore","Theta","theta","thetasym","thetav","thickapprox","thicksim","ThickSpace","ThinSpace","thinsp","thkap","thksim","THORN","thorn","tilde","Tilde","TildeEqual","TildeFullEqual","TildeTilde","timesbar","timesb","times","timesd","tint","toea","topbot","topcir","top","Topf","topf","topfork","tosa","tprime","trade","TRADE","triangle","triangledown","triangleleft","trianglelefteq","triangleq","triangleright","trianglerighteq","tridot","trie","triminus","TripleDot","triplus","trisb","tritime","trpezium","Tscr","tscr","TScy","tscy","TSHcy","tshcy","Tstrok","tstrok","twixt","twoheadleftarrow","twoheadrightarrow","Uacute","uacute","uarr","Uarr","uArr","Uarrocir","Ubrcy","ubrcy","Ubreve","ubreve","Ucirc","ucirc","Ucy","ucy","udarr","Udblac","udblac","udhar","ufisht","Ufr","ufr","Ugrave","ugrave","uHar","uharl","uharr","uhblk","ulcorn","ulcorner","ulcrop","ultri","Umacr","umacr","uml","UnderBar","UnderBrace","UnderBracket","UnderParenthesis","Union","UnionPlus","Uogon","uogon","Uopf","uopf","UpArrowBar","uparrow","UpArrow","Uparrow","UpArrowDownArrow","updownarrow","UpDownArrow","Updownarrow","UpEquilibrium","upharpoonleft","upharpoonright","uplus","UpperLeftArrow","UpperRightArrow","upsi","Upsi","upsih","Upsilon","upsilon","UpTeeArrow","UpTee","upuparrows","urcorn","urcorner","urcrop","Uring","uring","urtri","Uscr","uscr","utdot","Utilde","utilde","utri","utrif","uuarr","Uuml","uuml","uwangle","vangrt","varepsilon","varkappa","varnothing","varphi","varpi","varpropto","varr","vArr","varrho","varsigma","varsubsetneq","varsubsetneqq","varsupsetneq","varsupsetneqq","vartheta","vartriangleleft","vartriangleright","vBar","Vbar","vBarv","Vcy","vcy","vdash","vDash","Vdash","VDash","Vdashl","veebar","vee","Vee","veeeq","vellip","verbar","Verbar","vert","Vert","VerticalBar","VerticalLine","VerticalSeparator","VerticalTilde","VeryThinSpace","Vfr","vfr","vltri","vnsub","vnsup","Vopf","vopf","vprop","vrtri","Vscr","vscr","vsubnE","vsubne","vsupnE","vsupne","Vvdash","vzigzag","Wcirc","wcirc","wedbar","wedge","Wedge","wedgeq","weierp","Wfr","wfr","Wopf","wopf","wp","wr","wreath","Wscr","wscr","xcap","xcirc","xcup","xdtri","Xfr","xfr","xharr","xhArr","Xi","xi","xlarr","xlArr","xmap","xnis","xodot","Xopf","xopf","xoplus","xotime","xrarr","xrArr","Xscr","xscr","xsqcup","xuplus","xutri","xvee","xwedge","Yacute","yacute","YAcy","yacy","Ycirc","ycirc","Ycy","ycy","yen","Yfr","yfr","YIcy","yicy","Yopf","yopf","Yscr","yscr","YUcy","yucy","yuml","Yuml","Zacute","zacute","Zcaron","zcaron","Zcy","zcy","Zdot","zdot","zeetrf","ZeroWidthSpace","Zeta","zeta","zfr","Zfr","ZHcy","zhcy","zigrarr","zopf","Zopf","Zscr","zscr","zwj","zwnj","schema","nodeType","inner"],"mappings":"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","file":"NotePage.9fdf1e89.map","sourceRoot":"../src","sourcesContent":["import { styled } from '../../../styled-components';\n\ninterface Props {\n  autoScale?: boolean;\n}\n\nexport const VerticalStackItemLayout = styled.div<Props>`\n  flex-grow: ${({ autoScale }) => (autoScale ? 1 : undefined)};\n  height: 100%;\n  overflow-y: hidden;\n  position: relative;\n`;\n","import { styled } from '../../../styled-components';\n\nconst VIRTUAL_KEYBOARD_HEIGHT = 216 + 48; // Ugly hack...\n\nexport const VirtualKeyboardSpacer = styled.div<{\n  isVirtualKeyboardVisible?: boolean;\n}>`\n  display: none;\n\n  @media screen and (max-width: 480px) {\n    display: ${({ isVirtualKeyboardVisible }) =>\n      isVirtualKeyboardVisible ? 'block' : undefined};\n    height: ${({ isVirtualKeyboardVisible }) =>\n      isVirtualKeyboardVisible\n        ? `calc(100% - ${VIRTUAL_KEYBOARD_HEIGHT}px)`\n        : undefined};\n  }\n`;\n","import 'prosemirror-gapcursor/style/gapcursor.css';\nimport 'prosemirror-view/style/prosemirror.css';\n","export function preventDefault(event: React.SyntheticEvent<HTMLElement>) {\n  event.preventDefault();\n}\n","import { EditorState } from 'prosemirror-state';\nimport { EditorView } from 'prosemirror-view';\nimport React from 'react';\nimport { styled } from '../../../styled-components';\nimport { preventDefault } from '../../../utils/preventDefault';\nimport { MenuItem } from '../editor-type';\n\nconst Wrapper = styled.div`\n  -webkit-overflow-scrolling: touch;\n  bottom: 0;\n  display: flex;\n  flex-direction: column-reverse;\n  font-size: ${({ theme }) => theme.fontSize.default};\n  height: 100%;\n  overflow-y: auto;\n  padding: calc(2 * ${({ theme }) => theme.thinSpace});\n  position: absolute;\n  right: 0;\n`;\n\nconst MenuItem = styled.div<{ active?: boolean; enable?: boolean }>`\n  align-items: center;\n  background: ${({ theme }) => theme.buttonColorBg};\n  border-radius: ${({ theme }) => theme.roundButtonRadius};\n  color: ${({ theme }) => theme.buttonColorFg};\n  cursor: pointer;\n  display: flex;\n  min-height: ${({ theme }) => theme.roundButtonSize};\n  height: ${({ theme }) => theme.roundButtonSize};\n  justify-content: center;\n  opacity: ${({ theme, active }) =>\n    active ? theme.activeOpacity : theme.inactiveOpacity};\n  padding: ${({ theme }) => theme.space};\n  text-align: center;\n  transition: ${({ theme }) => theme.transition};\n  width: ${({ theme }) => theme.roundButtonSize};\n\n  & + & {\n    margin-bottom: ${({ theme }) => theme.space};\n  }\n\n  :hover {\n    opacity: ${({ theme }) => theme.activeOpacity};\n  }\n`;\n\ninterface ItemProps {\n  className?: string;\n  editorState: EditorState;\n  editorView: EditorView;\n  item: MenuItem;\n}\n\nconst EditorMenuItem: React.FunctionComponent<ItemProps> = ({\n  item,\n  editorState,\n  editorView,\n}) => {\n  return (\n    <MenuItem\n      key={item.shortTitle}\n      active={item.active(editorState)}\n      onClick={event => {\n        event.preventDefault();\n        item.run(editorState, editorView.dispatch, editorView);\n      }}\n      onMouseDown={preventDefault}\n    >\n      {item.shortTitle}\n    </MenuItem>\n  );\n};\n\ninterface Props {\n  editorState: EditorState;\n  editorView: EditorView;\n  menuItems: MenuItem[];\n}\n\nexport const EditorMenu: React.FunctionComponent<Props> = ({\n  editorView,\n  editorState,\n  menuItems,\n}) => {\n  return (\n    <Wrapper>\n      {menuItems.map(item => (\n        <EditorMenuItem\n          key={item.shortTitle}\n          editorView={editorView}\n          editorState={editorState}\n          item={item}\n        />\n      ))}\n    </Wrapper>\n  );\n};\n","// ::- Persistent data structure representing an ordered mapping from\n// strings to values, with some convenient update methods.\nfunction OrderedMap(content) {\n  this.content = content\n}\n\nOrderedMap.prototype = {\n  constructor: OrderedMap,\n\n  find: function(key) {\n    for (var i = 0; i < this.content.length; i += 2)\n      if (this.content[i] === key) return i\n    return -1\n  },\n\n  // :: (string) → ?any\n  // Retrieve the value stored under `key`, or return undefined when\n  // no such key exists.\n  get: function(key) {\n    var found = this.find(key)\n    return found == -1 ? undefined : this.content[found + 1]\n  },\n\n  // :: (string, any, ?string) → OrderedMap\n  // Create a new map by replacing the value of `key` with a new\n  // value, or adding a binding to the end of the map. If `newKey` is\n  // given, the key of the binding will be replaced with that key.\n  update: function(key, value, newKey) {\n    var self = newKey && newKey != key ? this.remove(newKey) : this\n    var found = self.find(key), content = self.content.slice()\n    if (found == -1) {\n      content.push(newKey || key, value)\n    } else {\n      content[found + 1] = value\n      if (newKey) content[found] = newKey\n    }\n    return new OrderedMap(content)\n  },\n\n  // :: (string) → OrderedMap\n  // Return a map with the given key removed, if it existed.\n  remove: function(key) {\n    var found = this.find(key)\n    if (found == -1) return this\n    var content = this.content.slice()\n    content.splice(found, 2)\n    return new OrderedMap(content)\n  },\n\n  // :: (string, any) → OrderedMap\n  // Add a new key to the start of the map.\n  addToStart: function(key, value) {\n    return new OrderedMap([key, value].concat(this.remove(key).content))\n  },\n\n  // :: (string, any) → OrderedMap\n  // Add a new key to the end of the map.\n  addToEnd: function(key, value) {\n    var content = this.remove(key).content.slice()\n    content.push(key, value)\n    return new OrderedMap(content)\n  },\n\n  // :: (string, string, any) → OrderedMap\n  // Add a key after the given key. If `place` is not found, the new\n  // key is added to the end.\n  addBefore: function(place, key, value) {\n    var without = this.remove(key), content = without.content.slice()\n    var found = without.find(place)\n    content.splice(found == -1 ? content.length : found, 0, key, value)\n    return new OrderedMap(content)\n  },\n\n  // :: ((key: string, value: any))\n  // Call the given function for each key/value pair in the map, in\n  // order.\n  forEach: function(f) {\n    for (var i = 0; i < this.content.length; i += 2)\n      f(this.content[i], this.content[i + 1])\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by prepending the keys in this map that don't\n  // appear in `map` before the keys in `map`.\n  prepend: function(map) {\n    map = OrderedMap.from(map)\n    if (!map.size) return this\n    return new OrderedMap(map.content.concat(this.subtract(map).content))\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by appending the keys in this map that don't\n  // appear in `map` after the keys in `map`.\n  append: function(map) {\n    map = OrderedMap.from(map)\n    if (!map.size) return this\n    return new OrderedMap(this.subtract(map).content.concat(map.content))\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a map containing all the keys in this map that don't\n  // appear in `map`.\n  subtract: function(map) {\n    var result = this\n    map = OrderedMap.from(map)\n    for (var i = 0; i < map.content.length; i += 2)\n      result = result.remove(map.content[i])\n    return result\n  },\n\n  // :: number\n  // The amount of keys in this map.\n  get size() {\n    return this.content.length >> 1\n  }\n}\n\n// :: (?union<Object, OrderedMap>) → OrderedMap\n// Return a map with the given content. If null, create an empty\n// map. If given an ordered map, return that map itself. If given an\n// object, create a map from the object's properties.\nOrderedMap.from = function(value) {\n  if (value instanceof OrderedMap) return value\n  var content = []\n  if (value) for (var prop in value) content.push(prop, value[prop])\n  return new OrderedMap(content)\n}\n\nmodule.exports = OrderedMap\n","export function findDiffStart(a, b, pos) {\n  for (let i = 0;; i++) {\n    if (i == a.childCount || i == b.childCount)\n      return a.childCount == b.childCount ? null : pos\n\n    let childA = a.child(i), childB = b.child(i)\n    if (childA == childB) { pos += childA.nodeSize; continue }\n\n    if (!childA.sameMarkup(childB)) return pos\n\n    if (childA.isText && childA.text != childB.text) {\n      for (let j = 0; childA.text[j] == childB.text[j]; j++)\n        pos++\n      return pos\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffStart(childA.content, childB.content, pos + 1)\n      if (inner != null) return inner\n    }\n    pos += childA.nodeSize\n  }\n}\n\nexport function findDiffEnd(a, b, posA, posB) {\n  for (let iA = a.childCount, iB = b.childCount;;) {\n    if (iA == 0 || iB == 0)\n      return iA == iB ? null : {a: posA, b: posB}\n\n    let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize\n    if (childA == childB) {\n      posA -= size; posB -= size\n      continue\n    }\n\n    if (!childA.sameMarkup(childB)) return {a: posA, b: posB}\n\n    if (childA.isText && childA.text != childB.text) {\n      let same = 0, minSize = Math.min(childA.text.length, childB.text.length)\n      while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {\n        same++; posA--; posB--\n      }\n      return {a: posA, b: posB}\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1)\n      if (inner) return inner\n    }\n    posA -= size; posB -= size\n  }\n}\n","import {findDiffStart, findDiffEnd} from \"./diff\"\n\n// ::- A fragment represents a node's collection of child nodes.\n//\n// Like nodes, fragments are persistent data structures, and you\n// should not mutate them or their content. Rather, you create new\n// instances whenever needed. The API tries to make this easy.\nexport class Fragment {\n  constructor(content, size) {\n    this.content = content\n    // :: number\n    // The size of the fragment, which is the total of the size of its\n    // content nodes.\n    this.size = size || 0\n    if (size == null) for (let i = 0; i < content.length; i++)\n      this.size += content[i].nodeSize\n  }\n\n  // :: (number, number, (node: Node, start: number, parent: Node, index: number) → ?bool, ?number)\n  // Invoke a callback for all descendant nodes between the given two\n  // positions (relative to start of this fragment). Doesn't descend\n  // into a node when the callback returns `false`.\n  nodesBetween(from, to, f, nodeStart = 0, parent) {\n    for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from && f(child, nodeStart + pos, parent, i) !== false && child.content.size) {\n        let start = pos + 1\n        child.nodesBetween(Math.max(0, from - start),\n                           Math.min(child.content.size, to - start),\n                           f, nodeStart + start)\n      }\n      pos = end\n    }\n  }\n\n  // :: ((node: Node, pos: number, parent: Node) → ?bool)\n  // Call the given callback for every descendant node. The callback\n  // may return `false` to prevent traversal of a given node's children.\n  descendants(f) {\n    this.nodesBetween(0, this.size, f)\n  }\n\n  // : (number, number, ?string, ?string) → string\n  textBetween(from, to, blockSeparator, leafText) {\n    let text = \"\", separated = true\n    this.nodesBetween(from, to, (node, pos) => {\n      if (node.isText) {\n        text += node.text.slice(Math.max(from, pos) - pos, to - pos)\n        separated = !blockSeparator\n      } else if (node.isLeaf && leafText) {\n        text += leafText\n        separated = !blockSeparator\n      } else if (!separated && node.isBlock) {\n        text += blockSeparator\n        separated = true\n      }\n    }, 0)\n    return text\n  }\n\n  // :: (Fragment) → Fragment\n  // Create a new fragment containing the combined content of this\n  // fragment and the other.\n  append(other) {\n    if (!other.size) return this\n    if (!this.size) return other\n    let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0\n    if (last.isText && last.sameMarkup(first)) {\n      content[content.length - 1] = last.withText(last.text + first.text)\n      i = 1\n    }\n    for (; i < other.content.length; i++) content.push(other.content[i])\n    return new Fragment(content, this.size + other.size)\n  }\n\n  // :: (number, ?number) → Fragment\n  // Cut out the sub-fragment between the two given positions.\n  cut(from, to) {\n    if (to == null) to = this.size\n    if (from == 0 && to == this.size) return this\n    let result = [], size = 0\n    if (to > from) for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from) {\n        if (pos < from || end > to) {\n          if (child.isText)\n            child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos))\n          else\n            child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1))\n        }\n        result.push(child)\n        size += child.nodeSize\n      }\n      pos = end\n    }\n    return new Fragment(result, size)\n  }\n\n  cutByIndex(from, to) {\n    if (from == to) return Fragment.empty\n    if (from == 0 && to == this.content.length) return this\n    return new Fragment(this.content.slice(from, to))\n  }\n\n  // :: (number, Node) → Fragment\n  // Create a new fragment in which the node at the given index is\n  // replaced by the given node.\n  replaceChild(index, node) {\n    let current = this.content[index]\n    if (current == node) return this\n    let copy = this.content.slice()\n    let size = this.size + node.nodeSize - current.nodeSize\n    copy[index] = node\n    return new Fragment(copy, size)\n  }\n\n  // : (Node) → Fragment\n  // Create a new fragment by prepending the given node to this\n  // fragment.\n  addToStart(node) {\n    return new Fragment([node].concat(this.content), this.size + node.nodeSize)\n  }\n\n  // : (Node) → Fragment\n  // Create a new fragment by appending the given node to this\n  // fragment.\n  addToEnd(node) {\n    return new Fragment(this.content.concat(node), this.size + node.nodeSize)\n  }\n\n  // :: (Fragment) → bool\n  // Compare this fragment to another one.\n  eq(other) {\n    if (this.content.length != other.content.length) return false\n    for (let i = 0; i < this.content.length; i++)\n      if (!this.content[i].eq(other.content[i])) return false\n    return true\n  }\n\n  // :: ?Node\n  // The first child of the fragment, or `null` if it is empty.\n  get firstChild() { return this.content.length ? this.content[0] : null }\n\n  // :: ?Node\n  // The last child of the fragment, or `null` if it is empty.\n  get lastChild() { return this.content.length ? this.content[this.content.length - 1] : null }\n\n  // :: number\n  // The number of child nodes in this fragment.\n  get childCount() { return this.content.length }\n\n  // :: (number) → Node\n  // Get the child node at the given index. Raise an error when the\n  // index is out of range.\n  child(index) {\n    let found = this.content[index]\n    if (!found) throw new RangeError(\"Index \" + index + \" out of range for \" + this)\n    return found\n  }\n\n  // :: (number) → ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) {\n    return this.content[index]\n  }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) {\n    for (let i = 0, p = 0; i < this.content.length; i++) {\n      let child = this.content[i]\n      f(child, p, i)\n      p += child.nodeSize\n    }\n  }\n\n  // :: (Fragment) → ?number\n  // Find the first position at which this fragment and another\n  // fragment differ, or `null` if they are the same.\n  findDiffStart(other, pos = 0) {\n    return findDiffStart(this, other, pos)\n  }\n\n  // :: (Fragment) → ?{a: number, b: number}\n  // Find the first position, searching from the end, at which this\n  // fragment and the given fragment differ, or `null` if they are the\n  // same. Since this position will not be the same in both nodes, an\n  // object with two separate positions is returned.\n  findDiffEnd(other, pos = this.size, otherPos = other.size) {\n    return findDiffEnd(this, other, pos, otherPos)\n  }\n\n  // : (number, ?number) → {index: number, offset: number}\n  // Find the index and inner offset corresponding to a given relative\n  // position in this fragment. The result object will be reused\n  // (overwritten) the next time the function is called. (Not public.)\n  findIndex(pos, round = -1) {\n    if (pos == 0) return retIndex(0, pos)\n    if (pos == this.size) return retIndex(this.content.length, pos)\n    if (pos > this.size || pos < 0) throw new RangeError(`Position ${pos} outside of fragment (${this})`)\n    for (let i = 0, curPos = 0;; i++) {\n      let cur = this.child(i), end = curPos + cur.nodeSize\n      if (end >= pos) {\n        if (end == pos || round > 0) return retIndex(i + 1, end)\n        return retIndex(i, curPos)\n      }\n      curPos = end\n    }\n  }\n\n  // :: () → string\n  // Return a debugging string that describes this fragment.\n  toString() { return \"<\" + this.toStringInner() + \">\" }\n\n  toStringInner() { return this.content.join(\", \") }\n\n  // :: () → ?Object\n  // Create a JSON-serializeable representation of this fragment.\n  toJSON() {\n    return this.content.length ? this.content.map(n => n.toJSON()) : null\n  }\n\n  // :: (Schema, ?Object) → Fragment\n  // Deserialize a fragment from its JSON representation.\n  static fromJSON(schema, value) {\n    if (!value) return Fragment.empty\n    if (!Array.isArray(value)) throw new RangeError(\"Invalid input for Fragment.fromJSON\")\n    return new Fragment(value.map(schema.nodeFromJSON))\n  }\n\n  // :: ([Node]) → Fragment\n  // Build a fragment from an array of nodes. Ensures that adjacent\n  // text nodes with the same marks are joined together.\n  static fromArray(array) {\n    if (!array.length) return Fragment.empty\n    let joined, size = 0\n    for (let i = 0; i < array.length; i++) {\n      let node = array[i]\n      size += node.nodeSize\n      if (i && node.isText && array[i - 1].sameMarkup(node)) {\n        if (!joined) joined = array.slice(0, i)\n        joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text)\n      } else if (joined) {\n        joined.push(node)\n      }\n    }\n    return new Fragment(joined || array, size)\n  }\n\n  // :: (?union<Fragment, Node, [Node]>) → Fragment\n  // Create a fragment from something that can be interpreted as a set\n  // of nodes. For `null`, it returns the empty fragment. For a\n  // fragment, the fragment itself. For a node or array of nodes, a\n  // fragment containing those nodes.\n  static from(nodes) {\n    if (!nodes) return Fragment.empty\n    if (nodes instanceof Fragment) return nodes\n    if (Array.isArray(nodes)) return this.fromArray(nodes)\n    return new Fragment([nodes], nodes.nodeSize)\n  }\n}\n\nconst found = {index: 0, offset: 0}\nfunction retIndex(index, offset) {\n  found.index = index\n  found.offset = offset\n  return found\n}\n\n// :: Fragment\n// An empty fragment. Intended to be reused whenever a node doesn't\n// contain anything (rather than allocating a new empty fragment for\n// each leaf node).\nFragment.empty = new Fragment([], 0)\n","export function compareDeep(a, b) {\n  if (a === b) return true\n  if (!(a && typeof a == \"object\") ||\n      !(b && typeof b == \"object\")) return false\n  let array = Array.isArray(a)\n  if (Array.isArray(b) != array) return false\n  if (array) {\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++) if (!compareDeep(a[i], b[i])) return false\n  } else {\n    for (let p in a) if (!(p in b) || !compareDeep(a[p], b[p])) return false\n    for (let p in b) if (!(p in a)) return false\n  }\n  return true\n}\n","import {compareDeep} from \"./comparedeep\"\n\n// ::- A mark is a piece of information that can be attached to a node,\n// such as it being emphasized, in code font, or a link. It has a type\n// and optionally a set of attributes that provide further information\n// (such as the target of the link). Marks are created through a\n// `Schema`, which controls which types exist and which\n// attributes they have.\nexport class Mark {\n  constructor(type, attrs) {\n    // :: MarkType\n    // The type of this mark.\n    this.type = type\n    // :: Object\n    // The attributes associated with this mark.\n    this.attrs = attrs\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Given a set of marks, create a new set which contains this one as\n  // well, in the right position. If this mark is already in the set,\n  // the set itself is returned. If any marks that are set to be\n  // [exclusive](#model.MarkSpec.excludes) with this mark are present,\n  // those are replaced by this one.\n  addToSet(set) {\n    let copy, placed = false\n    for (let i = 0; i < set.length; i++) {\n      let other = set[i]\n      if (this.eq(other)) return set\n      if (this.type.excludes(other.type)) {\n        if (!copy) copy = set.slice(0, i)\n      } else if (other.type.excludes(this.type)) {\n        return set\n      } else {\n        if (!placed && other.type.rank > this.type.rank) {\n          if (!copy) copy = set.slice(0, i)\n          copy.push(this)\n          placed = true\n        }\n        if (copy) copy.push(other)\n      }\n    }\n    if (!copy) copy = set.slice()\n    if (!placed) copy.push(this)\n    return copy\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Remove this mark from the given set, returning a new set. If this\n  // mark is not in the set, the set itself is returned.\n  removeFromSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (this.eq(set[i]))\n        return set.slice(0, i).concat(set.slice(i + 1))\n    return set\n  }\n\n  // :: ([Mark]) → bool\n  // Test whether this mark is in the given set of marks.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (this.eq(set[i])) return true\n    return false\n  }\n\n  // :: (Mark) → bool\n  // Test whether this mark has the same type and attributes as\n  // another mark.\n  eq(other) {\n    return this == other ||\n      (this.type == other.type && compareDeep(this.attrs, other.attrs))\n  }\n\n  // :: () → Object\n  // Convert this mark to a JSON-serializeable representation.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    return obj\n  }\n\n  // :: (Schema, Object) → Mark\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Mark.fromJSON\")\n    let type = schema.marks[json.type]\n    if (!type) throw new RangeError(`There is no mark type ${json.type} in this schema`)\n    return type.create(json.attrs)\n  }\n\n  // :: ([Mark], [Mark]) → bool\n  // Test whether two sets of marks are identical.\n  static sameSet(a, b) {\n    if (a == b) return true\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++)\n      if (!a[i].eq(b[i])) return false\n    return true\n  }\n\n  // :: (?union<Mark, [Mark]>) → [Mark]\n  // Create a properly sorted mark set from null, a single mark, or an\n  // unsorted array of marks.\n  static setFrom(marks) {\n    if (!marks || marks.length == 0) return Mark.none\n    if (marks instanceof Mark) return [marks]\n    let copy = marks.slice()\n    copy.sort((a, b) => a.type.rank - b.type.rank)\n    return copy\n  }\n}\n\n// :: [Mark] The empty set of marks.\nMark.none = []\n","import {Fragment} from \"./fragment\"\n\n// ReplaceError:: class extends Error\n// Error type raised by [`Node.replace`](#model.Node.replace) when\n// given an invalid replacement.\n\nexport function ReplaceError(message) {\n  let err = Error.call(this, message)\n  err.__proto__ = ReplaceError.prototype\n  return err\n}\n\nReplaceError.prototype = Object.create(Error.prototype)\nReplaceError.prototype.constructor = ReplaceError\nReplaceError.prototype.name = \"ReplaceError\"\n\n// ::- A slice represents a piece cut out of a larger document. It\n// stores not only a fragment, but also the depth up to which nodes on\n// both side are ‘open’ (cut through).\nexport class Slice {\n  // :: (Fragment, number, number)\n  // Create a slice. When specifying a non-zero open depth, you must\n  // make sure that there are nodes of at least that depth at the\n  // appropriate side of the fragment—i.e. if the fragment is an empty\n  // paragraph node, `openStart` and `openEnd` can't be greater than 1.\n  //\n  // It is not necessary for the content of open nodes to conform to\n  // the schema's content constraints, though it should be a valid\n  // start/end/middle for such a node, depending on which sides are\n  // open.\n  constructor(content, openStart, openEnd) {\n    // :: Fragment The slice's content.\n    this.content = content\n    // :: number The open depth at the start.\n    this.openStart = openStart\n    // :: number The open depth at the end.\n    this.openEnd = openEnd\n  }\n\n  // :: number\n  // The size this slice would add when inserted into a document.\n  get size() {\n    return this.content.size - this.openStart - this.openEnd\n  }\n\n  insertAt(pos, fragment) {\n    let content = insertInto(this.content, pos + this.openStart, fragment, null)\n    return content && new Slice(content, this.openStart, this.openEnd)\n  }\n\n  removeBetween(from, to) {\n    return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd)\n  }\n\n  // :: (Slice) → bool\n  // Tests whether this slice is equal to another slice.\n  eq(other) {\n    return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd\n  }\n\n  toString() {\n    return this.content + \"(\" + this.openStart + \",\" + this.openEnd + \")\"\n  }\n\n  // :: () → ?Object\n  // Convert a slice to a JSON-serializable representation.\n  toJSON() {\n    if (!this.content.size) return null\n    let json = {content: this.content.toJSON()}\n    if (this.openStart > 0) json.openStart = this.openStart\n    if (this.openEnd > 0) json.openEnd = this.openEnd\n    return json\n  }\n\n  // :: (Schema, ?Object) → Slice\n  // Deserialize a slice from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) return Slice.empty\n    let openStart = json.openStart || 0, openEnd = json.openEnd || 0\n    if (typeof openStart != \"number\" || typeof openEnd != \"number\")\n      throw new RangeError(\"Invalid input for Slice.fromJSON\")\n    return new Slice(Fragment.fromJSON(schema, json.content), json.openStart || 0, json.openEnd || 0)\n  }\n\n  // :: (Fragment, ?bool) → Slice\n  // Create a slice from a fragment by taking the maximum possible\n  // open value on both side of the fragment.\n  static maxOpen(fragment, openIsolating=true) {\n    let openStart = 0, openEnd = 0\n    for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild) openStart++\n    for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild) openEnd++\n    return new Slice(fragment, openStart, openEnd)\n  }\n}\n\nfunction removeRange(content, from, to) {\n  let {index, offset} = content.findIndex(from), child = content.maybeChild(index)\n  let {index: indexTo, offset: offsetTo} = content.findIndex(to)\n  if (offset == from || child.isText) {\n    if (offsetTo != to && !content.child(indexTo).isText) throw new RangeError(\"Removing non-flat range\")\n    return content.cut(0, from).append(content.cut(to))\n  }\n  if (index != indexTo) throw new RangeError(\"Removing non-flat range\")\n  return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)))\n}\n\nfunction insertInto(content, dist, insert, parent) {\n  let {index, offset} = content.findIndex(dist), child = content.maybeChild(index)\n  if (offset == dist || child.isText) {\n    if (parent && !parent.canReplace(index, index, insert)) return null\n    return content.cut(0, dist).append(insert).append(content.cut(dist))\n  }\n  let inner = insertInto(child.content, dist - offset - 1, insert)\n  return inner && content.replaceChild(index, child.copy(inner))\n}\n\n// :: Slice\n// The empty slice.\nSlice.empty = new Slice(Fragment.empty, 0, 0)\n\nexport function replace($from, $to, slice) {\n  if (slice.openStart > $from.depth)\n    throw new ReplaceError(\"Inserted content deeper than insertion position\")\n  if ($from.depth - slice.openStart != $to.depth - slice.openEnd)\n    throw new ReplaceError(\"Inconsistent open depths\")\n  return replaceOuter($from, $to, slice, 0)\n}\n\nfunction replaceOuter($from, $to, slice, depth) {\n  let index = $from.index(depth), node = $from.node(depth)\n  if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {\n    let inner = replaceOuter($from, $to, slice, depth + 1)\n    return node.copy(node.content.replaceChild(index, inner))\n  } else if (!slice.content.size) {\n    return close(node, replaceTwoWay($from, $to, depth))\n  } else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case\n    let parent = $from.parent, content = parent.content\n    return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)))\n  } else {\n    let {start, end} = prepareSliceForReplace(slice, $from)\n    return close(node, replaceThreeWay($from, start, end, $to, depth))\n  }\n}\n\nfunction checkJoin(main, sub) {\n  if (!sub.type.compatibleContent(main.type))\n    throw new ReplaceError(\"Cannot join \" + sub.type.name + \" onto \" + main.type.name)\n}\n\nfunction joinable($before, $after, depth) {\n  let node = $before.node(depth)\n  checkJoin(node, $after.node(depth))\n  return node\n}\n\nfunction addNode(child, target) {\n  let last = target.length - 1\n  if (last >= 0 && child.isText && child.sameMarkup(target[last]))\n    target[last] = child.withText(target[last].text + child.text)\n  else\n    target.push(child)\n}\n\nfunction addRange($start, $end, depth, target) {\n  let node = ($end || $start).node(depth)\n  let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount\n  if ($start) {\n    startIndex = $start.index(depth)\n    if ($start.depth > depth) {\n      startIndex++\n    } else if ($start.textOffset) {\n      addNode($start.nodeAfter, target)\n      startIndex++\n    }\n  }\n  for (let i = startIndex; i < endIndex; i++) addNode(node.child(i), target)\n  if ($end && $end.depth == depth && $end.textOffset)\n    addNode($end.nodeBefore, target)\n}\n\nfunction close(node, content) {\n  if (!node.type.validContent(content))\n    throw new ReplaceError(\"Invalid content for node \" + node.type.name)\n  return node.copy(content)\n}\n\nfunction replaceThreeWay($from, $start, $end, $to, depth) {\n  let openStart = $from.depth > depth && joinable($from, $start, depth + 1)\n  let openEnd = $to.depth > depth && joinable($end, $to, depth + 1)\n\n  let content = []\n  addRange(null, $from, depth, content)\n  if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {\n    checkJoin(openStart, openEnd)\n    addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content)\n  } else {\n    if (openStart)\n      addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content)\n    addRange($start, $end, depth, content)\n    if (openEnd)\n      addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content)\n  }\n  addRange($to, null, depth, content)\n  return new Fragment(content)\n}\n\nfunction replaceTwoWay($from, $to, depth) {\n  let content = []\n  addRange(null, $from, depth, content)\n  if ($from.depth > depth) {\n    let type = joinable($from, $to, depth + 1)\n    addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content)\n  }\n  addRange($to, null, depth, content)\n  return new Fragment(content)\n}\n\nfunction prepareSliceForReplace(slice, $along) {\n  let extra = $along.depth - slice.openStart, parent = $along.node(extra)\n  let node = parent.copy(slice.content)\n  for (let i = extra - 1; i >= 0; i--)\n    node = $along.node(i).copy(Fragment.from(node))\n  return {start: node.resolveNoCache(slice.openStart + extra),\n          end: node.resolveNoCache(node.content.size - slice.openEnd - extra)}\n}\n","import {Mark} from \"./mark\"\n\n// ::- You can [_resolve_](#model.Node.resolve) a position to get more\n// information about it. Objects of this class represent such a\n// resolved position, providing various pieces of context information,\n// and some helper methods.\n//\n// Throughout this interface, methods that take an optional `depth`\n// parameter will interpret undefined as `this.depth` and negative\n// numbers as `this.depth + value`.\nexport class ResolvedPos {\n  constructor(pos, path, parentOffset) {\n    // :: number The position that was resolved.\n    this.pos = pos\n    this.path = path\n    // :: number\n    // The number of levels the parent node is from the root. If this\n    // position points directly into the root node, it is 0. If it\n    // points into a top-level paragraph, 1, and so on.\n    this.depth = path.length / 3 - 1\n    // :: number The offset this position has into its parent node.\n    this.parentOffset = parentOffset\n  }\n\n  resolveDepth(val) {\n    if (val == null) return this.depth\n    if (val < 0) return this.depth + val\n    return val\n  }\n\n  // :: Node\n  // The parent node that the position points into. Note that even if\n  // a position points into a text node, that node is not considered\n  // the parent—text nodes are ‘flat’ in this model, and have no content.\n  get parent() { return this.node(this.depth) }\n\n  // :: Node\n  // The root node in which the position was resolved.\n  get doc() { return this.node(0) }\n\n  // :: (?number) → Node\n  // The ancestor node at the given level. `p.node(p.depth)` is the\n  // same as `p.parent`.\n  node(depth) { return this.path[this.resolveDepth(depth) * 3] }\n\n  // :: (?number) → number\n  // The index into the ancestor at the given level. If this points at\n  // the 3rd node in the 2nd paragraph on the top level, for example,\n  // `p.index(0)` is 2 and `p.index(1)` is 3.\n  index(depth) { return this.path[this.resolveDepth(depth) * 3 + 1] }\n\n  // :: (?number) → number\n  // The index pointing after this position into the ancestor at the\n  // given level.\n  indexAfter(depth) {\n    depth = this.resolveDepth(depth)\n    return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1)\n  }\n\n  // :: (?number) → number\n  // The (absolute) position at the start of the node at the given\n  // level.\n  start(depth) {\n    depth = this.resolveDepth(depth)\n    return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\n  }\n\n  // :: (?number) → number\n  // The (absolute) position at the end of the node at the given\n  // level.\n  end(depth) {\n    depth = this.resolveDepth(depth)\n    return this.start(depth) + this.node(depth).content.size\n  }\n\n  // :: (?number) → number\n  // The (absolute) position directly before the wrapping node at the\n  // given level, or, when `level` is `this.depth + 1`, the original\n  // position.\n  before(depth) {\n    depth = this.resolveDepth(depth)\n    if (!depth) throw new RangeError(\"There is no position before the top-level node\")\n    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1]\n  }\n\n  // :: (?number) → number\n  // The (absolute) position directly after the wrapping node at the\n  // given level, or the original position when `level` is `this.depth + 1`.\n  after(depth) {\n    depth = this.resolveDepth(depth)\n    if (!depth) throw new RangeError(\"There is no position after the top-level node\")\n    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize\n  }\n\n  // :: number\n  // When this position points into a text node, this returns the\n  // distance between the position and the start of the text node.\n  // Will be zero for positions that point between nodes.\n  get textOffset() { return this.pos - this.path[this.path.length - 1] }\n\n  // :: ?Node\n  // Get the node directly after the position, if any. If the position\n  // points into a text node, only the part of that node after the\n  // position is returned.\n  get nodeAfter() {\n    let parent = this.parent, index = this.index(this.depth)\n    if (index == parent.childCount) return null\n    let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index)\n    return dOff ? parent.child(index).cut(dOff) : child\n  }\n\n  // :: ?Node\n  // Get the node directly before the position, if any. If the\n  // position points into a text node, only the part of that node\n  // before the position is returned.\n  get nodeBefore() {\n    let index = this.index(this.depth)\n    let dOff = this.pos - this.path[this.path.length - 1]\n    if (dOff) return this.parent.child(index).cut(0, dOff)\n    return index == 0 ? null : this.parent.child(index - 1)\n  }\n\n  // :: () → [Mark]\n  // Get the marks at this position, factoring in the surrounding\n  // marks' [`inclusive`](#model.MarkSpec.inclusive) property. If the\n  // position is at the start of a non-empty node, the marks of the\n  // node after it (if any) are returned.\n  marks() {\n    let parent = this.parent, index = this.index()\n\n    // In an empty parent, return the empty array\n    if (parent.content.size == 0) return Mark.none\n\n    // When inside a text node, just return the text node's marks\n    if (this.textOffset) return parent.child(index).marks\n\n    let main = parent.maybeChild(index - 1), other = parent.maybeChild(index)\n    // If the `after` flag is true of there is no node before, make\n    // the node after this position the main reference.\n    if (!main) { let tmp = main; main = other; other = tmp }\n\n    // Use all marks in the main node, except those that have\n    // `inclusive` set to false and are not present in the other node.\n    let marks = main.marks\n    for (var i = 0; i < marks.length; i++)\n      if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))\n        marks = marks[i--].removeFromSet(marks)\n\n    return marks\n  }\n\n  // :: (ResolvedPos) → ?[Mark]\n  // Get the marks after the current position, if any, except those\n  // that are non-inclusive and not present at position `$end`. This\n  // is mostly useful for getting the set of marks to preserve after a\n  // deletion. Will return `null` if this position is at the end of\n  // its parent node or its parent node isn't a textblock (in which\n  // case no marks should be preserved).\n  marksAcross($end) {\n    let after = this.parent.maybeChild(this.index())\n    if (!after || !after.isInline) return null\n\n    let marks = after.marks, next = $end.parent.maybeChild($end.index())\n    for (var i = 0; i < marks.length; i++)\n      if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))\n        marks = marks[i--].removeFromSet(marks)\n    return marks\n  }\n\n  // :: (number) → number\n  // The depth up to which this position and the given (non-resolved)\n  // position share the same parent nodes.\n  sharedDepth(pos) {\n    for (let depth = this.depth; depth > 0; depth--)\n      if (this.start(depth) <= pos && this.end(depth) >= pos) return depth\n    return 0\n  }\n\n  // :: (?ResolvedPos, ?(Node) → bool) → ?NodeRange\n  // Returns a range based on the place where this position and the\n  // given position diverge around block content. If both point into\n  // the same textblock, for example, a range around that textblock\n  // will be returned. If they point into different blocks, the range\n  // around those blocks in their shared ancestor is returned. You can\n  // pass in an optional predicate that will be called with a parent\n  // node to see if a range into that parent is acceptable.\n  blockRange(other = this, pred) {\n    if (other.pos < this.pos) return other.blockRange(this)\n    for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)\n      if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))\n        return new NodeRange(this, other, d)\n  }\n\n  // :: (ResolvedPos) → bool\n  // Query whether the given position shares the same parent node.\n  sameParent(other) {\n    return this.pos - this.parentOffset == other.pos - other.parentOffset\n  }\n\n  // :: (ResolvedPos) → ResolvedPos\n  // Return the greater of this and the given position.\n  max(other) {\n    return other.pos > this.pos ? other : this\n  }\n\n  // :: (ResolvedPos) → ResolvedPos\n  // Return the smaller of this and the given position.\n  min(other) {\n    return other.pos < this.pos ? other : this\n  }\n\n  toString() {\n    let str = \"\"\n    for (let i = 1; i <= this.depth; i++)\n      str += (str ? \"/\" : \"\") + this.node(i).type.name + \"_\" + this.index(i - 1)\n    return str + \":\" + this.parentOffset\n  }\n\n  static resolve(doc, pos) {\n    if (!(pos >= 0 && pos <= doc.content.size)) throw new RangeError(\"Position \" + pos + \" out of range\")\n    let path = []\n    let start = 0, parentOffset = pos\n    for (let node = doc;;) {\n      let {index, offset} = node.content.findIndex(parentOffset)\n      let rem = parentOffset - offset\n      path.push(node, index, start + offset)\n      if (!rem) break\n      node = node.child(index)\n      if (node.isText) break\n      parentOffset = rem - 1\n      start += offset + 1\n    }\n    return new ResolvedPos(pos, path, parentOffset)\n  }\n\n  static resolveCached(doc, pos) {\n    for (let i = 0; i < resolveCache.length; i++) {\n      let cached = resolveCache[i]\n      if (cached.pos == pos && cached.doc == doc) return cached\n    }\n    let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos)\n    resolveCachePos = (resolveCachePos + 1) % resolveCacheSize\n    return result\n  }\n}\n\nlet resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12\n\n// ::- Represents a flat range of content, i.e. one that starts and\n// ends in the same node.\nexport class NodeRange {\n  // :: (ResolvedPos, ResolvedPos, number)\n  // Construct a node range. `$from` and `$to` should point into the\n  // same node until at least the given `depth`, since a node range\n  // denotes an adjacent set of nodes in a single parent node.\n  constructor($from, $to, depth) {\n    // :: ResolvedPos A resolved position along the start of the\n    // content. May have a `depth` greater than this object's `depth`\n    // property, since these are the positions that were used to\n    // compute the range, not re-resolved positions directly at its\n    // boundaries.\n    this.$from = $from\n    // :: ResolvedPos A position along the end of the content. See\n    // caveat for [`$from`](#model.NodeRange.$from).\n    this.$to = $to\n    // :: number The depth of the node that this range points into.\n    this.depth = depth\n  }\n\n  // :: number The position at the start of the range.\n  get start() { return this.$from.before(this.depth + 1) }\n  // :: number The position at the end of the range.\n  get end() { return this.$to.after(this.depth + 1) }\n\n  // :: Node The parent node that the range points into.\n  get parent() { return this.$from.node(this.depth) }\n  // :: number The start index of the range in the parent node.\n  get startIndex() { return this.$from.index(this.depth) }\n  // :: number The end index of the range in the parent node.\n  get endIndex() { return this.$to.indexAfter(this.depth) }\n}\n","import {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {Slice, replace} from \"./replace\"\nimport {ResolvedPos} from \"./resolvedpos\"\nimport {compareDeep} from \"./comparedeep\"\n\nconst emptyAttrs = Object.create(null)\n\n// ::- This class represents a node in the tree that makes up a\n// ProseMirror document. So a document is an instance of `Node`, with\n// children that are also instances of `Node`.\n//\n// Nodes are persistent data structures. Instead of changing them, you\n// create new ones with the content you want. Old ones keep pointing\n// at the old document shape. This is made cheaper by sharing\n// structure between the old and new data as much as possible, which a\n// tree shape like this (without back pointers) makes easy.\n//\n// **Do not** directly mutate the properties of a `Node` object. See\n// [the guide](/docs/guide/#doc) for more information.\nexport class Node {\n  constructor(type, attrs, content, marks) {\n    // :: NodeType\n    // The type of node that this is.\n    this.type = type\n\n    // :: Object\n    // An object mapping attribute names to values. The kind of\n    // attributes allowed and required are\n    // [determined](#model.NodeSpec.attrs) by the node type.\n    this.attrs = attrs\n\n    // :: Fragment\n    // A container holding the node's children.\n    this.content = content || Fragment.empty\n\n    // :: [Mark]\n    // The marks (things like whether it is emphasized or part of a\n    // link) applied to this node.\n    this.marks = marks || Mark.none\n  }\n\n  // text:: ?string\n  // For text nodes, this contains the node's text content.\n\n  // :: number\n  // The size of this node, as defined by the integer-based [indexing\n  // scheme](/docs/guide/#doc.indexing). For text nodes, this is the\n  // amount of characters. For other leaf nodes, it is one. For\n  // non-leaf nodes, it is the size of the content plus two (the start\n  // and end token).\n  get nodeSize() { return this.isLeaf ? 1 : 2 + this.content.size }\n\n  // :: number\n  // The number of children that the node has.\n  get childCount() { return this.content.childCount }\n\n  // :: (number) → Node\n  // Get the child node at the given index. Raises an error when the\n  // index is out of range.\n  child(index) { return this.content.child(index) }\n\n  // :: (number) → ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) { return this.content.maybeChild(index) }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) { this.content.forEach(f) }\n\n  // :: (number, number, (node: Node, pos: number, parent: Node, index: number) → ?bool, ?number)\n  // Invoke a callback for all descendant nodes recursively between\n  // the given two positions that are relative to start of this node's\n  // content. The callback is invoked with the node, its\n  // parent-relative position, its parent node, and its child index.\n  // When the callback returns false for a given node, that node's\n  // children will not be recursed over. The last parameter can be\n  // used to specify a starting position to count from.\n  nodesBetween(from, to, f, startPos = 0) {\n    this.content.nodesBetween(from, to, f, startPos, this)\n  }\n\n  // :: ((node: Node, pos: number, parent: Node) → ?bool)\n  // Call the given callback for every descendant node. Doesn't\n  // descend into a node when the callback returns `false`.\n  descendants(f) {\n    this.nodesBetween(0, this.content.size, f)\n  }\n\n  // :: string\n  // Concatenates all the text nodes found in this fragment and its\n  // children.\n  get textContent() { return this.textBetween(0, this.content.size, \"\") }\n\n  // :: (number, number, ?string, ?string) → string\n  // Get all text between positions `from` and `to`. When\n  // `blockSeparator` is given, it will be inserted whenever a new\n  // block node is started. When `leafText` is given, it'll be\n  // inserted for every non-text leaf node encountered.\n  textBetween(from, to, blockSeparator, leafText) {\n    return this.content.textBetween(from, to, blockSeparator, leafText)\n  }\n\n  // :: ?Node\n  // Returns this node's first child, or `null` if there are no\n  // children.\n  get firstChild() { return this.content.firstChild }\n\n  // :: ?Node\n  // Returns this node's last child, or `null` if there are no\n  // children.\n  get lastChild() { return this.content.lastChild }\n\n  // :: (Node) → bool\n  // Test whether two nodes represent the same piece of document.\n  eq(other) {\n    return this == other || (this.sameMarkup(other) && this.content.eq(other.content))\n  }\n\n  // :: (Node) → bool\n  // Compare the markup (type, attributes, and marks) of this node to\n  // those of another. Returns `true` if both have the same markup.\n  sameMarkup(other) {\n    return this.hasMarkup(other.type, other.attrs, other.marks)\n  }\n\n  // :: (NodeType, ?Object, ?[Mark]) → bool\n  // Check whether this node's markup correspond to the given type,\n  // attributes, and marks.\n  hasMarkup(type, attrs, marks) {\n    return this.type == type &&\n      compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&\n      Mark.sameSet(this.marks, marks || Mark.none)\n  }\n\n  // :: (?Fragment) → Node\n  // Create a new node with the same markup as this node, containing\n  // the given content (or empty, if no content is given).\n  copy(content = null) {\n    if (content == this.content) return this\n    return new this.constructor(this.type, this.attrs, content, this.marks)\n  }\n\n  // :: ([Mark]) → Node\n  // Create a copy of this node, with the given set of marks instead\n  // of the node's own marks.\n  mark(marks) {\n    return marks == this.marks ? this : new this.constructor(this.type, this.attrs, this.content, marks)\n  }\n\n  // :: (number, ?number) → Node\n  // Create a copy of this node with only the content between the\n  // given positions. If `to` is not given, it defaults to the end of\n  // the node.\n  cut(from, to) {\n    if (from == 0 && to == this.content.size) return this\n    return this.copy(this.content.cut(from, to))\n  }\n\n  // :: (number, ?number) → Slice\n  // Cut out the part of the document between the given positions, and\n  // return it as a `Slice` object.\n  slice(from, to = this.content.size, includeParents = false) {\n    if (from == to) return Slice.empty\n\n    let $from = this.resolve(from), $to = this.resolve(to)\n    let depth = includeParents ? 0 : $from.sharedDepth(to)\n    let start = $from.start(depth), node = $from.node(depth)\n    let content = node.content.cut($from.pos - start, $to.pos - start)\n    return new Slice(content, $from.depth - depth, $to.depth - depth)\n  }\n\n  // :: (number, number, Slice) → Node\n  // Replace the part of the document between the given positions with\n  // the given slice. The slice must 'fit', meaning its open sides\n  // must be able to connect to the surrounding content, and its\n  // content nodes must be valid children for the node they are placed\n  // into. If any of this is violated, an error of type\n  // [`ReplaceError`](#model.ReplaceError) is thrown.\n  replace(from, to, slice) {\n    return replace(this.resolve(from), this.resolve(to), slice)\n  }\n\n  // :: (number) → ?Node\n  // Find the node directly after the given position.\n  nodeAt(pos) {\n    for (let node = this;;) {\n      let {index, offset} = node.content.findIndex(pos)\n      node = node.maybeChild(index)\n      if (!node) return null\n      if (offset == pos || node.isText) return node\n      pos -= offset + 1\n    }\n  }\n\n  // :: (number) → {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node after the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childAfter(pos) {\n    let {index, offset} = this.content.findIndex(pos)\n    return {node: this.content.maybeChild(index), index, offset}\n  }\n\n  // :: (number) → {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node before the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childBefore(pos) {\n    if (pos == 0) return {node: null, index: 0, offset: 0}\n    let {index, offset} = this.content.findIndex(pos)\n    if (offset < pos) return {node: this.content.child(index), index, offset}\n    let node = this.content.child(index - 1)\n    return {node, index: index - 1, offset: offset - node.nodeSize}\n  }\n\n  // :: (number) → ResolvedPos\n  // Resolve the given position in the document, returning an\n  // [object](#model.ResolvedPos) with information about its context.\n  resolve(pos) { return ResolvedPos.resolveCached(this, pos) }\n\n  resolveNoCache(pos) { return ResolvedPos.resolve(this, pos) }\n\n  // :: (number, number, MarkType) → bool\n  // Test whether a mark of the given type occurs in this document\n  // between the two given positions.\n  rangeHasMark(from, to, type) {\n    let found = false\n    if (to > from) this.nodesBetween(from, to, node => {\n      if (type.isInSet(node.marks)) found = true\n      return !found\n    })\n    return found\n  }\n\n  // :: bool\n  // True when this is a block (non-inline node)\n  get isBlock() { return this.type.isBlock }\n\n  // :: bool\n  // True when this is a textblock node, a block node with inline\n  // content.\n  get isTextblock() { return this.type.isTextblock }\n\n  // :: bool\n  // True when this node has inline content.\n  get inlineContent() { return this.type.inlineContent }\n\n  // :: bool\n  // True when this is an inline node (a text node or a node that can\n  // appear among text).\n  get isInline() { return this.type.isInline }\n\n  // :: bool\n  // True when this is a text node.\n  get isText() { return this.type.isText }\n\n  // :: bool\n  // True when this is a leaf node.\n  get isLeaf() { return this.type.isLeaf }\n\n  // :: bool\n  // True when this is an atom, i.e. when it does not have directly\n  // editable content. This is usually the same as `isLeaf`, but can\n  // be configured with the [`atom` property](#model.NodeSpec.atom) on\n  // a node's spec (typically used when the node is displayed as an\n  // uneditable [node view](#view.NodeView)).\n  get isAtom() { return this.type.isAtom }\n\n  // :: () → string\n  // Return a string representation of this node for debugging\n  // purposes.\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    let name = this.type.name\n    if (this.content.size)\n      name += \"(\" + this.content.toStringInner() + \")\"\n    return wrapMarks(this.marks, name)\n  }\n\n  // :: (number) → ContentMatch\n  // Get the content match in this node at the given index.\n  contentMatchAt(index) {\n    let match = this.type.contentMatch.matchFragment(this.content, 0, index)\n    if (!match) throw new Error(\"Called contentMatchAt on a node with invalid content\")\n    return match\n  }\n\n  // :: (number, number, ?Fragment, ?number, ?number) → bool\n  // Test whether replacing the range between `from` and `to` (by\n  // child index) with the given replacement fragment (which defaults\n  // to the empty fragment) would leave the node's content valid. You\n  // can optionally pass `start` and `end` indices into the\n  // replacement fragment.\n  canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {\n    let one = this.contentMatchAt(from).matchFragment(replacement, start, end)\n    let two = one && one.matchFragment(this.content, to)\n    if (!two || !two.validEnd) return false\n    for (let i = start; i < end; i++) if (!this.type.allowsMarks(replacement.child(i).marks)) return false\n    return true\n  }\n\n  // :: (number, number, NodeType, ?[Mark]) → bool\n  // Test whether replacing the range `from` to `to` (by index) with a\n  // node of the given type would leave the node's content valid.\n  canReplaceWith(from, to, type, marks) {\n    if (marks && !this.type.allowsMarks(marks)) return false\n    let start = this.contentMatchAt(from).matchType(type)\n    let end = start && start.matchFragment(this.content, to)\n    return end ? end.validEnd : false\n  }\n\n  // :: (Node) → bool\n  // Test whether the given node's content could be appended to this\n  // node. If that node is empty, this will only return true if there\n  // is at least one node type that can appear in both nodes (to avoid\n  // merging completely incompatible nodes).\n  canAppend(other) {\n    if (other.content.size) return this.canReplace(this.childCount, this.childCount, other.content)\n    else return this.type.compatibleContent(other.type)\n  }\n\n  // Unused. Left for backwards compatibility.\n  defaultContentType(at) {\n    return this.contentMatchAt(at).defaultType\n  }\n\n  // :: ()\n  // Check whether this node and its descendants conform to the\n  // schema, and raise error when they do not.\n  check() {\n    if (!this.type.validContent(this.content))\n      throw new RangeError(`Invalid content for node ${this.type.name}: ${this.content.toString().slice(0, 50)}`)\n    this.content.forEach(node => node.check())\n  }\n\n  // :: () → Object\n  // Return a JSON-serializeable representation of this node.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    if (this.content.size)\n      obj.content = this.content.toJSON()\n    if (this.marks.length)\n      obj.marks = this.marks.map(n => n.toJSON())\n    return obj\n  }\n\n  // :: (Schema, Object) → Node\n  // Deserialize a node from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Node.fromJSON\")\n    let marks = null\n    if (json.marks) {\n      if (!Array.isArray(json.marks)) throw new RangeError(\"Invalid mark data for Node.fromJSON\")\n      marks = json.marks.map(schema.markFromJSON)\n    }\n    if (json.type == \"text\") {\n      if (typeof json.text != \"string\") throw new RangeError(\"Invalid text node in JSON\")\n      return schema.text(json.text, marks)\n    }\n    let content = Fragment.fromJSON(schema, json.content)\n    return schema.nodeType(json.type).create(json.attrs, content, marks)\n  }\n}\n\nexport class TextNode extends Node {\n  constructor(type, attrs, content, marks) {\n    super(type, attrs, null, marks)\n\n    if (!content) throw new RangeError(\"Empty text nodes are not allowed\")\n\n    this.text = content\n  }\n\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    return wrapMarks(this.marks, JSON.stringify(this.text))\n  }\n\n  get textContent() { return this.text }\n\n  textBetween(from, to) { return this.text.slice(from, to) }\n\n  get nodeSize() { return this.text.length }\n\n  mark(marks) {\n    return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks)\n  }\n\n  withText(text) {\n    if (text == this.text) return this\n    return new TextNode(this.type, this.attrs, text, this.marks)\n  }\n\n  cut(from = 0, to = this.text.length) {\n    if (from == 0 && to == this.text.length) return this\n    return this.withText(this.text.slice(from, to))\n  }\n\n  eq(other) {\n    return this.sameMarkup(other) && this.text == other.text\n  }\n\n  toJSON() {\n    let base = super.toJSON()\n    base.text = this.text\n    return base\n  }\n}\n\nfunction wrapMarks(marks, str) {\n  for (let i = marks.length - 1; i >= 0; i--)\n    str = marks[i].type.name + \"(\" + str + \")\"\n  return str\n}\n","import {Fragment} from \"./fragment\"\n\n// ::- Instances of this class represent a match state of a node\n// type's [content expression](#model.NodeSpec.content), and can be\n// used to find out whether further content matches here, and whether\n// a given position is a valid end of the node.\nexport class ContentMatch {\n  constructor(validEnd) {\n    // :: bool\n    // True when this match state represents a valid end of the node.\n    this.validEnd = validEnd\n    this.next = []\n    this.wrapCache = []\n  }\n\n  static parse(string, nodeTypes) {\n    let stream = new TokenStream(string, nodeTypes)\n    if (stream.next == null) return ContentMatch.empty\n    let expr = parseExpr(stream)\n    if (stream.next) stream.err(\"Unexpected trailing text\")\n    let match = dfa(nfa(expr))\n    checkForDeadEnds(match, stream)\n    return match\n  }\n\n  // :: (NodeType) → ?ContentMatch\n  // Match a node type, returning a match after that node if\n  // successful.\n  matchType(type) {\n    for (let i = 0; i < this.next.length; i += 2)\n      if (this.next[i] == type) return this.next[i + 1]\n    return null\n  }\n\n  // :: (Fragment, ?number, ?number) → ?ContentMatch\n  // Try to match a fragment. Returns the resulting match when\n  // successful.\n  matchFragment(frag, start = 0, end = frag.childCount) {\n    let cur = this\n    for (let i = start; cur && i < end; i++)\n      cur = cur.matchType(frag.child(i).type)\n    return cur\n  }\n\n  get inlineContent() {\n    let first = this.next[0]\n    return first ? first.isInline : false\n  }\n\n  // :: ?NodeType\n  // Get the first matching node type at this match position that can\n  // be generated.\n  get defaultType() {\n    for (let i = 0; i < this.next.length; i += 2) {\n      let type = this.next[i]\n      if (!(type.isText || type.hasRequiredAttrs())) return type\n    }\n  }\n\n  compatible(other) {\n    for (let i = 0; i < this.next.length; i += 2)\n      for (let j = 0; j < other.next.length; j += 2)\n        if (this.next[i] == other.next[j]) return true\n    return false\n  }\n\n  // :: (Fragment, bool, ?number) → ?Fragment\n  // Try to match the given fragment, and if that fails, see if it can\n  // be made to match by inserting nodes in front of it. When\n  // successful, return a fragment of inserted nodes (which may be\n  // empty if nothing had to be inserted). When `toEnd` is true, only\n  // return a fragment if the resulting match goes to the end of the\n  // content expression.\n  fillBefore(after, toEnd = false, startIndex = 0) {\n    let seen = [this]\n    function search(match, types) {\n      let finished = match.matchFragment(after, startIndex)\n      if (finished && (!toEnd || finished.validEnd))\n        return Fragment.from(types.map(tp => tp.createAndFill()))\n\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i], next = match.next[i + 1]\n        if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {\n          seen.push(next)\n          let found = search(next, types.concat(type))\n          if (found) return found\n        }\n      }\n    }\n\n    return search(this, [])\n  }\n\n  // :: (NodeType) → ?[NodeType]\n  // Find a set of wrapping node types that would allow a node of the\n  // given type to appear at this position. The result may be empty\n  // (when it fits directly) and will be null when no such wrapping\n  // exists.\n  findWrapping(target) {\n    for (let i = 0; i < this.wrapCache.length; i += 2)\n      if (this.wrapCache[i] == target) return this.wrapCache[i + 1]\n    let computed = this.computeWrapping(target)\n    this.wrapCache.push(target, computed)\n    return computed\n  }\n\n  computeWrapping(target) {\n    let seen = Object.create(null), active = [{match: this, type: null, via: null}]\n    while (active.length) {\n      let current = active.shift(), match = current.match\n      if (match.matchType(target)) {\n        let result = []\n        for (let obj = current; obj.type; obj = obj.via)\n          result.push(obj.type)\n        return result.reverse()\n      }\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i]\n        if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || match.next[i + 1].validEnd)) {\n          active.push({match: type.contentMatch, type, via: current})\n          seen[type.name] = true\n        }\n      }\n    }\n  }\n\n  // :: number\n  // The number of outgoing edges this node has in the finite\n  // automaton that describes the content expression.\n  get edgeCount() {\n    return this.next.length >> 1\n  }\n\n  // :: (number) → {type: NodeType, next: ContentMatch}\n  // Get the _n_th outgoing edge from this node in the finite\n  // automaton that describes the content expression.\n  edge(n) {\n    let i = n << 1\n    if (i > this.next.length) throw new RangeError(`There's no ${n}th edge in this content match`)\n    return {type: this.next[i], next: this.next[i + 1]}\n  }\n\n  toString() {\n    let seen = []\n    function scan(m) {\n      seen.push(m)\n      for (let i = 1; i < m.next.length; i += 2)\n        if (seen.indexOf(m.next[i]) == -1) scan(m.next[i])\n    }\n    scan(this)\n    return seen.map((m, i) => {\n      let out = i + (m.validEnd ? \"*\" : \" \") + \" \"\n      for (let i = 0; i < m.next.length; i += 2)\n        out += (i ? \", \" : \"\") + m.next[i].name + \"->\" + seen.indexOf(m.next[i + 1])\n      return out\n    }).join(\"\\n\")\n  }\n}\n\nContentMatch.empty = new ContentMatch(true)\n\nclass TokenStream {\n  constructor(string, nodeTypes) {\n    this.string = string\n    this.nodeTypes = nodeTypes\n    this.inline = null\n    this.pos = 0\n    this.tokens = string.split(/\\s*(?=\\b|\\W|$)/)\n    if (this.tokens[this.tokens.length - 1] == \"\") this.tokens.pop()\n    if (this.tokens[0] == \"\") this.tokens.unshift()\n  }\n\n  get next() { return this.tokens[this.pos] }\n\n  eat(tok) { return this.next == tok && (this.pos++ || true) }\n\n  err(str) { throw new SyntaxError(str + \" (in content expression '\" + this.string + \"')\") }\n}\n\nfunction parseExpr(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSeq(stream)) }\n  while (stream.eat(\"|\"))\n  return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n}\n\nfunction parseExprSeq(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSubscript(stream)) }\n  while (stream.next && stream.next != \")\" && stream.next != \"|\")\n  return exprs.length == 1 ? exprs[0] : {type: \"seq\", exprs}\n}\n\nfunction parseExprSubscript(stream) {\n  let expr = parseExprAtom(stream)\n  for (;;) {\n    if (stream.eat(\"+\"))\n      expr = {type: \"plus\", expr}\n    else if (stream.eat(\"*\"))\n      expr = {type: \"star\", expr}\n    else if (stream.eat(\"?\"))\n      expr = {type: \"opt\", expr}\n    else if (stream.eat(\"{\"))\n      expr = parseExprRange(stream, expr)\n    else break\n  }\n  return expr\n}\n\nfunction parseNum(stream) {\n  if (/\\D/.test(stream.next)) stream.err(\"Expected number, got '\" + stream.next + \"'\")\n  let result = Number(stream.next)\n  stream.pos++\n  return result\n}\n\nfunction parseExprRange(stream, expr) {\n  let min = parseNum(stream), max = min\n  if (stream.eat(\",\")) {\n    if (stream.next != \"}\") max = parseNum(stream)\n    else max = -1\n  }\n  if (!stream.eat(\"}\")) stream.err(\"Unclosed braced range\")\n  return {type: \"range\", min, max, expr}\n}\n\nfunction resolveName(stream, name) {\n  let types = stream.nodeTypes, type = types[name]\n  if (type) return [type]\n  let result = []\n  for (let typeName in types) {\n    let type = types[typeName]\n    if (type.groups.indexOf(name) > -1) result.push(type)\n  }\n  if (result.length == 0) stream.err(\"No node type or group '\" + name + \"' found\")\n  return result\n}\n\nfunction parseExprAtom(stream) {\n  if (stream.eat(\"(\")) {\n    let expr = parseExpr(stream)\n    if (!stream.eat(\")\")) stream.err(\"Missing closing paren\")\n    return expr\n  } else if (!/\\W/.test(stream.next)) {\n    let exprs = resolveName(stream, stream.next).map(type => {\n      if (stream.inline == null) stream.inline = type.isInline\n      else if (stream.inline != type.isInline) stream.err(\"Mixing inline and block content\")\n      return {type: \"name\", value: type}\n    })\n    stream.pos++\n    return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n  } else {\n    stream.err(\"Unexpected token '\" + stream.next + \"'\")\n  }\n}\n\n// The code below helps compile a regular-expression-like language\n// into a deterministic finite automaton. For a good introduction to\n// these concepts, see https://swtch.com/~rsc/regexp/regexp1.html\n\n// : (Object) → [[{term: ?any, to: number}]]\n// Construct an NFA from an expression as returned by the parser. The\n// NFA is represented as an array of states, which are themselves\n// arrays of edges, which are `{term, to}` objects. The first state is\n// the entry state and the last node is the success state.\n//\n// Note that unlike typical NFAs, the edge ordering in this one is\n// significant, in that it is used to contruct filler content when\n// necessary.\nfunction nfa(expr) {\n  let nfa = [[]]\n  connect(compile(expr, 0), node())\n  return nfa\n\n  function node() { return nfa.push([]) - 1 }\n  function edge(from, to, term) {\n    let edge = {term, to}\n    nfa[from].push(edge)\n    return edge\n  }\n  function connect(edges, to) { edges.forEach(edge => edge.to = to) }\n\n  function compile(expr, from) {\n    if (expr.type == \"choice\") {\n      return expr.exprs.reduce((out, expr) => out.concat(compile(expr, from)), [])\n    } else if (expr.type == \"seq\") {\n      for (let i = 0;; i++) {\n        let next = compile(expr.exprs[i], from)\n        if (i == expr.exprs.length - 1) return next\n        connect(next, from = node())\n      }\n    } else if (expr.type == \"star\") {\n      let loop = node()\n      edge(from, loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"plus\") {\n      let loop = node()\n      connect(compile(expr.expr, from), loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"opt\") {\n      return [edge(from)].concat(compile(expr.expr, from))\n    } else if (expr.type == \"range\") {\n      let cur = from\n      for (let i = 0; i < expr.min; i++) {\n        let next = node()\n        connect(compile(expr.expr, cur), next)\n        cur = next\n      }\n      if (expr.max == -1) {\n        connect(compile(expr.expr, cur), cur)\n      } else {\n        for (let i = expr.min; i < expr.max; i++) {\n          let next = node()\n          edge(cur, next)\n          connect(compile(expr.expr, cur), next)\n          cur = next\n        }\n      }\n      return [edge(cur)]\n    } else if (expr.type == \"name\") {\n      return [edge(from, null, expr.value)]\n    }\n  }\n}\n\nfunction cmp(a, b) { return a - b }\n\n// Get the set of nodes reachable by null edges from `node`. Omit\n// nodes with only a single null-out-edge, since they may lead to\n// needless duplicated nodes.\nfunction nullFrom(nfa, node) {\n  let result = []\n  scan(node)\n  return result.sort(cmp)\n\n  function scan(node) {\n    let edges = nfa[node]\n    if (edges.length == 1 && !edges[0].term) return scan(edges[0].to)\n    result.push(node)\n    for (let i = 0; i < edges.length; i++) {\n      let {term, to} = edges[i]\n      if (!term && result.indexOf(to) == -1) scan(to)\n    }\n  }\n}\n\n// : ([[{term: ?any, to: number}]]) → ContentMatch\n// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set\n// of state objects (`ContentMatch` instances) with transitions\n// between them.\nfunction dfa(nfa) {\n  let labeled = Object.create(null)\n  return explore(nullFrom(nfa, 0))\n\n  function explore(states) {\n    let out = []\n    states.forEach(node => {\n      nfa[node].forEach(({term, to}) => {\n        if (!term) return\n        let known = out.indexOf(term), set = known > -1 && out[known + 1]\n        nullFrom(nfa, to).forEach(node => {\n          if (!set) out.push(term, set = [])\n          if (set.indexOf(node) == -1) set.push(node)\n        })\n      })\n    })\n    let state = labeled[states.join(\",\")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1)\n    for (let i = 0; i < out.length; i += 2) {\n      let states = out[i + 1].sort(cmp)\n      state.next.push(out[i], labeled[states.join(\",\")] || explore(states))\n    }\n    return state\n  }\n}\n\nfunction checkForDeadEnds(match, stream) {\n  for (let i = 0, work = [match]; i < work.length; i++) {\n    let state = work[i], dead = !state.validEnd, nodes = []\n    for (let j = 0; j < state.next.length; j += 2) {\n      let node = state.next[j], next = state.next[j + 1]\n      nodes.push(node.name)\n      if (dead && !(node.isText || node.hasRequiredAttrs())) dead = false\n      if (work.indexOf(next) == -1) work.push(next)\n    }\n    if (dead) stream.err(\"Only non-generatable nodes (\" + nodes.join(\", \") + \") in a required position\")\n  }\n}\n","import OrderedMap from \"orderedmap\"\n\nimport {Node, TextNode} from \"./node\"\nimport {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {ContentMatch} from \"./content\"\n\n// For node types where all attrs have a default value (or which don't\n// have any attributes), build up a single reusable default attribute\n// object, and use it for all nodes that don't specify specific\n// attributes.\nfunction defaultAttrs(attrs) {\n  let defaults = Object.create(null)\n  for (let attrName in attrs) {\n    let attr = attrs[attrName]\n    if (!attr.hasDefault) return null\n    defaults[attrName] = attr.default\n  }\n  return defaults\n}\n\nfunction computeAttrs(attrs, value) {\n  let built = Object.create(null)\n  for (let name in attrs) {\n    let given = value && value[name]\n    if (given === undefined) {\n      let attr = attrs[name]\n      if (attr.hasDefault) given = attr.default\n      else throw new RangeError(\"No value supplied for attribute \" + name)\n    }\n    built[name] = given\n  }\n  return built\n}\n\nfunction initAttrs(attrs) {\n  let result = Object.create(null)\n  if (attrs) for (let name in attrs) result[name] = new Attribute(attrs[name])\n  return result\n}\n\n// ::- Node types are objects allocated once per `Schema` and used to\n// [tag](#model.Node.type) `Node` instances. They contain information\n// about the node type, such as its name and what kind of node it\n// represents.\nexport class NodeType {\n  constructor(name, schema, spec) {\n    // :: string\n    // The name the node type has in this schema.\n    this.name = name\n\n    // :: Schema\n    // A link back to the `Schema` the node type belongs to.\n    this.schema = schema\n\n    // :: NodeSpec\n    // The spec that this type is based on\n    this.spec = spec\n\n    this.groups = spec.group ? spec.group.split(\" \") : []\n    this.attrs = initAttrs(spec.attrs)\n\n    this.defaultAttrs = defaultAttrs(this.attrs)\n\n    // :: ContentMatch\n    // The starting match of the node type's content expression.\n    this.contentMatch = null\n\n    // : ?[MarkType]\n    // The set of marks allowed in this node. `null` means all marks\n    // are allowed.\n    this.markSet = null\n\n    // :: bool\n    // True if this node type has inline content.\n    this.inlineContent = null\n\n    // :: bool\n    // True if this is a block type\n    this.isBlock = !(spec.inline || name == \"text\")\n\n    // :: bool\n    // True if this is the text node type.\n    this.isText = name == \"text\"\n  }\n\n  // :: bool\n  // True if this is an inline type.\n  get isInline() { return !this.isBlock }\n\n  // :: bool\n  // True if this is a textblock type, a block that contains inline\n  // content.\n  get isTextblock() { return this.isBlock && this.inlineContent }\n\n  // :: bool\n  // True for node types that allow no content.\n  get isLeaf() { return this.contentMatch == ContentMatch.empty }\n\n  // :: bool\n  // True when this node is an atom, i.e. when it does not have\n  // directly editable content.\n  get isAtom() { return this.isLeaf || this.spec.atom }\n\n  hasRequiredAttrs(ignore) {\n    for (let n in this.attrs)\n      if (this.attrs[n].isRequired && (!ignore || !(n in ignore))) return true\n    return false\n  }\n\n  compatibleContent(other) {\n    return this == other || this.contentMatch.compatible(other.contentMatch)\n  }\n\n  computeAttrs(attrs) {\n    if (!attrs && this.defaultAttrs) return this.defaultAttrs\n    else return computeAttrs(this.attrs, attrs)\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Create a `Node` of this type. The given attributes are\n  // checked and defaulted (you can pass `null` to use the type's\n  // defaults entirely, if no required attributes exist). `content`\n  // may be a `Fragment`, a node, an array of nodes, or\n  // `null`. Similarly `marks` may be `null` to default to the empty\n  // set of marks.\n  create(attrs, content, marks) {\n    if (this.isText) throw new Error(\"NodeType.create can't construct text nodes\")\n    return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Like [`create`](#model.NodeType.create), but check the given content\n  // against the node type's content restrictions, and throw an error\n  // if it doesn't match.\n  createChecked(attrs, content, marks) {\n    content = Fragment.from(content)\n    if (!this.validContent(content))\n      throw new RangeError(\"Invalid content for node \" + this.name)\n    return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → ?Node\n  // Like [`create`](#model.NodeType.create), but see if it is necessary to\n  // add nodes to the start or end of the given fragment to make it\n  // fit the node. If no fitting wrapping can be found, return null.\n  // Note that, due to the fact that required nodes can always be\n  // created, this will always succeed if you pass null or\n  // `Fragment.empty` as content.\n  createAndFill(attrs, content, marks) {\n    attrs = this.computeAttrs(attrs)\n    content = Fragment.from(content)\n    if (content.size) {\n      let before = this.contentMatch.fillBefore(content)\n      if (!before) return null\n      content = before.append(content)\n    }\n    let after = this.contentMatch.matchFragment(content).fillBefore(Fragment.empty, true)\n    if (!after) return null\n    return new Node(this, attrs, content.append(after), Mark.setFrom(marks))\n  }\n\n  // :: (Fragment) → bool\n  // Returns true if the given fragment is valid content for this node\n  // type with the given attributes.\n  validContent(content) {\n    let result = this.contentMatch.matchFragment(content)\n    if (!result || !result.validEnd) return false\n    for (let i = 0; i < content.childCount; i++)\n      if (!this.allowsMarks(content.child(i).marks)) return false\n    return true\n  }\n\n  // :: (MarkType) → bool\n  // Check whether the given mark type is allowed in this node.\n  allowsMarkType(markType) {\n    return this.markSet == null || this.markSet.indexOf(markType) > -1\n  }\n\n  // :: ([Mark]) → bool\n  // Test whether the given set of marks are allowed in this node.\n  allowsMarks(marks) {\n    if (this.markSet == null) return true\n    for (let i = 0; i < marks.length; i++) if (!this.allowsMarkType(marks[i].type)) return false\n    return true\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Removes the marks that are not allowed in this node from the given set.\n  allowedMarks(marks) {\n    if (this.markSet == null) return marks\n    let copy\n    for (let i = 0; i < marks.length; i++) {\n      if (!this.allowsMarkType(marks[i].type)) {\n        if (!copy) copy = marks.slice(0, i)\n      } else if (copy) {\n        copy.push(marks[i])\n      }\n    }\n    return !copy ? marks : copy.length ? copy : Mark.empty\n  }\n\n  static compile(nodes, schema) {\n    let result = Object.create(null)\n    nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec))\n\n    let topType = schema.spec.topNode || \"doc\"\n    if (!result[topType]) throw new RangeError(\"Schema is missing its top node type ('\" + topType + \"')\")\n    if (!result.text) throw new RangeError(\"Every schema needs a 'text' type\")\n    for (let _ in result.text.attrs) throw new RangeError(\"The text node type should not have attributes\")\n\n    return result\n  }\n}\n\n// Attribute descriptors\n\nclass Attribute {\n  constructor(options) {\n    this.hasDefault = Object.prototype.hasOwnProperty.call(options, \"default\")\n    this.default = options.default\n  }\n\n  get isRequired() {\n    return !this.hasDefault\n  }\n}\n\n// Marks\n\n// ::- Like nodes, marks (which are associated with nodes to signify\n// things like emphasis or being part of a link) are\n// [tagged](#model.Mark.type) with type objects, which are\n// instantiated once per `Schema`.\nexport class MarkType {\n  constructor(name, rank, schema, spec) {\n    // :: string\n    // The name of the mark type.\n    this.name = name\n\n    // :: Schema\n    // The schema that this mark type instance is part of.\n    this.schema = schema\n\n    // :: MarkSpec\n    // The spec on which the type is based.\n    this.spec = spec\n\n    this.attrs = initAttrs(spec.attrs)\n\n    this.rank = rank\n    this.excluded = null\n    let defaults = defaultAttrs(this.attrs)\n    this.instance = defaults && new Mark(this, defaults)\n  }\n\n  // :: (?Object) → Mark\n  // Create a mark of this type. `attrs` may be `null` or an object\n  // containing only some of the mark's attributes. The others, if\n  // they have defaults, will be added.\n  create(attrs) {\n    if (!attrs && this.instance) return this.instance\n    return new Mark(this, computeAttrs(this.attrs, attrs))\n  }\n\n  static compile(marks, schema) {\n    let result = Object.create(null), rank = 0\n    marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec))\n    return result\n  }\n\n  // :: ([Mark]) → [Mark]\n  // When there is a mark of this type in the given set, a new set\n  // without it is returned. Otherwise, the input set is returned.\n  removeFromSet(set) {\n    for (var i = 0; i < set.length; i++)\n      if (set[i].type == this)\n        return set.slice(0, i).concat(set.slice(i + 1))\n    return set\n  }\n\n  // :: ([Mark]) → ?Mark\n  // Tests whether there is a mark of this type in the given set.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (set[i].type == this) return set[i]\n  }\n\n  // :: (MarkType) → bool\n  // Queries whether a given mark type is\n  // [excluded](#model.MarkSpec.excludes) by this one.\n  excludes(other) {\n    return this.excluded.indexOf(other) > -1\n  }\n}\n\n// SchemaSpec:: interface\n// An object describing a schema, as passed to the [`Schema`](#model.Schema)\n// constructor.\n//\n//   nodes:: union<Object<NodeSpec>, OrderedMap<NodeSpec>>\n//   The node types in this schema. Maps names to\n//   [`NodeSpec`](#model.NodeSpec) objects that describe the node type\n//   associated with that name. Their order is significant—it\n//   determines which [parse rules](#model.NodeSpec.parseDOM) take\n//   precedence by default, and which nodes come first in a given\n//   [group](#model.NodeSpec.group).\n//\n//   marks:: ?union<Object<MarkSpec>, OrderedMap<MarkSpec>>\n//   The mark types that exist in this schema. The order in which they\n//   are provided determines the order in which [mark\n//   sets](#model.Mark.addToSet) are sorted and in which [parse\n//   rules](#model.MarkSpec.parseDOM) are tried.\n//\n//   topNode:: ?string\n//   The name of the default top-level node for the schema. Defaults\n//   to `\"doc\"`.\n\n// NodeSpec:: interface\n//\n//   content:: ?string\n//   The content expression for this node, as described in the [schema\n//   guide](/docs/guide/#schema.content_expressions). When not given,\n//   the node does not allow any content.\n//\n//   marks:: ?string\n//   The marks that are allowed inside of this node. May be a\n//   space-separated string referring to mark names or groups, `\"_\"`\n//   to explicitly allow all marks, or `\"\"` to disallow marks. When\n//   not given, nodes with inline content default to allowing all\n//   marks, other nodes default to not allowing marks.\n//\n//   group:: ?string\n//   The group or space-separated groups to which this node belongs,\n//   which can be referred to in the content expressions for the\n//   schema.\n//\n//   inline:: ?bool\n//   Should be set to true for inline nodes. (Implied for text nodes.)\n//\n//   atom:: ?bool\n//   Can be set to true to indicate that, though this isn't a [leaf\n//   node](#model.NodeType.isLeaf), it doesn't have directly editable\n//   content and should be treated as a single unit in the view.\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that nodes of this type get.\n//\n//   selectable:: ?bool\n//   Controls whether nodes of this type can be selected as a [node\n//   selection](#state.NodeSelection). Defaults to true for non-text\n//   nodes.\n//\n//   draggable:: ?bool\n//   Determines whether nodes of this type can be dragged without\n//   being selected. Defaults to false.\n//\n//   code:: ?bool\n//   Can be used to indicate that this node contains code, which\n//   causes some commands to behave differently.\n//\n//   defining:: ?bool\n//   Determines whether this node is considered an important parent\n//   node during replace operations (such as paste). Non-defining (the\n//   default) nodes get dropped when their entire content is replaced,\n//   whereas defining nodes persist and wrap the inserted content.\n//   Likewise, in _inserted_ content the defining parents of the\n//   content are preserved when possible. Typically,\n//   non-default-paragraph textblock types, and possibly list items,\n//   are marked as defining.\n//\n//   isolating:: ?bool\n//   When enabled (default is false), the sides of nodes of this type\n//   count as boundaries that regular editing operations, like\n//   backspacing or lifting, won't cross. An example of a node that\n//   should probably have this enabled is a table cell.\n//\n//   toDOM:: ?(node: Node) → DOMOutputSpec\n//   Defines the default way a node of this type should be serialized\n//   to DOM/HTML (as used by\n//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).\n//   Should return a DOM node or an [array\n//   structure](#model.DOMOutputSpec) that describes one, with an\n//   optional number zero (“hole”) in it to indicate where the node's\n//   content should be inserted.\n//\n//   For text nodes, the default is to create a text DOM node. Though\n//   it is possible to create a serializer where text is rendered\n//   differently, this is not supported inside the editor, so you\n//   shouldn't override that in your text node spec.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this node, which can be\n//   used by [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) to\n//   automatically derive a parser. The `node` field in the rules is\n//   implied (the name of this node will be filled in automatically).\n//   If you supply your own parser, you do not need to also specify\n//   parsing rules in your schema.\n//\n//   toDebugString:: ?(node: Node) -> string\n//   Defines the default way a node of this type should be serialized\n//   to a string representation for debugging (e.g. in error messages).\n\n// MarkSpec:: interface\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that marks of this type get.\n//\n//   inclusive:: ?bool\n//   Whether this mark should be active when the cursor is positioned\n//   at its end (or at its start when that is also the start of the\n//   parent node). Defaults to true.\n//\n//   excludes:: ?string\n//   Determines which other marks this mark can coexist with. Should\n//   be a space-separated strings naming other marks or groups of marks.\n//   When a mark is [added](#model.Mark.addToSet) to a set, all marks\n//   that it excludes are removed in the process. If the set contains\n//   any mark that excludes the new mark but is not, itself, excluded\n//   by the new mark, the mark can not be added an the set. You can\n//   use the value `\"_\"` to indicate that the mark excludes all\n//   marks in the schema.\n//\n//   Defaults to only being exclusive with marks of the same type. You\n//   can set it to an empty string (or any string not containing the\n//   mark's own name) to allow multiple marks of a given type to\n//   coexist (as long as they have different attributes).\n//\n//   group:: ?string\n//   The group or space-separated groups to which this mark belongs.\n//\n//   toDOM:: ?(mark: Mark, inline: bool) → DOMOutputSpec\n//   Defines the default way marks of this type should be serialized\n//   to DOM/HTML. When the resulting spec contains a hole, that is\n//   where the marked content is placed. Otherwise, it is appended to\n//   the top node.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this mark (see the\n//   corresponding [node spec field](#model.NodeSpec.parseDOM)). The\n//   `mark` field in the rules is implied.\n\n// AttributeSpec:: interface\n//\n// Used to [define](#model.NodeSpec.attrs) attributes on nodes or\n// marks.\n//\n//   default:: ?any\n//   The default value for this attribute, to use when no explicit\n//   value is provided. Attributes that have no default must be\n//   provided whenever a node or mark of a type that has them is\n//   created.\n\n// ::- A document schema. Holds [node](#model.NodeType) and [mark\n// type](#model.MarkType) objects for the nodes and marks that may\n// occur in conforming documents, and provides functionality for\n// creating and deserializing such documents.\nexport class Schema {\n  // :: (SchemaSpec)\n  // Construct a schema from a schema [specification](#model.SchemaSpec).\n  constructor(spec) {\n    // :: SchemaSpec\n    // The [spec](#model.SchemaSpec) on which the schema is based,\n    // with the added guarantee that its `nodes` and `marks`\n    // properties are\n    // [`OrderedMap`](https://github.com/marijnh/orderedmap) instances\n    // (not raw objects).\n    this.spec = {}\n    for (let prop in spec) this.spec[prop] = spec[prop]\n    this.spec.nodes = OrderedMap.from(spec.nodes)\n    this.spec.marks = OrderedMap.from(spec.marks)\n\n    // :: Object<NodeType>\n    // An object mapping the schema's node names to node type objects.\n    this.nodes = NodeType.compile(this.spec.nodes, this)\n\n    // :: Object<MarkType>\n    // A map from mark names to mark type objects.\n    this.marks = MarkType.compile(this.spec.marks, this)\n\n    let contentExprCache = Object.create(null)\n    for (let prop in this.nodes) {\n      if (prop in this.marks)\n        throw new RangeError(prop + \" can not be both a node and a mark\")\n      let type = this.nodes[prop], contentExpr = type.spec.content || \"\", markExpr = type.spec.marks\n      type.contentMatch = contentExprCache[contentExpr] ||\n        (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes))\n      type.inlineContent = type.contentMatch.inlineContent\n      type.markSet = markExpr == \"_\" ? null :\n        markExpr ? gatherMarks(this, markExpr.split(\" \")) :\n        markExpr == \"\" || !type.inlineContent ? [] : null\n    }\n    for (let prop in this.marks) {\n      let type = this.marks[prop], excl = type.spec.excludes\n      type.excluded = excl == null ? [type] : excl == \"\" ? [] : gatherMarks(this, excl.split(\" \"))\n    }\n\n    this.nodeFromJSON = this.nodeFromJSON.bind(this)\n    this.markFromJSON = this.markFromJSON.bind(this)\n\n    // :: NodeType\n    // The type of the [default top node](#model.SchemaSpec.topNode)\n    // for this schema.\n    this.topNodeType = this.nodes[this.spec.topNode || \"doc\"]\n\n    // :: Object\n    // An object for storing whatever values modules may want to\n    // compute and cache per schema. (If you want to store something\n    // in it, try to use property names unlikely to clash.)\n    this.cached = Object.create(null)\n    this.cached.wrappings = Object.create(null)\n  }\n\n  // :: (union<string, NodeType>, ?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Create a node in this schema. The `type` may be a string or a\n  // `NodeType` instance. Attributes will be extended\n  // with defaults, `content` may be a `Fragment`,\n  // `null`, a `Node`, or an array of nodes.\n  node(type, attrs, content, marks) {\n    if (typeof type == \"string\")\n      type = this.nodeType(type)\n    else if (!(type instanceof NodeType))\n      throw new RangeError(\"Invalid node type: \" + type)\n    else if (type.schema != this)\n      throw new RangeError(\"Node type from different schema used (\" + type.name + \")\")\n\n    return type.createChecked(attrs, content, marks)\n  }\n\n  // :: (string, ?[Mark]) → Node\n  // Create a text node in the schema. Empty text nodes are not\n  // allowed.\n  text(text, marks) {\n    let type = this.nodes.text\n    return new TextNode(type, type.defaultAttrs, text, Mark.setFrom(marks))\n  }\n\n  // :: (union<string, MarkType>, ?Object) → Mark\n  // Create a mark with the given type and attributes.\n  mark(type, attrs) {\n    if (typeof type == \"string\") type = this.marks[type]\n    return type.create(attrs)\n  }\n\n  // :: (Object) → Node\n  // Deserialize a node from its JSON representation. This method is\n  // bound.\n  nodeFromJSON(json) {\n    return Node.fromJSON(this, json)\n  }\n\n  // :: (Object) → Mark\n  // Deserialize a mark from its JSON representation. This method is\n  // bound.\n  markFromJSON(json) {\n    return Mark.fromJSON(this, json)\n  }\n\n  nodeType(name) {\n    let found = this.nodes[name]\n    if (!found) throw new RangeError(\"Unknown node type: \" + name)\n    return found\n  }\n}\n\nfunction gatherMarks(schema, marks) {\n  let found = []\n  for (let i = 0; i < marks.length; i++) {\n    let name = marks[i], mark = schema.marks[name], ok = mark\n    if (mark) {\n      found.push(mark)\n    } else {\n      for (let prop in schema.marks) {\n        let mark = schema.marks[prop]\n        if (name == \"_\" || (mark.spec.group && mark.spec.group.split(\" \").indexOf(name) > -1))\n          found.push(ok = mark)\n      }\n    }\n    if (!ok) throw new SyntaxError(\"Unknown mark type: '\" + marks[i] + \"'\")\n  }\n  return found\n}\n","import {Fragment} from \"./fragment\"\nimport {Slice} from \"./replace\"\nimport {Mark} from \"./mark\"\n\n// ParseOptions:: interface\n// These are the options recognized by the\n// [`parse`](#model.DOMParser.parse) and\n// [`parseSlice`](#model.DOMParser.parseSlice) methods.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   By default, whitespace is collapsed as per HTML's rules. Pass\n//   `true` to preserve whitespace, but normalize newlines to\n//   spaces, and `\"full\"` to preserve whitespace entirely.\n//\n//   findPositions:: ?[{node: dom.Node, offset: number}]\n//   When given, the parser will, beside parsing the content,\n//   record the document positions of the given DOM positions. It\n//   will do so by writing to the objects, adding a `pos` property\n//   that holds the document position. DOM positions that are not\n//   in the parsed content will not be written to.\n//\n//   from:: ?number\n//   The child node index to start parsing from.\n//\n//   to:: ?number\n//   The child node index to stop parsing at.\n//\n//   topNode:: ?Node\n//   By default, the content is parsed into the schema's default\n//   [top node type](#model.Schema.topNodeType). You can pass this\n//   option to use the type and attributes from a different node\n//   as the top container.\n//\n//   topMatch:: ?ContentMatch\n//   Provide the starting content match that content parsed into the\n//   top node is matched against.\n//\n//   context:: ?ResolvedPos\n//   A set of additional nodes to count as\n//   [context](#model.ParseRule.context) when parsing, above the\n//   given [top node](#model.ParseOptions.topNode).\n\n// ParseRule:: interface\n// A value that describes how to parse a given DOM node or inline\n// style as a ProseMirror node or mark.\n//\n//   tag:: ?string\n//   A CSS selector describing the kind of DOM elements to match. A\n//   single rule should have _either_ a `tag` or a `style` property.\n//\n//   namespace:: ?string\n//   The namespace to match. This should be used with `tag`.\n//   Nodes are only matched when the namespace matches or this property\n//   is null.\n//\n//   style:: ?string\n//   A CSS property name to match. When given, this rule matches\n//   inline styles that list that property. May also have the form\n//   `\"property=value\"`, in which case the rule only matches if the\n//   propery's value exactly matches the given value. (For more\n//   complicated filters, use [`getAttrs`](#model.ParseRule.getAttrs)\n//   and return undefined to indicate that the match failed.)\n//\n//   priority:: ?number\n//   Can be used to change the order in which the parse rules in a\n//   schema are tried. Those with higher priority come first. Rules\n//   without a priority are counted as having priority 50. This\n//   property is only meaningful in a schema—when directly\n//   constructing a parser, the order of the rule array is used.\n//\n//   context:: ?string\n//   When given, restricts this rule to only match when the current\n//   context—the parent nodes into which the content is being\n//   parsed—matches this expression. Should contain one or more node\n//   names or node group names followed by single or double slashes.\n//   For example `\"paragraph/\"` means the rule only matches when the\n//   parent node is a paragraph, `\"blockquote/paragraph/\"` restricts\n//   it to be in a paragraph that is inside a blockquote, and\n//   `\"section//\"` matches any position inside a section—a double\n//   slash matches any sequence of ancestor nodes. To allow multiple\n//   different contexts, they can be separated by a pipe (`|`)\n//   character, as in `\"blockquote/|list_item/\"`.\n//\n//   node:: ?string\n//   The name of the node type to create when this rule matches. Only\n//   valid for rules with a `tag` property, not for style rules. Each\n//   rule should have one of a `node`, `mark`, or `ignore` property\n//   (except when it appears in a [node](#model.NodeSpec.parseDOM) or\n//   [mark spec](#model.MarkSpec.parseDOM), in which case the `node`\n//   or `mark` property will be derived from its position).\n//\n//   mark:: ?string\n//   The name of the mark type to wrap the matched content in.\n//\n//   ignore:: ?bool\n//   When true, ignore content that matches this rule.\n//\n//   skip:: ?bool\n//   When true, ignore the node that matches this rule, but do parse\n//   its content.\n//\n//   attrs:: ?Object\n//   Attributes for the node or mark created by this rule. When\n//   `getAttrs` is provided, it takes precedence.\n//\n//   getAttrs:: ?(union<dom.Node, string>) → ?union<Object, false>\n//   A function used to compute the attributes for the node or mark\n//   created by this rule. Can also be used to describe further\n//   conditions the DOM element or style must match. When it returns\n//   `false`, the rule won't match. When it returns null or undefined,\n//   that is interpreted as an empty/default set of attributes.\n//\n//   Called with a DOM Element for `tag` rules, and with a string (the\n//   style's value) for `style` rules.\n//\n//   contentElement:: ?union<string, (dom.Node) → dom.Node>\n//   For `tag` rules that produce non-leaf nodes or marks, by default\n//   the content of the DOM element is parsed as content of the mark\n//   or node. If the child nodes are in a descendent node, this may be\n//   a CSS selector string that the parser must use to find the actual\n//   content element, or a function that returns the actual content\n//   element to the parser.\n//\n//   getContent:: ?(dom.Node, schema: Schema) → Fragment\n//   Can be used to override the content of a matched node. When\n//   present, instead of parsing the node's child nodes, the result of\n//   this function is used.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   Controls whether whitespace should be preserved when parsing the\n//   content inside the matched element. `false` means whitespace may\n//   be collapsed, `true` means that whitespace should be preserved\n//   but newlines normalized to spaces, and `\"full\"` means that\n//   newlines should also be preserved.\n\n// ::- A DOM parser represents a strategy for parsing DOM content into\n// a ProseMirror document conforming to a given schema. Its behavior\n// is defined by an array of [rules](#model.ParseRule).\nexport class DOMParser {\n  // :: (Schema, [ParseRule])\n  // Create a parser that targets the given schema, using the given\n  // parsing rules.\n  constructor(schema, rules) {\n    // :: Schema\n    // The schema into which the parser parses.\n    this.schema = schema\n    // :: [ParseRule]\n    // The set of [parse rules](#model.ParseRule) that the parser\n    // uses, in order of precedence.\n    this.rules = rules\n    this.tags = []\n    this.styles = []\n\n    rules.forEach(rule => {\n      if (rule.tag) this.tags.push(rule)\n      else if (rule.style) this.styles.push(rule)\n    })\n  }\n\n  // :: (dom.Node, ?ParseOptions) → Node\n  // Parse a document from the content of a DOM node.\n  parse(dom, options = {}) {\n    let context = new ParseContext(this, options, false)\n    context.addAll(dom, null, options.from, options.to)\n    return context.finish()\n  }\n\n  // :: (dom.Node, ?ParseOptions) → Slice\n  // Parses the content of the given DOM node, like\n  // [`parse`](#model.DOMParser.parse), and takes the same set of\n  // options. But unlike that method, which produces a whole node,\n  // this one returns a slice that is open at the sides, meaning that\n  // the schema constraints aren't applied to the start of nodes to\n  // the left of the input and the end of nodes at the end.\n  parseSlice(dom, options = {}) {\n    let context = new ParseContext(this, options, true)\n    context.addAll(dom, null, options.from, options.to)\n    return Slice.maxOpen(context.finish())\n  }\n\n  matchTag(dom, context) {\n    for (let i = 0; i < this.tags.length; i++) {\n      let rule = this.tags[i]\n      if (matches(dom, rule.tag) &&\n          (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&\n          (!rule.context || context.matchesContext(rule.context))) {\n        if (rule.getAttrs) {\n          let result = rule.getAttrs(dom)\n          if (result === false) continue\n          rule.attrs = result\n        }\n        return rule\n      }\n    }\n  }\n\n  matchStyle(prop, value, context) {\n    for (let i = 0; i < this.styles.length; i++) {\n      let rule = this.styles[i]\n      if (rule.style.indexOf(prop) != 0 ||\n          rule.context && !context.matchesContext(rule.context) ||\n          // Test that the style string either precisely matches the prop,\n          // or has an '=' sign after the prop, followed by the given\n          // value.\n          rule.style.length > prop.length &&\n          (rule.style.charCodeAt(prop.length) != 61 || rule.style.slice(prop.length + 1) != value))\n        continue\n      if (rule.getAttrs) {\n        let result = rule.getAttrs(value)\n        if (result === false) continue\n        rule.attrs = result\n      }\n      return rule\n    }\n  }\n\n  // : (Schema) → [ParseRule]\n  static schemaRules(schema) {\n    let result = []\n    function insert(rule) {\n      let priority = rule.priority == null ? 50 : rule.priority, i = 0\n      for (; i < result.length; i++) {\n        let next = result[i], nextPriority = next.priority == null ? 50 : next.priority\n        if (nextPriority < priority) break\n      }\n      result.splice(i, 0, rule)\n    }\n\n    for (let name in schema.marks) {\n      let rules = schema.marks[name].spec.parseDOM\n      if (rules) rules.forEach(rule => {\n        insert(rule = copy(rule))\n        rule.mark = name\n      })\n    }\n    for (let name in schema.nodes) {\n      let rules = schema.nodes[name].spec.parseDOM\n      if (rules) rules.forEach(rule => {\n        insert(rule = copy(rule))\n        rule.node = name\n      })\n    }\n    return result\n  }\n\n  // :: (Schema) → DOMParser\n  // Construct a DOM parser using the parsing rules listed in a\n  // schema's [node specs](#model.NodeSpec.parseDOM), reordered by\n  // [priority](#model.ParseRule.priority).\n  static fromSchema(schema) {\n    return schema.cached.domParser ||\n      (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)))\n  }\n}\n\n// : Object<bool> The block-level tags in HTML5\nconst blockTags = {\n  address: true, article: true, aside: true, blockquote: true, canvas: true,\n  dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,\n  footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,\n  h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,\n  output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true\n}\n\n// : Object<bool> The tags that we normally ignore.\nconst ignoreTags = {\n  head: true, noscript: true, object: true, script: true, style: true, title: true\n}\n\n// : Object<bool> List tags.\nconst listTags = {ol: true, ul: true}\n\n// Using a bitfield for node context options\nconst OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4\n\nfunction wsOptionsFor(preserveWhitespace) {\n  return (preserveWhitespace ? OPT_PRESERVE_WS : 0) | (preserveWhitespace === \"full\" ? OPT_PRESERVE_WS_FULL : 0)\n}\n\nclass NodeContext {\n  constructor(type, attrs, marks, solid, match, options) {\n    this.type = type\n    this.attrs = attrs\n    this.solid = solid\n    this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch)\n    this.options = options\n    this.content = []\n    this.marks = marks\n    this.activeMarks = Mark.none\n  }\n\n  findWrapping(node) {\n    if (!this.match) {\n      if (!this.type) return []\n      let fill = this.type.contentMatch.fillBefore(Fragment.from(node))\n      if (fill) {\n        this.match = this.type.contentMatch.matchFragment(fill)\n      } else {\n        let start = this.type.contentMatch, wrap\n        if (wrap = start.findWrapping(node.type)) {\n          this.match = start\n          return wrap\n        } else {\n          return null\n        }\n      }\n    }\n    return this.match.findWrapping(node.type)\n  }\n\n  finish(openEnd) {\n    if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace\n      let last = this.content[this.content.length - 1], m\n      if (last && last.isText && (m = /\\s+$/.exec(last.text))) {\n        if (last.text.length == m[0].length) this.content.pop()\n        else this.content[this.content.length - 1] = last.withText(last.text.slice(0, last.text.length - m[0].length))\n      }\n    }\n    let content = Fragment.from(this.content)\n    if (!openEnd && this.match)\n      content = content.append(this.match.fillBefore(Fragment.empty, true))\n    return this.type ? this.type.create(this.attrs, content, this.marks) : content\n  }\n}\n\nclass ParseContext {\n  // : (DOMParser, Object)\n  constructor(parser, options, open) {\n    // : DOMParser The parser we are using.\n    this.parser = parser\n    // : Object The options passed to this parse.\n    this.options = options\n    this.isOpen = open\n    this.pendingMarks = []\n    let topNode = options.topNode, topContext\n    let topOptions = wsOptionsFor(options.preserveWhitespace) | (open ? OPT_OPEN_LEFT : 0)\n    if (topNode)\n      topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, true,\n                                   options.topMatch || topNode.type.contentMatch, topOptions)\n    else if (open)\n      topContext = new NodeContext(null, null, Mark.none, true, null, topOptions)\n    else\n      topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, true, null, topOptions)\n    this.nodes = [topContext]\n    // : [Mark] The current set of marks\n    this.open = 0\n    this.find = options.findPositions\n    this.needsBlock = false\n  }\n\n  get top() {\n    return this.nodes[this.open]\n  }\n\n  // : (dom.Node)\n  // Add a DOM node to the content. Text is inserted as text node,\n  // otherwise, the node is passed to `addElement` or, if it has a\n  // `style` attribute, `addElementWithStyles`.\n  addDOM(dom) {\n    if (dom.nodeType == 3) {\n      this.addTextNode(dom)\n    } else if (dom.nodeType == 1) {\n      let style = dom.getAttribute(\"style\")\n      let marks = style ? this.readStyles(parseStyles(style)) : null\n      if (marks != null) for (let i = 0; i < marks.length; i++) this.addPendingMark(marks[i])\n      this.addElement(dom)\n      if (marks != null) for (let i = 0; i < marks.length; i++) this.removePendingMark(marks[i])\n    }\n  }\n\n  addTextNode(dom) {\n    let value = dom.nodeValue\n    let top = this.top\n    if ((top.type ? top.type.inlineContent : top.content.length && top.content[0].isInline) || /\\S/.test(value)) {\n      if (!(top.options & OPT_PRESERVE_WS)) {\n        value = value.replace(/\\s+/g, \" \")\n        // If this starts with whitespace, and there is no node before it, or\n        // a hard break, or a text node that ends with whitespace, strip the\n        // leading space.\n        if (/^\\s/.test(value) && this.open == this.nodes.length - 1) {\n          let nodeBefore = top.content[top.content.length - 1]\n          let domNodeBefore = dom.previousSibling\n          if (!nodeBefore ||\n              (domNodeBefore && domNodeBefore.nodeName == 'BR') ||\n              (nodeBefore.isText && /\\s$/.test(nodeBefore.text)))\n            value = value.slice(1)\n        }\n      } else if (!(top.options & OPT_PRESERVE_WS_FULL)) {\n        value = value.replace(/\\r?\\n|\\r/g, \" \")\n      }\n      if (value) this.insertNode(this.parser.schema.text(value))\n      this.findInText(dom)\n    } else {\n      this.findInside(dom)\n    }\n  }\n\n  // : (dom.Element)\n  // Try to find a handler for the given tag and use that to parse. If\n  // none is found, the element's content nodes are added directly.\n  addElement(dom) {\n    let name = dom.nodeName.toLowerCase()\n    if (listTags.hasOwnProperty(name)) normalizeList(dom)\n    let rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) || this.parser.matchTag(dom, this)\n    if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {\n      this.findInside(dom)\n    } else if (!rule || rule.skip) {\n      if (rule && rule.skip.nodeType) dom = rule.skip\n      let sync, top = this.top, oldNeedsBlock = this.needsBlock\n      if (blockTags.hasOwnProperty(name)) {\n        sync = true\n        if (!top.type) this.needsBlock = true\n      }\n      this.addAll(dom)\n      if (sync) this.sync(top)\n      this.needsBlock = oldNeedsBlock\n    } else {\n      this.addElementByRule(dom, rule)\n    }\n  }\n\n  // Run any style parser associated with the node's styles. Either\n  // return an array of marks, or null to indicate some of the styles\n  // had a rule with `ignore` set.\n  readStyles(styles) {\n    let marks = Mark.none\n    for (let i = 0; i < styles.length; i += 2) {\n      let rule = this.parser.matchStyle(styles[i], styles[i + 1], this)\n      if (!rule) continue\n      if (rule.ignore) return null\n      marks = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(marks)\n    }\n    return marks\n  }\n\n  // : (dom.Element, ParseRule) → bool\n  // Look up a handler for the given node. If none are found, return\n  // false. Otherwise, apply it, use its return value to drive the way\n  // the node's content is wrapped, and return true.\n  addElementByRule(dom, rule) {\n    let sync, nodeType, markType, mark\n    if (rule.node) {\n      nodeType = this.parser.schema.nodes[rule.node]\n      if (nodeType.isLeaf) this.insertNode(nodeType.create(rule.attrs))\n      else sync = this.enter(nodeType, rule.attrs, rule.preserveWhitespace)\n    } else {\n      markType = this.parser.schema.marks[rule.mark]\n      mark = markType.create(rule.attrs)\n      this.addPendingMark(mark)\n    }\n    let startIn = this.top\n\n    if (nodeType && nodeType.isLeaf) {\n      this.findInside(dom)\n    } else if (rule.getContent) {\n      this.findInside(dom)\n      rule.getContent(dom, this.parser.schema).forEach(node => this.insertNode(node))\n    } else {\n      let contentDOM = rule.contentElement\n      if (typeof contentDOM == \"string\") contentDOM = dom.querySelector(contentDOM)\n      else if (typeof contentDOM == \"function\") contentDOM = contentDOM(dom)\n      if (!contentDOM) contentDOM = dom\n      this.findAround(dom, contentDOM, true)\n      this.addAll(contentDOM, sync)\n    }\n    if (sync) { this.sync(startIn); this.open-- }\n    if (mark) this.removePendingMark(mark)\n    return true\n  }\n\n  // : (dom.Node, ?NodeBuilder, ?number, ?number)\n  // Add all child nodes between `startIndex` and `endIndex` (or the\n  // whole node, if not given). If `sync` is passed, use it to\n  // synchronize after every block element.\n  addAll(parent, sync, startIndex, endIndex) {\n    let index = startIndex || 0\n    for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild,\n             end = endIndex == null ? null : parent.childNodes[endIndex];\n         dom != end; dom = dom.nextSibling, ++index) {\n      this.findAtPoint(parent, index)\n      this.addDOM(dom)\n      if (sync && blockTags.hasOwnProperty(dom.nodeName.toLowerCase()))\n        this.sync(sync)\n    }\n    this.findAtPoint(parent, index)\n  }\n\n  // Try to find a way to fit the given node type into the current\n  // context. May add intermediate wrappers and/or leave non-solid\n  // nodes that we're in.\n  findPlace(node) {\n    let route, sync\n    for (let depth = this.open; depth >= 0; depth--) {\n      let cx = this.nodes[depth]\n      let found = cx.findWrapping(node)\n      if (found && (!route || route.length > found.length)) {\n        route = found\n        sync = cx\n        if (!found.length) break\n      }\n      if (cx.solid) break\n    }\n    if (!route) return false\n    this.sync(sync)\n    for (let i = 0; i < route.length; i++)\n      this.enterInner(route[i], null, false)\n    return true\n  }\n\n  // : (Node) → ?Node\n  // Try to insert the given node, adjusting the context when needed.\n  insertNode(node) {\n    if (node.isInline && this.needsBlock && !this.top.type) {\n      let block = this.textblockFromContext()\n      if (block) this.enterInner(block)\n    }\n    if (this.findPlace(node)) {\n      this.closeExtra()\n      let top = this.top\n      this.applyPendingMarks(top)\n      if (top.match) top.match = top.match.matchType(node.type)\n      let marks = top.activeMarks\n      for (let i = 0; i < node.marks.length; i++)\n        if (!top.type || top.type.allowsMarkType(node.marks[i].type))\n          marks = node.marks[i].addToSet(marks)\n      top.content.push(node.mark(marks))\n    }\n  }\n\n  applyPendingMarks(top) {\n    for (let i = 0; i < this.pendingMarks.length; i++) {\n      let mark = this.pendingMarks[i]\n      if ((!top.type || top.type.allowsMarkType(mark.type)) && !mark.type.isInSet(top.activeMarks)) {\n        top.activeMarks = mark.addToSet(top.activeMarks)\n        this.pendingMarks.splice(i--, 1)\n      }\n    }\n  }\n\n  // : (NodeType, ?Object) → bool\n  // Try to start a node of the given type, adjusting the context when\n  // necessary.\n  enter(type, attrs, preserveWS) {\n    let ok = this.findPlace(type.create(attrs))\n    if (ok) {\n      this.applyPendingMarks(this.top)\n      this.enterInner(type, attrs, true, preserveWS)\n    }\n    return ok\n  }\n\n  // Open a node of the given type\n  enterInner(type, attrs, solid, preserveWS) {\n    this.closeExtra()\n    let top = this.top\n    top.match = top.match && top.match.matchType(type, attrs)\n    let options = preserveWS == null ? top.options & ~OPT_OPEN_LEFT : wsOptionsFor(preserveWS)\n    if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0) options |= OPT_OPEN_LEFT\n    this.nodes.push(new NodeContext(type, attrs, top.activeMarks, solid, null, options))\n    this.open++\n  }\n\n  // Make sure all nodes above this.open are finished and added to\n  // their parents\n  closeExtra(openEnd) {\n    let i = this.nodes.length - 1\n    if (i > this.open) {\n      for (; i > this.open; i--) this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd))\n      this.nodes.length = this.open + 1\n    }\n  }\n\n  finish() {\n    this.open = 0\n    this.closeExtra(this.isOpen)\n    return this.nodes[0].finish(this.isOpen || this.options.topOpen)\n  }\n\n  sync(to) {\n    for (let i = this.open; i >= 0; i--) if (this.nodes[i] == to) {\n      this.open = i\n      return\n    }\n  }\n\n  addPendingMark(mark) {\n    this.pendingMarks.push(mark)\n  }\n\n  removePendingMark(mark) {\n    let found = this.pendingMarks.lastIndexOf(mark)\n    if (found > -1) {\n      this.pendingMarks.splice(found, 1)\n    } else {\n      let top = this.top\n      top.activeMarks = mark.removeFromSet(top.activeMarks)\n    }\n  }\n\n  get currentPos() {\n    this.closeExtra()\n    let pos = 0\n    for (let i = this.open; i >= 0; i--) {\n      let content = this.nodes[i].content\n      for (let j = content.length - 1; j >= 0; j--)\n        pos += content[j].nodeSize\n      if (i) pos++\n    }\n    return pos\n  }\n\n  findAtPoint(parent, offset) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].node == parent && this.find[i].offset == offset)\n        this.find[i].pos = this.currentPos\n    }\n  }\n\n  findInside(parent) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))\n        this.find[i].pos = this.currentPos\n    }\n  }\n\n  findAround(parent, content, before) {\n    if (parent != content && this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {\n        let pos = content.compareDocumentPosition(this.find[i].node)\n        if (pos & (before ? 2 : 4))\n          this.find[i].pos = this.currentPos\n      }\n    }\n  }\n\n  findInText(textNode) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].node == textNode)\n        this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset)\n    }\n  }\n\n  // : (string) → bool\n  // Determines whether the given [context\n  // string](#ParseRule.context) matches this context.\n  matchesContext(context) {\n    if (context.indexOf(\"|\") > -1)\n      return context.split(/\\s*\\|\\s*/).some(this.matchesContext, this)\n\n    let parts = context.split(\"/\")\n    let option = this.options.context\n    let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type)\n    let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1)\n    let match = (i, depth) => {\n      for (; i >= 0; i--) {\n        let part = parts[i]\n        if (part == \"\") {\n          if (i == parts.length - 1 || i == 0) continue\n          for (; depth >= minDepth; depth--)\n            if (match(i - 1, depth)) return true\n          return false\n        } else {\n          let next = depth > 0 || (depth == 0 && useRoot) ? this.nodes[depth].type\n              : option && depth >= minDepth ? option.node(depth - minDepth).type\n              : null\n          if (!next || (next.name != part && next.groups.indexOf(part) == -1))\n            return false\n          depth--\n        }\n      }\n      return true\n    }\n    return match(parts.length - 1, this.open)\n  }\n\n  textblockFromContext() {\n    let $context = this.options.context\n    if ($context) for (let d = $context.depth; d >= 0; d--) {\n      let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType\n      if (deflt && deflt.isTextblock && deflt.defaultAttrs) return deflt\n    }\n    for (let name in this.parser.schema.nodes) {\n      let type = this.parser.schema.nodes[name]\n      if (type.isTextblock && type.defaultAttrs) return type\n    }\n  }\n}\n\n// Kludge to work around directly nested list nodes produced by some\n// tools and allowed by browsers to mean that the nested list is\n// actually part of the list item above it.\nfunction normalizeList(dom) {\n  for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {\n    let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null\n    if (name && listTags.hasOwnProperty(name) && prevItem) {\n      prevItem.appendChild(child)\n      child = prevItem\n    } else if (name == \"li\") {\n      prevItem = child\n    } else if (name) {\n      prevItem = null\n    }\n  }\n}\n\n// Apply a CSS selector.\nfunction matches(dom, selector) {\n  return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector)\n}\n\n// : (string) → [string]\n// Tokenize a style attribute into property/value pairs.\nfunction parseStyles(style) {\n  let re = /\\s*([\\w-]+)\\s*:\\s*([^;]+)/g, m, result = []\n  while (m = re.exec(style)) result.push(m[1], m[2].trim())\n  return result\n}\n\nfunction copy(obj) {\n  let copy = {}\n  for (let prop in obj) copy[prop] = obj[prop]\n  return copy\n}\n","// DOMOutputSpec:: interface\n// A description of a DOM structure. Can be either a string, which is\n// interpreted as a text node, a DOM node, which is interpreted as\n// itself, or an array.\n//\n// An array describes a DOM element. The first value in the array\n// should be a string—the name of the DOM element. If the second\n// element is plain object, it is interpreted as a set of attributes\n// for the element. Any elements after that (including the 2nd if it's\n// not an attribute object) are interpreted as children of the DOM\n// elements, and must either be valid `DOMOutputSpec` values, or the\n// number zero.\n//\n// The number zero (pronounced “hole”) is used to indicate the place\n// where a node's child nodes should be inserted. It it occurs in an\n// output spec, it should be the only child element in its parent\n// node.\n\n// ::- A DOM serializer knows how to convert ProseMirror nodes and\n// marks of various types to DOM nodes.\nexport class DOMSerializer {\n  // :: (Object<(node: Node) → DOMOutputSpec>, Object<?(mark: Mark, inline: bool) → DOMOutputSpec>)\n  // Create a serializer. `nodes` should map node names to functions\n  // that take a node and return a description of the corresponding\n  // DOM. `marks` does the same for mark names, but also gets an\n  // argument that tells it whether the mark's content is block or\n  // inline content (for typical use, it'll always be inline). A mark\n  // serializer may be `null` to indicate that marks of that type\n  // should not be serialized.\n  constructor(nodes, marks) {\n    // :: Object<(node: Node) → DOMOutputSpec>\n    // The node serialization functions.\n    this.nodes = nodes || {}\n    // :: Object<?(mark: Mark, inline: bool) → DOMOutputSpec>\n    // The mark serialization functions.\n    this.marks = marks || {}\n  }\n\n  // :: (Fragment, ?Object) → dom.DocumentFragment\n  // Serialize the content of this fragment to a DOM fragment. When\n  // not in the browser, the `document` option, containing a DOM\n  // document, should be passed so that the serializer can create\n  // nodes.\n  serializeFragment(fragment, options = {}, target) {\n    if (!target) target = doc(options).createDocumentFragment()\n\n    let top = target, active = null\n    fragment.forEach(node => {\n      if (active || node.marks.length) {\n        if (!active) active = []\n        let keep = 0, rendered = 0\n        while (keep < active.length && rendered < node.marks.length) {\n          let next = node.marks[rendered]\n          if (!this.marks[next.type.name]) { rendered++; continue }\n          if (!next.eq(active[keep])) break\n          keep += 2; rendered++\n        }\n        while (keep < active.length) {\n          top = active.pop()\n          active.pop()\n        }\n        while (rendered < node.marks.length) {\n          let add = node.marks[rendered++]\n          let markDOM = this.serializeMark(add, node.isInline, options)\n          if (markDOM) {\n            active.push(add, top)\n            top.appendChild(markDOM.dom)\n            top = markDOM.contentDOM || markDOM.dom\n          }\n        }\n      }\n      top.appendChild(this.serializeNode(node, options))\n    })\n\n    return target\n  }\n\n  // :: (Node, ?Object) → dom.Node\n  // Serialize this node to a DOM node. This can be useful when you\n  // need to serialize a part of a document, as opposed to the whole\n  // document. To serialize a whole document, use\n  // [`serializeFragment`](#model.DOMSerializer.serializeFragment) on\n  // its [content](#model.Node.content).\n  serializeNode(node, options = {}) {\n    let {dom, contentDOM} =\n        DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node))\n    if (contentDOM) {\n      if (node.isLeaf)\n        throw new RangeError(\"Content hole not allowed in a leaf node spec\")\n      if (options.onContent)\n        options.onContent(node, contentDOM, options)\n      else\n        this.serializeFragment(node.content, options, contentDOM)\n    }\n    return dom\n  }\n\n  serializeNodeAndMarks(node, options = {}) {\n    let dom = this.serializeNode(node, options)\n    for (let i = node.marks.length - 1; i >= 0; i--) {\n      let wrap = this.serializeMark(node.marks[i], node.isInline, options)\n      if (wrap) {\n        ;(wrap.contentDOM || wrap.dom).appendChild(dom)\n        dom = wrap.dom\n      }\n    }\n    return dom\n  }\n\n  serializeMark(mark, inline, options = {}) {\n    let toDOM = this.marks[mark.type.name]\n    return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline))\n  }\n\n  // :: (dom.Document, DOMOutputSpec) → {dom: dom.Node, contentDOM: ?dom.Node}\n  // Render an [output spec](#model.DOMOutputSpec) to a DOM node. If\n  // the spec has a hole (zero) in it, `contentDOM` will point at the\n  // node with the hole.\n  static renderSpec(doc, structure) {\n    if (typeof structure == \"string\")\n      return {dom: doc.createTextNode(structure)}\n    if (structure.nodeType != null)\n      return {dom: structure}\n    let dom = doc.createElement(structure[0]), contentDOM = null\n    let attrs = structure[1], start = 1\n    if (attrs && typeof attrs == \"object\" && attrs.nodeType == null && !Array.isArray(attrs)) {\n      start = 2\n      for (let name in attrs) {\n        if (name == \"style\") dom.style.cssText = attrs[name]\n        else if (attrs[name] != null) dom.setAttribute(name, attrs[name])\n      }\n    }\n    for (let i = start; i < structure.length; i++) {\n      let child = structure[i]\n      if (child === 0) {\n        if (i < structure.length - 1 || i > start)\n          throw new RangeError(\"Content hole must be the only child of its parent node\")\n        return {dom, contentDOM: dom}\n      } else {\n        let {dom: inner, contentDOM: innerContent} = DOMSerializer.renderSpec(doc, child)\n        dom.appendChild(inner)\n        if (innerContent) {\n          if (contentDOM) throw new RangeError(\"Multiple content holes\")\n          contentDOM = innerContent\n        }\n      }\n    }\n    return {dom, contentDOM}\n  }\n\n  // :: (Schema) → DOMSerializer\n  // Build a serializer using the [`toDOM`](#model.NodeSpec.toDOM)\n  // properties in a schema's node and mark specs.\n  static fromSchema(schema) {\n    return schema.cached.domSerializer ||\n      (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)))\n  }\n\n  // : (Schema) → Object<(node: Node) → DOMOutputSpec>\n  // Gather the serializers in a schema's node specs into an object.\n  // This can be useful as a base to build a custom serializer from.\n  static nodesFromSchema(schema) {\n    let result = gatherToDOM(schema.nodes)\n    if (!result.text) result.text = node => node.text\n    return result\n  }\n\n  // : (Schema) → Object<(mark: Mark) → DOMOutputSpec>\n  // Gather the serializers in a schema's mark specs into an object.\n  static marksFromSchema(schema) {\n    return gatherToDOM(schema.marks)\n  }\n}\n\nfunction gatherToDOM(obj) {\n  let result = {}\n  for (let name in obj) {\n    let toDOM = obj[name].spec.toDOM\n    if (toDOM) result[name] = toDOM\n  }\n  return result\n}\n\nfunction doc(options) {\n  // declare global: window\n  return options.document || window.document\n}\n","// Mappable:: interface\n// There are several things that positions can be mapped through.\n// Such objects conform to this interface.\n//\n//   map:: (pos: number, assoc: ?number) → number\n//   Map a position through this object. When given, `assoc` (should\n//   be -1 or 1, defaults to 1) determines with which side the\n//   position is associated, which determines in which direction to\n//   move when a chunk of content is inserted at the mapped position.\n//\n//   mapResult:: (pos: number, assoc: ?number) → MapResult\n//   Map a position, and return an object containing additional\n//   information about the mapping. The result's `deleted` field tells\n//   you whether the position was deleted (completely enclosed in a\n//   replaced range) during the mapping. When content on only one side\n//   is deleted, the position itself is only considered deleted when\n//   `assoc` points in the direction of the deleted content.\n\n// Recovery values encode a range index and an offset. They are\n// represented as numbers, because tons of them will be created when\n// mapping, for example, a large number of decorations. The number's\n// lower 16 bits provide the index, the remaining bits the offset.\n//\n// Note: We intentionally don't use bit shift operators to en- and\n// decode these, since those clip to 32 bits, which we might in rare\n// cases want to overflow. A 64-bit float can represent 48-bit\n// integers precisely.\n\nconst lower16 = 0xffff\nconst factor16 = Math.pow(2, 16)\n\nfunction makeRecover(index, offset) { return index + offset * factor16 }\nfunction recoverIndex(value) { return value & lower16 }\nfunction recoverOffset(value) { return (value - (value & lower16)) / factor16 }\n\n// ::- An object representing a mapped position with extra\n// information.\nexport class MapResult {\n  constructor(pos, deleted = false, recover = null) {\n    // :: number The mapped version of the position.\n    this.pos = pos\n    // :: bool Tells you whether the position was deleted, that is,\n    // whether the step removed its surroundings from the document.\n    this.deleted = deleted\n    this.recover = recover\n  }\n}\n\n// :: class extends Mappable\n// A map describing the deletions and insertions made by a step, which\n// can be used to find the correspondence between positions in the\n// pre-step version of a document and the same position in the\n// post-step version.\nexport class StepMap {\n  // :: ([number])\n  // Create a position map. The modifications to the document are\n  // represented as an array of numbers, in which each group of three\n  // represents a modified chunk as `[start, oldSize, newSize]`.\n  constructor(ranges, inverted = false) {\n    this.ranges = ranges\n    this.inverted = inverted\n  }\n\n  recover(value) {\n    let diff = 0, index = recoverIndex(value)\n    if (!this.inverted) for (let i = 0; i < index; i++)\n      diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1]\n    return this.ranges[index * 3] + diff + recoverOffset(value)\n  }\n\n  // : (number, ?number) → MapResult\n  mapResult(pos, assoc = 1) { return this._map(pos, assoc, false) }\n\n  // : (number, ?number) → number\n  map(pos, assoc = 1) { return this._map(pos, assoc, true) }\n\n  _map(pos, assoc, simple) {\n    let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i] - (this.inverted ? diff : 0)\n      if (start > pos) break\n      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize\n      if (pos <= end) {\n        let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc\n        let result = start + diff + (side < 0 ? 0 : newSize)\n        if (simple) return result\n        let recover = makeRecover(i / 3, pos - start)\n        return new MapResult(result, assoc < 0 ? pos != start : pos != end, recover)\n      }\n      diff += newSize - oldSize\n    }\n    return simple ? pos + diff : new MapResult(pos + diff)\n  }\n\n  touches(pos, recover) {\n    let diff = 0, index = recoverIndex(recover)\n    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i] - (this.inverted ? diff : 0)\n      if (start > pos) break\n      let oldSize = this.ranges[i + oldIndex], end = start + oldSize\n      if (pos <= end && i == index * 3) return true\n      diff += this.ranges[i + newIndex] - oldSize\n    }\n    return false\n  }\n\n  // :: ((oldStart: number, oldEnd: number, newStart: number, newEnd: number))\n  // Calls the given function on each of the changed ranges included in\n  // this map.\n  forEach(f) {\n    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff)\n      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex]\n      f(oldStart, oldStart + oldSize, newStart, newStart + newSize)\n      diff += newSize - oldSize\n    }\n  }\n\n  // :: () → StepMap\n  // Create an inverted version of this map. The result can be used to\n  // map positions in the post-step document to the pre-step document.\n  invert() {\n    return new StepMap(this.ranges, !this.inverted)\n  }\n\n  toString() {\n    return (this.inverted ? \"-\" : \"\") + JSON.stringify(this.ranges)\n  }\n\n  // :: (n: number) → StepMap\n  // Create a map that moves all positions by offset `n` (which may be\n  // negative). This can be useful when applying steps meant for a\n  // sub-document to a larger document, or vice-versa.\n  static offset(n) {\n    return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n])\n  }\n}\n\nStepMap.empty = new StepMap([])\n\n// :: class extends Mappable\n// A mapping represents a pipeline of zero or more [step\n// maps](#transform.StepMap). It has special provisions for losslessly\n// handling mapping positions through a series of steps in which some\n// steps are inverted versions of earlier steps. (This comes up when\n// ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for\n// collaboration or history management.)\nexport class Mapping {\n  // :: (?[StepMap])\n  // Create a new mapping with the given position maps.\n  constructor(maps, mirror, from, to) {\n    // :: [StepMap]\n    // The step maps in this mapping.\n    this.maps = maps || []\n    // :: number\n    // The starting position in the `maps` array, used when `map` or\n    // `mapResult` is called.\n    this.from = from || 0\n    // :: number\n    // The end position in the `maps` array.\n    this.to = to == null ? this.maps.length : to\n    this.mirror = mirror\n  }\n\n  // :: (?number, ?number) → Mapping\n  // Create a mapping that maps only through a part of this one.\n  slice(from = 0, to = this.maps.length) {\n    return new Mapping(this.maps, this.mirror, from, to)\n  }\n\n  copy() {\n    return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to)\n  }\n\n  // :: (StepMap, ?number)\n  // Add a step map to the end of this mapping. If `mirrors` is\n  // given, it should be the index of the step map that is the mirror\n  // image of this one.\n  appendMap(map, mirrors) {\n    this.to = this.maps.push(map)\n    if (mirrors != null) this.setMirror(this.maps.length - 1, mirrors)\n  }\n\n  // :: (Mapping)\n  // Add all the step maps in a given mapping to this one (preserving\n  // mirroring information).\n  appendMapping(mapping) {\n    for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {\n      let mirr = mapping.getMirror(i)\n      this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : null)\n    }\n  }\n\n  // :: (number) → ?number\n  // Finds the offset of the step map that mirrors the map at the\n  // given offset, in this mapping (as per the second argument to\n  // `appendMap`).\n  getMirror(n) {\n    if (this.mirror) for (let i = 0; i < this.mirror.length; i++)\n      if (this.mirror[i] == n) return this.mirror[i + (i % 2 ? -1 : 1)]\n  }\n\n  setMirror(n, m) {\n    if (!this.mirror) this.mirror = []\n    this.mirror.push(n, m)\n  }\n\n  // :: (Mapping)\n  // Append the inverse of the given mapping to this one.\n  appendMappingInverted(mapping) {\n    for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {\n      let mirr = mapping.getMirror(i)\n      this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : null)\n    }\n  }\n\n  // () → Mapping\n  // Create an inverted version of this mapping.\n  invert() {\n    let inverse = new Mapping\n    inverse.appendMappingInverted(this)\n    return inverse\n  }\n\n  // : (number, ?number) → number\n  // Map a position through this mapping.\n  map(pos, assoc = 1) {\n    if (this.mirror) return this._map(pos, assoc, true)\n    for (let i = this.from; i < this.to; i++)\n      pos = this.maps[i].map(pos, assoc)\n    return pos\n  }\n\n  // : (number, ?number) → MapResult\n  // Map a position through this mapping, returning a mapping\n  // result.\n  mapResult(pos, assoc = 1) { return this._map(pos, assoc, false) }\n\n  _map(pos, assoc, simple) {\n    let deleted = false, recoverables = null\n\n    for (let i = this.from; i < this.to; i++) {\n      let map = this.maps[i], rec = recoverables && recoverables[i]\n      if (rec != null && map.touches(pos, rec)) {\n        pos = map.recover(rec)\n        continue\n      }\n\n      let result = map.mapResult(pos, assoc)\n      if (result.recover != null) {\n        let corr = this.getMirror(i)\n        if (corr != null && corr > i && corr < this.to) {\n          if (result.deleted) {\n            i = corr\n            pos = this.maps[corr].recover(result.recover)\n            continue\n          } else {\n            ;(recoverables || (recoverables = Object.create(null)))[corr] = result.recover\n          }\n        }\n      }\n\n      if (result.deleted) deleted = true\n      pos = result.pos\n    }\n\n    return simple ? pos : new MapResult(pos, deleted)\n  }\n}\n","import {Mapping} from \"./map\"\n\nexport function TransformError(message) {\n  let err = Error.call(this, message)\n  err.__proto__ = TransformError.prototype\n  return err\n}\n\nTransformError.prototype = Object.create(Error.prototype)\nTransformError.prototype.constructor = TransformError\nTransformError.prototype.name = \"TransformError\"\n\n// ::- Abstraction to build up and track an array of\n// [steps](#transform.Step) representing a document transformation.\n//\n// Most transforming methods return the `Transform` object itself, so\n// that they can be chained.\nexport class Transform {\n  // :: (Node)\n  // Create a transform that starts with the given document.\n  constructor(doc) {\n    // :: Node\n    // The current document (the result of applying the steps in the\n    // transform).\n    this.doc = doc\n    // :: [Step]\n    // The steps in this transform.\n    this.steps = []\n    // :: [Node]\n    // The documents before each of the steps.\n    this.docs = []\n    // :: Mapping\n    // A mapping with the maps for each of the steps in this transform.\n    this.mapping = new Mapping\n  }\n\n  // :: Node The starting document.\n  get before() { return this.docs.length ? this.docs[0] : this.doc }\n\n  // :: (step: Step) → this\n  // Apply a new step in this transform, saving the result. Throws an\n  // error when the step fails.\n  step(object) {\n    let result = this.maybeStep(object)\n    if (result.failed) throw new TransformError(result.failed)\n    return this\n  }\n\n  // :: (Step) → StepResult\n  // Try to apply a step in this transformation, ignoring it if it\n  // fails. Returns the step result.\n  maybeStep(step) {\n    let result = step.apply(this.doc)\n    if (!result.failed) this.addStep(step, result.doc)\n    return result\n  }\n\n  // :: bool\n  // True when the document has been changed (when there are any\n  // steps).\n  get docChanged() {\n    return this.steps.length > 0\n  }\n\n  addStep(step, doc) {\n    this.docs.push(this.doc)\n    this.steps.push(step)\n    this.mapping.appendMap(step.getMap())\n    this.doc = doc\n  }\n}\n","import {ReplaceError} from \"prosemirror-model\"\n\nimport {StepMap} from \"./map\"\n\nfunction mustOverride() { throw new Error(\"Override me\") }\n\nconst stepsByID = Object.create(null)\n\n// ::- A step object represents an atomic change. It generally applies\n// only to the document it was created for, since the positions\n// stored in it will only make sense for that document.\n//\n// New steps are defined by creating classes that extend `Step`,\n// overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`\n// methods, and registering your class with a unique\n// JSON-serialization identifier using\n// [`Step.jsonID`](#transform.Step^jsonID).\nexport class Step {\n  // :: (doc: Node) → StepResult\n  // Applies this step to the given document, returning a result\n  // object that either indicates failure, if the step can not be\n  // applied to this document, or indicates success by containing a\n  // transformed document.\n  apply(_doc) { return mustOverride() }\n\n  // :: () → StepMap\n  // Get the step map that represents the changes made by this step,\n  // and which can be used to transform between positions in the old\n  // and the new document.\n  getMap() { return StepMap.empty }\n\n  // :: (doc: Node) → Step\n  // Create an inverted version of this step. Needs the document as it\n  // was before the step as argument.\n  invert(_doc) { return mustOverride() }\n\n  // :: (mapping: Mappable) → ?Step\n  // Map this step through a mappable thing, returning either a\n  // version of that step with its positions adjusted, or `null` if\n  // the step was entirely deleted by the mapping.\n  map(_mapping) { return mustOverride() }\n\n  // :: (other: Step) → ?Step\n  // Try to merge this step with another one, to be applied directly\n  // after it. Returns the merged step when possible, null if the\n  // steps can't be merged.\n  merge(_other) { return null }\n\n  // :: () → Object\n  // Create a JSON-serializeable representation of this step. When\n  // defining this for a custom subclass, make sure the result object\n  // includes the step type's [JSON id](#transform.Step^jsonID) under\n  // the `stepType` property.\n  toJSON() { return mustOverride() }\n\n  // :: (Schema, Object) → Step\n  // Deserialize a step from its JSON representation. Will call\n  // through to the step class' own implementation of this method.\n  static fromJSON(schema, json) {\n    if (!json || !json.stepType) throw new RangeError(\"Invalid input for Step.fromJSON\")\n    let type = stepsByID[json.stepType]\n    if (!type) throw new RangeError(`No step type ${json.stepType} defined`)\n    return type.fromJSON(schema, json)\n  }\n\n  // :: (string, constructor<Step>)\n  // To be able to serialize steps to JSON, each step needs a string\n  // ID to attach to its JSON representation. Use this method to\n  // register an ID for your step classes. Try to pick something\n  // that's unlikely to clash with steps from other modules.\n  static jsonID(id, stepClass) {\n    if (id in stepsByID) throw new RangeError(\"Duplicate use of step JSON ID \" + id)\n    stepsByID[id] = stepClass\n    stepClass.prototype.jsonID = id\n    return stepClass\n  }\n}\n\n// ::- The result of [applying](#transform.Step.apply) a step. Contains either a\n// new document or a failure value.\nexport class StepResult {\n  // : (?Node, ?string)\n  constructor(doc, failed) {\n    // :: ?Node The transformed document.\n    this.doc = doc\n    // :: ?string Text providing information about a failed step.\n    this.failed = failed\n  }\n\n  // :: (Node) → StepResult\n  // Create a successful step result.\n  static ok(doc) { return new StepResult(doc, null) }\n\n  // :: (string) → StepResult\n  // Create a failed step result.\n  static fail(message) { return new StepResult(null, message) }\n\n  // :: (Node, number, number, Slice) → StepResult\n  // Call [`Node.replace`](#model.Node.replace) with the given\n  // arguments. Create a successful result if it succeeds, and a\n  // failed one if it throws a `ReplaceError`.\n  static fromReplace(doc, from, to, slice) {\n    try {\n      return StepResult.ok(doc.replace(from, to, slice))\n    } catch (e) {\n      if (e instanceof ReplaceError) return StepResult.fail(e.message)\n      throw e\n    }\n  }\n}\n","import {Slice} from \"prosemirror-model\"\n\nimport {Step, StepResult} from \"./step\"\nimport {StepMap} from \"./map\"\n\n// ::- Replace a part of the document with a slice of new content.\nexport class ReplaceStep extends Step {\n  // :: (number, number, Slice, ?bool)\n  // The given `slice` should fit the 'gap' between `from` and\n  // `to`—the depths must line up, and the surrounding nodes must be\n  // able to be joined with the open sides of the slice. When\n  // `structure` is true, the step will fail if the content between\n  // from and to is not just a sequence of closing and then opening\n  // tokens (this is to guard against rebased replace steps\n  // overwriting something they weren't supposed to).\n  constructor(from, to, slice, structure) {\n    super()\n    this.from = from\n    this.to = to\n    this.slice = slice\n    this.structure = !!structure\n  }\n\n  apply(doc) {\n    if (this.structure && contentBetween(doc, this.from, this.to))\n      return StepResult.fail(\"Structure replace would overwrite content\")\n    return StepResult.fromReplace(doc, this.from, this.to, this.slice)\n  }\n\n  getMap() {\n    return new StepMap([this.from, this.to - this.from, this.slice.size])\n  }\n\n  invert(doc) {\n    return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to))\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted) return null\n    return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice)\n  }\n\n  merge(other) {\n    if (!(other instanceof ReplaceStep) || other.structure != this.structure) return null\n\n    if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {\n      let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd)\n      return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure)\n    } else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {\n      let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd)\n      return new ReplaceStep(other.from, this.to, slice, this.structure)\n    } else {\n      return null\n    }\n  }\n\n  toJSON() {\n    let json = {stepType: \"replace\", from: this.from, to: this.to}\n    if (this.slice.size) json.slice = this.slice.toJSON()\n    if (this.structure) json.structure = true\n    return json\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for ReplaceStep.fromJSON\")\n    return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure)\n  }\n}\n\nStep.jsonID(\"replace\", ReplaceStep)\n\n// ::- Replace a part of the document with a slice of content, but\n// preserve a range of the replaced content by moving it into the\n// slice.\nexport class ReplaceAroundStep extends Step {\n  // :: (number, number, number, number, Slice, number, ?bool)\n  // Create a replace-around step with the given range and gap.\n  // `insert` should be the point in the slice into which the content\n  // of the gap should be moved. `structure` has the same meaning as\n  // it has in the [`ReplaceStep`](#transform.ReplaceStep) class.\n  constructor(from, to, gapFrom, gapTo, slice, insert, structure) {\n    super()\n    this.from = from\n    this.to = to\n    this.gapFrom = gapFrom\n    this.gapTo = gapTo\n    this.slice = slice\n    this.insert = insert\n    this.structure = !!structure\n  }\n\n  apply(doc) {\n    if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||\n                           contentBetween(doc, this.gapTo, this.to)))\n      return StepResult.fail(\"Structure gap-replace would overwrite content\")\n\n    let gap = doc.slice(this.gapFrom, this.gapTo)\n    if (gap.openStart || gap.openEnd)\n      return StepResult.fail(\"Gap is not a flat range\")\n    let inserted = this.slice.insertAt(this.insert, gap.content)\n    if (!inserted) return StepResult.fail(\"Content does not fit in gap\")\n    return StepResult.fromReplace(doc, this.from, this.to, inserted)\n  }\n\n  getMap() {\n    return new StepMap([this.from, this.gapFrom - this.from, this.insert,\n                        this.gapTo, this.to - this.gapTo, this.slice.size - this.insert])\n  }\n\n  invert(doc) {\n    let gap = this.gapTo - this.gapFrom\n    return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap,\n                                 this.from + this.insert, this.from + this.insert + gap,\n                                 doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from),\n                                 this.gapFrom - this.from, this.structure)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1)\n    if ((from.deleted && to.deleted) || gapFrom < from.pos || gapTo > to.pos) return null\n    return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure)\n  }\n\n  toJSON() {\n    let json = {stepType: \"replaceAround\", from: this.from, to: this.to,\n                gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert}\n    if (this.slice.size) json.slice = this.slice.toJSON()\n    if (this.structure) json.structure = true\n    return json\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\" ||\n        typeof json.gapFrom != \"number\" || typeof json.gapTo != \"number\" || typeof json.insert != \"number\")\n      throw new RangeError(\"Invalid input for ReplaceAroundStep.fromJSON\")\n    return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo,\n                                 Slice.fromJSON(schema, json.slice), json.insert, !!json.structure)\n  }\n}\n\nStep.jsonID(\"replaceAround\", ReplaceAroundStep)\n\nfunction contentBetween(doc, from, to) {\n  let $from = doc.resolve(from), dist = to - from, depth = $from.depth\n  while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {\n    depth--\n    dist--\n  }\n  if (dist > 0) {\n    let next = $from.node(depth).maybeChild($from.indexAfter(depth))\n    while (dist > 0) {\n      if (!next || next.isLeaf) return true\n      next = next.firstChild\n      dist--\n    }\n  }\n  return false\n}\n","import {Slice, Fragment} from \"prosemirror-model\"\n\nimport {Transform} from \"./transform\"\nimport {ReplaceStep, ReplaceAroundStep} from \"./replace_step\"\n\nfunction canCut(node, start, end) {\n  return (start == 0 || node.canReplace(start, node.childCount)) &&\n    (end == node.childCount || node.canReplace(0, end))\n}\n\n// :: (NodeRange) → ?number\n// Try to find a target depth to which the content in the given range\n// can be lifted. Will not go across\n// [isolating](#model.NodeSpec.isolating) parent nodes.\nexport function liftTarget(range) {\n  let parent = range.parent\n  let content = parent.content.cutByIndex(range.startIndex, range.endIndex)\n  for (let depth = range.depth;; --depth) {\n    let node = range.$from.node(depth)\n    let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth)\n    if (depth < range.depth && node.canReplace(index, endIndex, content))\n      return depth\n    if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex)) break\n  }\n}\n\n// :: (NodeRange, number) → this\n// Split the content in the given range off from its parent, if there\n// is sibling content before or after it, and move it up the tree to\n// the depth specified by `target`. You'll probably want to use\n// [`liftTarget`](#transform.liftTarget) to compute `target`, to make\n// sure the lift is valid.\nTransform.prototype.lift = function(range, target) {\n  let {$from, $to, depth} = range\n\n  let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1)\n  let start = gapStart, end = gapEnd\n\n  let before = Fragment.empty, openStart = 0\n  for (let d = depth, splitting = false; d > target; d--)\n    if (splitting || $from.index(d) > 0) {\n      splitting = true\n      before = Fragment.from($from.node(d).copy(before))\n      openStart++\n    } else {\n      start--\n    }\n  let after = Fragment.empty, openEnd = 0\n  for (let d = depth, splitting = false; d > target; d--)\n    if (splitting || $to.after(d + 1) < $to.end(d)) {\n      splitting = true\n      after = Fragment.from($to.node(d).copy(after))\n      openEnd++\n    } else {\n      end++\n    }\n\n  return this.step(new ReplaceAroundStep(start, end, gapStart, gapEnd,\n                                         new Slice(before.append(after), openStart, openEnd),\n                                         before.size - openStart, true))\n}\n\n// :: (NodeRange, NodeType, ?Object, ?NodeRange) → ?[{type: NodeType, attrs: ?Object}]\n// Try to find a valid way to wrap the content in the given range in a\n// node of the given type. May introduce extra nodes around and inside\n// the wrapper node, if necessary. Returns null if no valid wrapping\n// could be found. When `innerRange` is given, that range's content is\n// used as the content to fit into the wrapping, instead of the\n// content of `range`.\nexport function findWrapping(range, nodeType, attrs, innerRange = range) {\n  let around = findWrappingOutside(range, nodeType)\n  let inner = around && findWrappingInside(innerRange, nodeType)\n  if (!inner) return null\n  return around.map(withAttrs).concat({type: nodeType, attrs}).concat(inner.map(withAttrs))\n}\n\nfunction withAttrs(type) { return {type, attrs: null} }\n\nfunction findWrappingOutside(range, type) {\n  let {parent, startIndex, endIndex} = range\n  let around = parent.contentMatchAt(startIndex).findWrapping(type)\n  if (!around) return null\n  let outer = around.length ? around[0] : type\n  return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null\n}\n\nfunction findWrappingInside(range, type) {\n  let {parent, startIndex, endIndex} = range\n  let inner = parent.child(startIndex)\n  let inside = type.contentMatch.findWrapping(inner.type)\n  if (!inside) return null\n  let lastType = inside.length ? inside[inside.length - 1] : type\n  let innerMatch = lastType.contentMatch\n  for (let i = startIndex; innerMatch && i < endIndex; i++)\n    innerMatch = innerMatch.matchType(parent.child(i).type)\n  if (!innerMatch || !innerMatch.validEnd) return null\n  return inside\n}\n\n// :: (NodeRange, [{type: NodeType, attrs: ?Object}]) → this\n// Wrap the given [range](#model.NodeRange) in the given set of wrappers.\n// The wrappers are assumed to be valid in this position, and should\n// probably be computed with [`findWrapping`](#transform.findWrapping).\nTransform.prototype.wrap = function(range, wrappers) {\n  let content = Fragment.empty\n  for (let i = wrappers.length - 1; i >= 0; i--)\n    content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content))\n\n  let start = range.start, end = range.end\n  return this.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true))\n}\n\n// :: (number, ?number, NodeType, ?Object) → this\n// Set the type of all textblocks (partly) between `from` and `to` to\n// the given node type with the given attributes.\nTransform.prototype.setBlockType = function(from, to = from, type, attrs) {\n  if (!type.isTextblock) throw new RangeError(\"Type given to setBlockType should be a textblock\")\n  let mapFrom = this.steps.length\n  this.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(this.doc, this.mapping.slice(mapFrom).map(pos), type)) {\n      // Ensure all markup that isn't allowed in the new node type is cleared\n      this.clearIncompatible(this.mapping.slice(mapFrom).map(pos, 1), type)\n      let mapping = this.mapping.slice(mapFrom)\n      let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1)\n      this.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1,\n                                      new Slice(Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true))\n      return false\n    }\n  })\n  return this\n}\n\nfunction canChangeType(doc, pos, type) {\n  let $pos = doc.resolve(pos), index = $pos.index()\n  return $pos.parent.canReplaceWith(index, index + 1, type)\n}\n\n// :: (number, ?NodeType, ?Object, ?[Mark]) → this\n// Change the type, attributes, and/or marks of the node at `pos`.\n// When `type` isn't given, the existing node type is preserved,\nTransform.prototype.setNodeMarkup = function(pos, type, attrs, marks) {\n  let node = this.doc.nodeAt(pos)\n  if (!node) throw new RangeError(\"No node at given position\")\n  if (!type) type = node.type\n  let newNode = type.create(attrs, null, marks || node.marks)\n  if (node.isLeaf)\n    return this.replaceWith(pos, pos + node.nodeSize, newNode)\n\n  if (!type.validContent(node.content))\n    throw new RangeError(\"Invalid content for node type \" + type.name)\n\n  return this.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1,\n                                         new Slice(Fragment.from(newNode), 0, 0), 1, true))\n}\n\n// :: (Node, number, number, ?[?{type: NodeType, attrs: ?Object}]) → bool\n// Check whether splitting at the given position is allowed.\nexport function canSplit(doc, pos, depth = 1, typesAfter) {\n  let $pos = doc.resolve(pos), base = $pos.depth - depth\n  let innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent\n  if (base < 0 || $pos.parent.type.spec.isolating ||\n      !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||\n      !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))\n    return false\n  for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {\n    let node = $pos.node(d), index = $pos.index(d)\n    if (node.type.spec.isolating) return false\n    let rest = node.content.cutByIndex(index, node.childCount)\n    let after = (typesAfter && typesAfter[i]) || node\n    if (after != node) rest = rest.replaceChild(0, after.type.create(after.attrs))\n    if (!node.canReplace(index + 1, node.childCount) || !after.type.validContent(rest))\n      return false\n  }\n  let index = $pos.indexAfter(base)\n  let baseType = typesAfter && typesAfter[0]\n  return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type)\n}\n\n// :: (number, ?number, ?[?{type: NodeType, attrs: ?Object}]) → this\n// Split the node at the given position, and optionally, if `depth` is\n// greater than one, any number of nodes above that. By default, the\n// parts split off will inherit the node type of the original node.\n// This can be changed by passing an array of types and attributes to\n// use after the split.\nTransform.prototype.split = function(pos, depth = 1, typesAfter) {\n  let $pos = this.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty\n  for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {\n    before = Fragment.from($pos.node(d).copy(before))\n    let typeAfter = typesAfter && typesAfter[i]\n    after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after))\n  }\n  return this.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth, true)))\n}\n\n// :: (Node, number) → bool\n// Test whether the blocks before and after a given position can be\n// joined.\nexport function canJoin(doc, pos) {\n  let $pos = doc.resolve(pos), index = $pos.index()\n  return joinable($pos.nodeBefore, $pos.nodeAfter) &&\n    $pos.parent.canReplace(index, index + 1)\n}\n\nfunction joinable(a, b) {\n  return a && b && !a.isLeaf && a.canAppend(b)\n}\n\n// :: (Node, number, ?number) → ?number\n// Find an ancestor of the given position that can be joined to the\n// block before (or after if `dir` is positive). Returns the joinable\n// point, if any.\nexport function joinPoint(doc, pos, dir = -1) {\n  let $pos = doc.resolve(pos)\n  for (let d = $pos.depth;; d--) {\n    let before, after\n    if (d == $pos.depth) {\n      before = $pos.nodeBefore\n      after = $pos.nodeAfter\n    } else if (dir > 0) {\n      before = $pos.node(d + 1)\n      after = $pos.node(d).maybeChild($pos.index(d) + 1)\n    } else {\n      before = $pos.node(d).maybeChild($pos.index(d) - 1)\n      after = $pos.node(d + 1)\n    }\n    if (before && !before.isTextblock && joinable(before, after)) return pos\n    if (d == 0) break\n    pos = dir < 0 ? $pos.before(d) : $pos.after(d)\n  }\n}\n\n// :: (number, ?number) → this\n// Join the blocks around the given position. If depth is 2, their\n// last and first siblings are also joined, and so on.\nTransform.prototype.join = function(pos, depth = 1) {\n  let step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true)\n  return this.step(step)\n}\n\n// :: (Node, number, NodeType) → ?number\n// Try to find a point where a node of the given type can be inserted\n// near `pos`, by searching up the node hierarchy when `pos` itself\n// isn't a valid place but is at the start or end of a node. Return\n// null if no position was found.\nexport function insertPoint(doc, pos, nodeType) {\n  let $pos = doc.resolve(pos)\n  if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType)) return pos\n\n  if ($pos.parentOffset == 0)\n    for (let d = $pos.depth - 1; d >= 0; d--) {\n      let index = $pos.index(d)\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.before(d + 1)\n      if (index > 0) return null\n    }\n  if ($pos.parentOffset == $pos.parent.content.size)\n    for (let d = $pos.depth - 1; d >= 0; d--) {\n      let index = $pos.indexAfter(d)\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.after(d + 1)\n      if (index < $pos.node(d).childCount) return null\n    }\n}\n\n// :: (Node, number, Slice) → ?number\n// Finds a position at or around the given position where the given\n// slice can be inserted. Will look at parent nodes' nearest boundary\n// and try there, even if the original position wasn't directly at the\n// start or end of that node. Returns null when no position was found.\nexport function dropPoint(doc, pos, slice) {\n  let $pos = doc.resolve(pos)\n  if (!slice.content.size) return pos\n  let content = slice.content\n  for (let i = 0; i < slice.openStart; i++) content = content.firstChild.content\n  for (let pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {\n    for (let d = $pos.depth; d >= 0; d--) {\n      let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1\n      let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0)\n      if (pass == 1\n          ? $pos.node(d).canReplace(insertPos, insertPos, content)\n          : $pos.node(d).contentMatchAt(insertPos).findWrapping(content.firstChild.type))\n        return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1)\n    }\n  }\n  return null\n}\n","import {Fragment, Slice} from \"prosemirror-model\"\nimport {Step, StepResult} from \"./step\"\n\nfunction mapFragment(fragment, f, parent) {\n  let mapped = []\n  for (let i = 0; i < fragment.childCount; i++) {\n    let child = fragment.child(i)\n    if (child.content.size) child = child.copy(mapFragment(child.content, f, child))\n    if (child.isInline) child = f(child, parent, i)\n    mapped.push(child)\n  }\n  return Fragment.fromArray(mapped)\n}\n\n// ::- Add a mark to all inline content between two positions.\nexport class AddMarkStep extends Step {\n  // :: (number, number, Mark)\n  constructor(from, to, mark) {\n    super()\n    this.from = from\n    this.to = to\n    this.mark = mark\n  }\n\n  apply(doc) {\n    let oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from)\n    let parent = $from.node($from.sharedDepth(this.to))\n    let slice = new Slice(mapFragment(oldSlice.content, (node, parent) => {\n      if (!parent.type.allowsMarkType(this.mark.type)) return node\n      return node.mark(this.mark.addToSet(node.marks))\n    }, parent), oldSlice.openStart, oldSlice.openEnd)\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  }\n\n  invert() {\n    return new RemoveMarkStep(this.from, this.to, this.mark)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted || from.pos >= to.pos) return null\n    return new AddMarkStep(from.pos, to.pos, this.mark)\n  }\n\n  merge(other) {\n    if (other instanceof AddMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      return new AddMarkStep(Math.min(this.from, other.from),\n                             Math.max(this.to, other.to), this.mark)\n  }\n\n  toJSON() {\n    return {stepType: \"addMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for AddMarkStep.fromJSON\")\n    return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  }\n}\n\nStep.jsonID(\"addMark\", AddMarkStep)\n\n// ::- Remove a mark from all inline content between two positions.\nexport class RemoveMarkStep extends Step {\n  // :: (number, number, Mark)\n  constructor(from, to, mark) {\n    super()\n    this.from = from\n    this.to = to\n    this.mark = mark\n  }\n\n  apply(doc) {\n    let oldSlice = doc.slice(this.from, this.to)\n    let slice = new Slice(mapFragment(oldSlice.content, node => {\n      return node.mark(this.mark.removeFromSet(node.marks))\n    }), oldSlice.openStart, oldSlice.openEnd)\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  }\n\n  invert() {\n    return new AddMarkStep(this.from, this.to, this.mark)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted || from.pos >= to.pos) return null\n    return new RemoveMarkStep(from.pos, to.pos, this.mark)\n  }\n\n  merge(other) {\n    if (other instanceof RemoveMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      return new RemoveMarkStep(Math.min(this.from, other.from),\n                                Math.max(this.to, other.to), this.mark)\n  }\n\n  toJSON() {\n    return {stepType: \"removeMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for RemoveMarkStep.fromJSON\")\n    return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  }\n}\n\nStep.jsonID(\"removeMark\", RemoveMarkStep)\n","import {Slice, Fragment} from \"prosemirror-model\"\nimport {ReplaceStep, ReplaceAroundStep} from \"prosemirror-transform\"\n\nconst classesById = Object.create(null)\n\n// ::- Superclass for editor selections. Every selection type should\n// extend this. Should not be instantiated directly.\nexport class Selection {\n  // :: (ResolvedPos, ResolvedPos, ?[SelectionRange])\n  // Initialize a selection with the head and anchor and ranges. If no\n  // ranges are given, constructs a single range across `$anchor` and\n  // `$head`.\n  constructor($anchor, $head, ranges) {\n    // :: [SelectionRange]\n    // The ranges covered by the selection.\n    this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))]\n    // :: ResolvedPos\n    // The resolved anchor of the selection (the side that stays in\n    // place when the selection is modified).\n    this.$anchor = $anchor\n    // :: ResolvedPos\n    // The resolved head of the selection (the side that moves when\n    // the selection is modified).\n    this.$head = $head\n  }\n\n  // :: number\n  // The selection's anchor, as an unresolved position.\n  get anchor() { return this.$anchor.pos }\n\n  // :: number\n  // The selection's head.\n  get head() { return this.$head.pos }\n\n  // :: number\n  // The lower bound of the selection's main range.\n  get from() { return this.$from.pos }\n\n  // :: number\n  // The upper bound of the selection's main range.\n  get to() { return this.$to.pos }\n\n  // :: ResolvedPos\n  // The resolved lower  bound of the selection's main range.\n  get $from() {\n    return this.ranges[0].$from\n  }\n\n  // :: ResolvedPos\n  // The resolved upper bound of the selection's main range.\n  get $to() {\n    return this.ranges[0].$to\n  }\n\n  // :: bool\n  // Indicates whether the selection contains any content.\n  get empty() {\n    let ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++)\n      if (ranges[i].$from.pos != ranges[i].$to.pos) return false\n    return true\n  }\n\n  // eq:: (Selection) → bool\n  // Test whether the selection is the same as another selection.\n\n  // map:: (doc: Node, mapping: Mappable) → Selection\n  // Map this selection through a [mappable](#transform.Mappable) thing. `doc`\n  // should be the new document to which we are mapping.\n\n  // :: () → Slice\n  // Get the content of this selection as a slice.\n  content() {\n    return this.$from.node(0).slice(this.from, this.to, true)\n  }\n\n  // :: (Transaction, ?Slice)\n  // Replace the selection with a slice or, if no slice is given,\n  // delete the selection. Will append to the given transaction.\n  replace(tr, content = Slice.empty) {\n    // Put the new selection at the position after the inserted\n    // content. When that ended in an inline node, search backwards,\n    // to get the position after that node. If not, search forward.\n    let lastNode = content.content.lastChild, lastParent = null\n    for (let i = 0; i < content.openEnd; i++) {\n      lastParent = lastNode\n      lastNode = lastNode.lastChild\n    }\n\n    let mapFrom = tr.steps.length, ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++) {\n      let {$from, $to} = ranges[i], mapping = tr.mapping.slice(mapFrom)\n      tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i ? Slice.empty : content)\n      if (i == 0)\n        selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1)\n    }\n  }\n\n  // :: (Transaction, Node)\n  // Replace the selection with the given node, appending the changes\n  // to the given transaction.\n  replaceWith(tr, node) {\n    let mapFrom = tr.steps.length, ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++) {\n      let {$from, $to} = ranges[i], mapping = tr.mapping.slice(mapFrom)\n      let from = mapping.map($from.pos), to = mapping.map($to.pos)\n      if (i) {\n        tr.deleteRange(from, to)\n      } else {\n        tr.replaceRangeWith(from, to, node)\n        selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1)\n      }\n    }\n  }\n\n  // toJSON:: () → Object\n  // Convert the selection to a JSON representation. When implementing\n  // this for a custom selection class, make sure to give the object a\n  // `type` property whose value matches the ID under which you\n  // [registered](#state.Selection^jsonID) your class.\n\n  // :: (ResolvedPos, number, ?bool) → ?Selection\n  // Find a valid cursor or leaf node selection starting at the given\n  // position and searching back if `dir` is negative, and forward if\n  // positive. When `textOnly` is true, only consider cursor\n  // selections. Will return null when no valid selection position is\n  // found.\n  static findFrom($pos, dir, textOnly) {\n    let inner = $pos.parent.inlineContent ? new TextSelection($pos)\n        : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly)\n    if (inner) return inner\n\n    for (let depth = $pos.depth - 1; depth >= 0; depth--) {\n      let found = dir < 0\n          ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)\n          : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly)\n      if (found) return found\n    }\n  }\n\n  // :: (ResolvedPos, ?number) → Selection\n  // Find a valid cursor or leaf node selection near the given\n  // position. Searches forward first by default, but if `bias` is\n  // negative, it will search backwards first.\n  static near($pos, bias = 1) {\n    return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0))\n  }\n\n  // :: (Node) → Selection\n  // Find the cursor or leaf node selection closest to the start of\n  // the given document. Will return an\n  // [`AllSelection`](#state.AllSelection) if no valid position\n  // exists.\n  static atStart(doc) {\n    return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc)\n  }\n\n  // :: (Node) → Selection\n  // Find the cursor or leaf node selection closest to the end of the\n  // given document.\n  static atEnd(doc) {\n    return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc)\n  }\n\n  // :: (Node, Object) → Selection\n  // Deserialize the JSON representation of a selection. Must be\n  // implemented for custom classes (as a static class method).\n  static fromJSON(doc, json) {\n    if (!json || !json.type) throw new RangeError(\"Invalid input for Selection.fromJSON\")\n    let cls = classesById[json.type]\n    if (!cls) throw new RangeError(`No selection type ${json.type} defined`)\n    return cls.fromJSON(doc, json)\n  }\n\n  // :: (string, constructor<Selection>)\n  // To be able to deserialize selections from JSON, custom selection\n  // classes must register themselves with an ID string, so that they\n  // can be disambiguated. Try to pick something that's unlikely to\n  // clash with classes from other modules.\n  static jsonID(id, selectionClass) {\n    if (id in classesById) throw new RangeError(\"Duplicate use of selection JSON ID \" + id)\n    classesById[id] = selectionClass\n    selectionClass.prototype.jsonID = id\n    return selectionClass\n  }\n\n  // :: () → SelectionBookmark\n  // Get a [bookmark](#state.SelectionBookmark) for this selection,\n  // which is a value that can be mapped without having access to a\n  // current document, and later resolved to a real selection for a\n  // given document again. (This is used mostly by the history to\n  // track and restore old selections.) The default implementation of\n  // this method just converts the selection to a text selection and\n  // returns the bookmark for that.\n  getBookmark() {\n    return TextSelection.between(this.$anchor, this.$head).getBookmark()\n  }\n}\n\n// :: bool\n// Controls whether, when a selection of this type is active in the\n// browser, the selected range should be visible to the user. Defaults\n// to `true`.\nSelection.prototype.visible = true\n\n// SelectionBookmark:: interface\n// A lightweight, document-independent representation of a selection.\n// You can define a custom bookmark type for a custom selection class\n// to make the history handle it well.\n//\n//   map:: (mapping: Mapping) → SelectionBookmark\n//   Map the bookmark through a set of changes.\n//\n//   resolve:: (doc: Node) → Selection\n//   Resolve the bookmark to a real selection again. This may need to\n//   do some error checking and may fall back to a default (usually\n//   [`TextSelection.between`](#state.TextSelection^between)) if\n//   mapping made the bookmark invalid.\n\n// ::- Represents a selected range in a document.\nexport class SelectionRange {\n  // :: (ResolvedPos, ResolvedPos)\n  constructor($from, $to) {\n    // :: ResolvedPos\n    // The lower bound of the range.\n    this.$from = $from\n    // :: ResolvedPos\n    // The upper bound of the range.\n    this.$to = $to\n  }\n}\n\n// ::- A text selection represents a classical editor selection, with\n// a head (the moving side) and anchor (immobile side), both of which\n// point into textblock nodes. It can be empty (a regular cursor\n// position).\nexport class TextSelection extends Selection {\n  // :: (ResolvedPos, ?ResolvedPos)\n  // Construct a text selection between the given points.\n  constructor($anchor, $head = $anchor) {\n    super($anchor, $head)\n  }\n\n  // :: ?ResolvedPos\n  // Returns a resolved position if this is a cursor selection (an\n  // empty text selection), and null otherwise.\n  get $cursor() { return this.$anchor.pos == this.$head.pos ? this.$head : null }\n\n  map(doc, mapping) {\n    let $head = doc.resolve(mapping.map(this.head))\n    if (!$head.parent.inlineContent) return Selection.near($head)\n    let $anchor = doc.resolve(mapping.map(this.anchor))\n    return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head)\n  }\n\n  replace(tr, content = Slice.empty) {\n    super.replace(tr, content)\n    if (content == Slice.empty) {\n      let marks = this.$from.marksAcross(this.$to)\n      if (marks) tr.ensureMarks(marks)\n    }\n  }\n\n  eq(other) {\n    return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head\n  }\n\n  getBookmark() {\n    return new TextBookmark(this.anchor, this.head)\n  }\n\n  toJSON() {\n    return {type: \"text\", anchor: this.anchor, head: this.head}\n  }\n\n  static fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\" || typeof json.head != \"number\")\n      throw new RangeError(\"Invalid input for TextSelection.fromJSON\")\n    return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head))\n  }\n\n  // :: (Node, number, ?number) → TextSelection\n  // Create a text selection from non-resolved positions.\n  static create(doc, anchor, head = anchor) {\n    let $anchor = doc.resolve(anchor)\n    return new this($anchor, head == anchor ? $anchor : doc.resolve(head))\n  }\n\n  // :: (ResolvedPos, ResolvedPos, ?number) → Selection\n  // Return a text selection that spans the given positions or, if\n  // they aren't text positions, find a text selection near them.\n  // `bias` determines whether the method searches forward (default)\n  // or backwards (negative number) first. Will fall back to calling\n  // [`Selection.near`](#state.Selection^near) when the document\n  // doesn't contain a valid text position.\n  static between($anchor, $head, bias) {\n    let dPos = $anchor.pos - $head.pos\n    if (!bias || dPos) bias = dPos >= 0 ? 1 : -1\n    if (!$head.parent.inlineContent) {\n      let found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true)\n      if (found) $head = found.$head\n      else return Selection.near($head, bias)\n    }\n    if (!$anchor.parent.inlineContent) {\n      if (dPos == 0) {\n        $anchor = $head\n      } else {\n        $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor\n        if (($anchor.pos < $head.pos) != (dPos < 0)) $anchor = $head\n      }\n    }\n    return new TextSelection($anchor, $head)\n  }\n}\n\nSelection.jsonID(\"text\", TextSelection)\n\nclass TextBookmark {\n  constructor(anchor, head) {\n    this.anchor = anchor\n    this.head = head\n  }\n  map(mapping) {\n    return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head))\n  }\n  resolve(doc) {\n    return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head))\n  }\n}\n\n// ::- A node selection is a selection that points at a single node.\n// All nodes marked [selectable](#model.NodeSpec.selectable) can be\n// the target of a node selection. In such a selection, `from` and\n// `to` point directly before and after the selected node, `anchor`\n// equals `from`, and `head` equals `to`..\nexport class NodeSelection extends Selection {\n  // :: (ResolvedPos)\n  // Create a node selection. Does not verify the validity of its\n  // argument.\n  constructor($pos) {\n    let node = $pos.nodeAfter\n    let $end = $pos.node(0).resolve($pos.pos + node.nodeSize)\n    super($pos, $end)\n    // :: Node The selected node.\n    this.node = node\n  }\n\n  map(doc, mapping) {\n    let {deleted, pos} = mapping.mapResult(this.anchor)\n    let $pos = doc.resolve(pos)\n    if (deleted) return Selection.near($pos)\n    return new NodeSelection($pos)\n  }\n\n  content() {\n    return new Slice(Fragment.from(this.node), 0, 0)\n  }\n\n  eq(other) {\n    return other instanceof NodeSelection && other.anchor == this.anchor\n  }\n\n  toJSON() {\n    return {type: \"node\", anchor: this.anchor}\n  }\n\n  getBookmark() { return new NodeBookmark(this.anchor) }\n\n  static fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\")\n      throw new RangeError(\"Invalid input for NodeSelection.fromJSON\")\n    return new NodeSelection(doc.resolve(json.anchor))\n  }\n\n  // :: (Node, number) → NodeSelection\n  // Create a node selection from non-resolved positions.\n  static create(doc, from) {\n    return new this(doc.resolve(from))\n  }\n\n  // :: (Node) → bool\n  // Determines whether the given node may be selected as a node\n  // selection.\n  static isSelectable(node) {\n    return !node.isText && node.type.spec.selectable !== false\n  }\n}\n\nNodeSelection.prototype.visible = false\n\nSelection.jsonID(\"node\", NodeSelection)\n\nclass NodeBookmark {\n  constructor(anchor) {\n    this.anchor = anchor\n  }\n  map(mapping) {\n    let {deleted, pos} = mapping.mapResult(this.anchor)\n    return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos)\n  }\n  resolve(doc) {\n    let $pos = doc.resolve(this.anchor), node = $pos.nodeAfter\n    if (node && NodeSelection.isSelectable(node)) return new NodeSelection($pos)\n    return Selection.near($pos)\n  }\n}\n\n// ::- A selection type that represents selecting the whole document\n// (which can not necessarily be expressed with a text selection, when\n// there are for example leaf block nodes at the start or end of the\n// document).\nexport class AllSelection extends Selection {\n  // :: (Node)\n  // Create an all-selection over the given document.\n  constructor(doc) {\n    super(doc.resolve(0), doc.resolve(doc.content.size))\n  }\n\n  toJSON() { return {type: \"all\"} }\n\n  static fromJSON(doc) { return new AllSelection(doc) }\n\n  map(doc) { return new AllSelection(doc) }\n\n  eq(other) { return other instanceof AllSelection }\n\n  getBookmark() { return AllBookmark }\n}\n\nSelection.jsonID(\"all\", AllSelection)\n\nconst AllBookmark = {\n  map() { return this },\n  resolve(doc) { return new AllSelection(doc) }\n}\n\n// FIXME we'll need some awareness of text direction when scanning for selections\n\n// Try to find a selection inside the given node. `pos` points at the\n// position where the search starts. When `text` is true, only return\n// text selections.\nfunction findSelectionIn(doc, node, pos, index, dir, text) {\n  if (node.inlineContent) return TextSelection.create(doc, pos)\n  for (let i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {\n    let child = node.child(i)\n    if (!child.isAtom) {\n      let inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text)\n      if (inner) return inner\n    } else if (!text && NodeSelection.isSelectable(child)) {\n      return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0))\n    }\n    pos += child.nodeSize * dir\n  }\n}\n\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n  let last = tr.steps.length - 1\n  if (last < startLen) return\n  let step = tr.steps[last]\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) return\n  let map = tr.mapping.maps[last], end\n  map.forEach((_from, _to, _newFrom, newTo) => { if (end == null) end = newTo })\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias))\n}\n","import {Transform} from \"prosemirror-transform\"\nimport {Mark} from \"prosemirror-model\"\n\nconst UPDATED_SEL = 1, UPDATED_MARKS = 2, UPDATED_SCROLL = 4\n\n// ::- An editor state transaction, which can be applied to a state to\n// create an updated state. Use\n// [`EditorState.tr`](#state.EditorState.tr) to create an instance.\n//\n// Transactions track changes to the document (they are a subclass of\n// [`Transform`](#transform.Transform)), but also other state changes,\n// like selection updates and adjustments of the set of [stored\n// marks](#state.EditorState.storedMarks). In addition, you can store\n// metadata properties in a transaction, which are extra pieces of\n// information that client code or plugins can use to describe what a\n// transacion represents, so that they can update their [own\n// state](#state.StateField) accordingly.\n//\n// The [editor view](#view.EditorView) uses a few metadata properties:\n// it will attach a property `\"pointer\"` with the value `true` to\n// selection transactions directly caused by mouse or touch input, and\n// a `\"uiEvent\"` property of that may be `\"paste\"`, `\"cut\"`, or `\"drop\"`.\nexport class Transaction extends Transform {\n  constructor(state) {\n    super(state.doc)\n    // :: number\n    // The timestamp associated with this transaction, in the same\n    // format as `Date.now()`.\n    this.time = Date.now()\n    this.curSelection = state.selection\n    // The step count for which the current selection is valid.\n    this.curSelectionFor = 0\n    // :: ?[Mark]\n    // The stored marks set by this transaction, if any.\n    this.storedMarks = state.storedMarks\n    // Bitfield to track which aspects of the state were updated by\n    // this transaction.\n    this.updated = 0\n    // Object used to store metadata properties for the transaction.\n    this.meta = Object.create(null)\n  }\n\n  // :: Selection\n  // The transaction's current selection. This defaults to the editor\n  // selection [mapped](#state.Selection.map) through the steps in the\n  // transaction, but can be overwritten with\n  // [`setSelection`](#state.Transaction.setSelection).\n  get selection() {\n    if (this.curSelectionFor < this.steps.length) {\n      this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor))\n      this.curSelectionFor = this.steps.length\n    }\n    return this.curSelection\n  }\n\n  // :: (Selection) → Transaction\n  // Update the transaction's current selection. Will determine the\n  // selection that the editor gets when the transaction is applied.\n  setSelection(selection) {\n    this.curSelection = selection\n    this.curSelectionFor = this.steps.length\n    this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS\n    this.storedMarks = null\n    return this\n  }\n\n  // :: bool\n  // Whether the selection was explicitly updated by this transaction.\n  get selectionSet() {\n    return (this.updated & UPDATED_SEL) > 0\n  }\n\n  // :: (?[Mark]) → Transaction\n  // Set the current stored marks.\n  setStoredMarks(marks) {\n    this.storedMarks = marks\n    this.updated |= UPDATED_MARKS\n    return this\n  }\n\n  // :: ([Mark]) → Transaction\n  // Make sure the current stored marks or, if that is null, the marks\n  // at the selection, match the given set of marks. Does nothing if\n  // this is already the case.\n  ensureMarks(marks) {\n    if (!Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks))\n      this.setStoredMarks(marks)\n    return this\n  }\n\n  // :: (Mark) → Transaction\n  // Add a mark to the set of stored marks.\n  addStoredMark(mark) {\n    return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()))\n  }\n\n  // :: (union<Mark, MarkType>) → Transaction\n  // Remove a mark or mark type from the set of stored marks.\n  removeStoredMark(mark) {\n    return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()))\n  }\n\n  // :: bool\n  // Whether the stored marks were explicitly set for this transaction.\n  get storedMarksSet() {\n    return (this.updated & UPDATED_MARKS) > 0\n  }\n\n  addStep(step, doc) {\n    super.addStep(step, doc)\n    this.updated = this.updated & ~UPDATED_MARKS\n    this.storedMarks = null\n  }\n\n  // :: (number) → Transaction\n  // Update the timestamp for the transaction.\n  setTime(time) {\n    this.time = time\n    return this\n  }\n\n  // :: (Slice) → Transaction\n  // Replace the current selection with the given slice.\n  replaceSelection(slice) {\n    this.selection.replace(this, slice)\n    return this\n  }\n\n  // :: (Node, ?bool) → Transaction\n  // Replace the selection with the given node. When `inheritMarks` is\n  // true and the content is inline, it inherits the marks from the\n  // place where it is inserted.\n  replaceSelectionWith(node, inheritMarks) {\n    let selection = this.selection\n    if (inheritMarks !== false)\n      node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : (selection.$from.marksAcross(selection.$to) || Mark.none)))\n    selection.replaceWith(this, node)\n    return this\n  }\n\n  // :: () → Transaction\n  // Delete the selection.\n  deleteSelection() {\n    this.selection.replace(this)\n    return this\n  }\n\n  // :: (string, from: ?number, to: ?number) → Transaction\n  // Replace the given range, or the selection if no range is given,\n  // with a text node containing the given string.\n  insertText(text, from, to = from) {\n    let schema = this.doc.type.schema\n    if (from == null) {\n      if (!text) return this.deleteSelection()\n      return this.replaceSelectionWith(schema.text(text), true)\n    } else {\n      if (!text) return this.deleteRange(from, to)\n      let marks = this.storedMarks\n      if (!marks) {\n        let $from = this.doc.resolve(from)\n        marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to))\n      }\n      return this.replaceRangeWith(from, to, schema.text(text, marks))\n    }\n  }\n\n  // :: (union<string, Plugin, PluginKey>, any) → Transaction\n  // Store a metadata property in this transaction, keyed either by\n  // name or by plugin.\n  setMeta(key, value) {\n    this.meta[typeof key == \"string\" ? key : key.key] = value\n    return this\n  }\n\n  // :: (union<string, Plugin, PluginKey>) → any\n  // Retrieve a metadata property for a given name or plugin.\n  getMeta(key) {\n    return this.meta[typeof key == \"string\" ? key : key.key]\n  }\n\n  // :: bool\n  // Returns true if this transaction doesn't contain any metadata,\n  // and can thus safely be extended.\n  get isGeneric() {\n    for (let _ in this.meta) return false\n    return true\n  }\n\n  // :: () → Transaction\n  // Indicate that the editor should scroll the selection into view\n  // when updated to the state produced by this transaction.\n  scrollIntoView() {\n    this.updated |= UPDATED_SCROLL\n    return this\n  }\n\n  get scrolledIntoView() {\n    return (this.updated & UPDATED_SCROLL) > 0\n  }\n}\n","import {Node} from \"prosemirror-model\"\n\nimport {Selection} from \"./selection\"\nimport {Transaction} from \"./transaction\"\n\nfunction bind(f, self) {\n  return !self || !f ? f : f.bind(self)\n}\n\nclass FieldDesc {\n  constructor(name, desc, self) {\n    this.name = name\n    this.init = bind(desc.init, self)\n    this.apply = bind(desc.apply, self)\n  }\n}\n\nconst baseFields = [\n  new FieldDesc(\"doc\", {\n    init(config) { return config.doc || config.schema.topNodeType.createAndFill() },\n    apply(tr) { return tr.doc }\n  }),\n\n  new FieldDesc(\"selection\", {\n    init(config, instance) { return config.selection || Selection.atStart(instance.doc) },\n    apply(tr) { return tr.selection }\n  }),\n\n  new FieldDesc(\"storedMarks\", {\n    init(config) { return config.storedMarks || null },\n    apply(tr, _marks, _old, state) { return state.selection.$cursor ? tr.storedMarks : null }\n  }),\n\n  new FieldDesc(\"scrollToSelection\", {\n    init() { return 0 },\n    apply(tr, prev) { return tr.scrolledIntoView ? prev + 1 : prev }\n  })\n]\n\n// Object wrapping the part of a state object that stays the same\n// across transactions. Stored in the state's `config` property.\nclass Configuration {\n  constructor(schema, plugins) {\n    this.schema = schema\n    this.fields = baseFields.concat()\n    this.plugins = []\n    this.pluginsByKey = Object.create(null)\n    if (plugins) plugins.forEach(plugin => {\n      if (this.pluginsByKey[plugin.key])\n        throw new RangeError(\"Adding different instances of a keyed plugin (\" + plugin.key + \")\")\n      this.plugins.push(plugin)\n      this.pluginsByKey[plugin.key] = plugin\n      if (plugin.spec.state)\n        this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin))\n    })\n  }\n}\n\n// ::- The state of a ProseMirror editor is represented by an object\n// of this type. A state is a persistent data structure—it isn't\n// updated, but rather a new state value is computed from an old one\n// using the [`apply`](#state.EditorState.apply) method.\n//\n// A state holds a number of built-in fields, and plugins can\n// [define](#state.PluginSpec.state) additional fields.\nexport class EditorState {\n  constructor(config) {\n    this.config = config\n  }\n\n  // doc:: Node\n  // The current document.\n\n  // selection:: Selection\n  // The selection.\n\n  // storedMarks:: ?[Mark]\n  // A set of marks to apply to the next input. Will be null when\n  // no explicit marks have been set.\n\n  // :: Schema\n  // The schema of the state's document.\n  get schema() {\n    return this.config.schema\n  }\n\n  // :: [Plugin]\n  // The plugins that are active in this state.\n  get plugins() {\n    return this.config.plugins\n  }\n\n  // :: (Transaction) → EditorState\n  // Apply the given transaction to produce a new state.\n  apply(tr) {\n    return this.applyTransaction(tr).state\n  }\n\n  // : (Transaction) → ?Transaction\n  filterTransaction(tr, ignore = -1) {\n    for (let i = 0; i < this.config.plugins.length; i++) if (i != ignore) {\n      let plugin = this.config.plugins[i]\n      if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this))\n        return false\n    }\n    return true\n  }\n\n  // :: (Transaction) → {state: EditorState, transactions: [Transaction]}\n  // Verbose variant of [`apply`](#state.EditorState.apply) that\n  // returns the precise transactions that were applied (which might\n  // be influenced by the [transaction\n  // hooks](#state.PluginSpec.filterTransaction) of\n  // plugins) along with the new state.\n  applyTransaction(rootTr) {\n    if (!this.filterTransaction(rootTr)) return {state: this, transactions: []}\n\n    let trs = [rootTr], newState = this.applyInner(rootTr), seen = null\n    // This loop repeatedly gives plugins a chance to respond to\n    // transactions as new transactions are added, making sure to only\n    // pass the transactions the plugin did not see before.\n    outer: for (;;) {\n      let haveNew = false\n      for (let i = 0; i < this.config.plugins.length; i++) {\n        let plugin = this.config.plugins[i]\n        if (plugin.spec.appendTransaction) {\n          let n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this\n          let tr = n < trs.length &&\n              plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState)\n          if (tr && newState.filterTransaction(tr, i)) {\n            tr.setMeta(\"appendedTransaction\", rootTr)\n            if (!seen) {\n              seen = []\n              for (let j = 0; j < this.config.plugins.length; j++)\n                seen.push(j < i ? {state: newState, n: trs.length} : {state: this, n: 0})\n            }\n            trs.push(tr)\n            newState = newState.applyInner(tr)\n            haveNew = true\n          }\n          if (seen) seen[i] = {state: newState, n: trs.length}\n        }\n      }\n      if (!haveNew) return {state: newState, transactions: trs}\n    }\n  }\n\n  // : (Transaction) → EditorState\n  applyInner(tr) {\n    if (!tr.before.eq(this.doc)) throw new RangeError(\"Applying a mismatched transaction\")\n    let newInstance = new EditorState(this.config), fields = this.config.fields\n    for (let i = 0; i < fields.length; i++) {\n      let field = fields[i]\n      newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance)\n    }\n    for (let i = 0; i < applyListeners.length; i++) applyListeners[i](this, tr, newInstance)\n    return newInstance\n  }\n\n  // :: Transaction\n  // Start a [transaction](#state.Transaction) from this state.\n  get tr() { return new Transaction(this) }\n\n  // :: (Object) → EditorState\n  // Create a new state.\n  //\n  //   config::- Configuration options. Must contain `schema` or `doc` (or both).\n  //\n  //      schema:: ?Schema\n  //      The schema to use.\n  //\n  //      doc:: ?Node\n  //      The starting document.\n  //\n  //      selection:: ?Selection\n  //      A valid selection in the document.\n  //\n  //      storedMarks:: ?[Mark]\n  //      The initial set of [stored marks](#state.EditorState.storedMarks).\n  //\n  //      plugins:: ?[Plugin]\n  //      The plugins that should be active in this state.\n  static create(config) {\n    let $config = new Configuration(config.schema || config.doc.type.schema, config.plugins)\n    let instance = new EditorState($config)\n    for (let i = 0; i < $config.fields.length; i++)\n      instance[$config.fields[i].name] = $config.fields[i].init(config, instance)\n    return instance\n  }\n\n  // :: (Object) → EditorState\n  // Create a new state based on this one, but with an adjusted set of\n  // active plugins. State fields that exist in both sets of plugins\n  // are kept unchanged. Those that no longer exist are dropped, and\n  // those that are new are initialized using their\n  // [`init`](#state.StateField.init) method, passing in the new\n  // configuration object..\n  //\n  //   config::- configuration options\n  //\n  //     schema:: ?Schema\n  //     New schema to use.\n  //\n  //     plugins:: ?[Plugin]\n  //     New set of active plugins.\n  reconfigure(config) {\n    let $config = new Configuration(config.schema || this.schema, config.plugins)\n    let fields = $config.fields, instance = new EditorState($config)\n    for (let i = 0; i < fields.length; i++) {\n      let name = fields[i].name\n      instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance)\n    }\n    return instance\n  }\n\n  // :: (?union<Object<Plugin>, string, number>) → Object\n  // Serialize this state to JSON. If you want to serialize the state\n  // of plugins, pass an object mapping property names to use in the\n  // resulting JSON object to plugin objects. The argument may also be\n  // a string or number, in which case it is ignored, to support the\n  // way `JSON.stringify` calls `toString` methods.\n  toJSON(pluginFields) {\n    let result = {doc: this.doc.toJSON(), selection: this.selection.toJSON()}\n    if (this.storedMarks) result.storedMarks = this.storedMarks.map(m => m.toJSON())\n    if (pluginFields && typeof pluginFields == 'object') for (let prop in pluginFields) {\n      if (prop == \"doc\" || prop == \"selection\")\n        throw new RangeError(\"The JSON fields `doc` and `selection` are reserved\")\n      let plugin = pluginFields[prop], state = plugin.spec.state\n      if (state && state.toJSON) result[prop] = state.toJSON.call(plugin, this[plugin.key])\n    }\n    return result\n  }\n\n  // :: (Object, Object, ?Object<Plugin>) → EditorState\n  // Deserialize a JSON representation of a state. `config` should\n  // have at least a `schema` field, and should contain array of\n  // plugins to initialize the state with. `pluginFields` can be used\n  // to deserialize the state of plugins, by associating plugin\n  // instances with the property names they use in the JSON object.\n  //\n  //   config::- configuration options\n  //\n  //     schema:: Schema\n  //     The schema to use.\n  //\n  //     plugins:: ?[Plugin]\n  //     The set of active plugins.\n  static fromJSON(config, json, pluginFields) {\n    if (!json) throw new RangeError(\"Invalid input for EditorState.fromJSON\")\n    if (!config.schema) throw new RangeError(\"Required config field 'schema' missing\")\n    let $config = new Configuration(config.schema, config.plugins)\n    let instance = new EditorState($config)\n    $config.fields.forEach(field => {\n      if (field.name == \"doc\") {\n        instance.doc = Node.fromJSON(config.schema, json.doc)\n      } else if (field.name == \"selection\") {\n        instance.selection = Selection.fromJSON(instance.doc, json.selection)\n      } else if (field.name == \"storedMarks\") {\n        if (json.storedMarks) instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON)\n      } else {\n        if (pluginFields) for (let prop in pluginFields) {\n          let plugin = pluginFields[prop], state = plugin.spec.state\n          if (plugin.key == field.name && state && state.fromJSON &&\n              Object.prototype.hasOwnProperty.call(json, prop)) {\n            // This field belongs to a plugin mapped to a JSON field, read it from there.\n            instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance)\n            return\n          }\n        }\n        instance[field.name] = field.init(config, instance)\n      }\n    })\n    return instance\n  }\n\n  // Kludge to allow the view to track mappings between different\n  // instances of a state.\n  static addApplyListener(f) {\n    applyListeners.push(f)\n  }\n  static removeApplyListener(f) {\n    let found = applyListeners.indexOf(f)\n    if (found > -1) applyListeners.splice(found, 1)\n  }\n}\n\nconst applyListeners = []\n","// PluginSpec:: interface\n//\n// This is the type passed to the [`Plugin`](#state.Plugin)\n// constructor. It provides a definition for a plugin.\n//\n//   props:: ?EditorProps\n//   The [view props](#view.EditorProps) added by this plugin. Props\n//   that are functions will be bound to have the plugin instance as\n//   their `this` binding.\n//\n//   state:: ?StateField<any>\n//   Allows a plugin to define a [state field](#state.StateField), an\n//   extra slot in the state object in which it can keep its own data.\n//\n//   key:: ?PluginKey\n//   Can be used to make this a keyed plugin. You can have only one\n//   plugin with a given key in a given state, but it is possible to\n//   access the plugin's configuration and state through the key,\n//   without having access to the plugin instance object.\n//\n//   view:: ?(EditorView) → Object\n//   When the plugin needs to interact with the editor view, or\n//   set something up in the DOM, use this field. The function\n//   will be called when the plugin's state is associated with an\n//   editor view.\n//\n//     return::-\n//     Should return an object with the following optional\n//     properties:\n//\n//       update:: ?(view: EditorView, prevState: EditorState)\n//       Called whenever the view's state is updated.\n//\n//       destroy:: ?()\n//       Called when the view is destroyed or receives a state\n//       with different plugins.\n//\n//   filterTransaction:: ?(Transaction, EditorState) → bool\n//   When present, this will be called before a transaction is\n//   applied by the state, allowing the plugin to cancel it (by\n//   returning false).\n//\n//   appendTransaction:: ?(transactions: [Transaction], oldState: EditorState, newState: EditorState) → ?Transaction\n//   Allows the plugin to append another transaction to be applied\n//   after the given array of transactions. When another plugin\n//   appends a transaction after this was called, it is called again\n//   with the new state and new transactions—but only the new\n//   transactions, i.e. it won't be passed transactions that it\n//   already saw.\n\nfunction bindProps(obj, self, target) {\n  for (let prop in obj) {\n    let val = obj[prop]\n    if (val instanceof Function) val = val.bind(self)\n    else if (prop == \"handleDOMEvents\") val = bindProps(val, self, {})\n    target[prop] = val\n  }\n  return target\n}\n\n// ::- Plugins bundle functionality that can be added to an editor.\n// They are part of the [editor state](#state.EditorState) and\n// may influence that state and the view that contains it.\nexport class Plugin {\n  // :: (PluginSpec)\n  // Create a plugin.\n  constructor(spec) {\n    // :: EditorProps\n    // The [props](#view.EditorProps) exported by this plugin.\n    this.props = {}\n    if (spec.props) bindProps(spec.props, this, this.props)\n    // :: Object\n    // The plugin's [spec object](#state.PluginSpec).\n    this.spec = spec\n    this.key = spec.key ? spec.key.key : createKey(\"plugin\")\n  }\n\n  // :: (EditorState) → any\n  // Extract the plugin's state field from an editor state.\n  getState(state) { return state[this.key] }\n}\n\n// StateField:: interface<T>\n// A plugin spec may provide a state field (under its\n// [`state`](#state.PluginSpec.state) property) of this type, which\n// describes the state it wants to keep. Functions provided here are\n// always called with the plugin instance as their `this` binding.\n//\n//   init:: (config: Object, instance: EditorState) → T\n//   Initialize the value of the field. `config` will be the object\n//   passed to [`EditorState.create`](#state.EditorState^create). Note\n//   that `instance` is a half-initialized state instance, and will\n//   not have values for plugin fields initialized after this one.\n//\n//   apply:: (tr: Transaction, value: T, oldState: EditorState, newState: EditorState) → T\n//   Apply the given transaction to this state field, producing a new\n//   field value. Note that the `newState` argument is again a partially\n//   constructed state does not yet contain the state from plugins\n//   coming after this one.\n//\n//   toJSON:: ?(value: T) → *\n//   Convert this field to JSON. Optional, can be left off to disable\n//   JSON serialization for the field.\n//\n//   fromJSON:: ?(config: Object, value: *, state: EditorState) → T\n//   Deserialize the JSON representation of this field. Note that the\n//   `state` argument is again a half-initialized state.\n\nconst keys = Object.create(null)\n\nfunction createKey(name) {\n  if (name in keys) return name + \"$\" + ++keys[name]\n  keys[name] = 0\n  return name + \"$\"\n}\n\n// ::- A key is used to [tag](#state.PluginSpec.key)\n// plugins in a way that makes it possible to find them, given an\n// editor state. Assigning a key does mean only one plugin of that\n// type can be active in a state.\nexport class PluginKey {\n  // :: (?string)\n  // Create a plugin key.\n  constructor(name = \"key\") { this.key = createKey(name) }\n\n  // :: (EditorState) → ?Plugin\n  // Get the active plugin with this key, if any, from an editor\n  // state.\n  get(state) { return state.config.pluginsByKey[this.key] }\n\n  // :: (EditorState) → ?any\n  // Get the plugin's state from an editor state.\n  getState(state) { return state[this.key] }\n}\n","import {joinPoint, canJoin, findWrapping, liftTarget, canSplit, ReplaceAroundStep} from \"prosemirror-transform\"\nimport {Slice, Fragment} from \"prosemirror-model\"\nimport {Selection, TextSelection, NodeSelection, AllSelection} from \"prosemirror-state\"\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Delete the selection, if there is one.\nexport function deleteSelection(state, dispatch) {\n  if (state.selection.empty) return false\n  if (dispatch) dispatch(state.tr.deleteSelection().scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) → bool\n// If the selection is empty and at the start of a textblock, try to\n// reduce the distance between that block and the one before it—if\n// there's a block directly before it that can be joined, join them.\n// If not, try to move the selected block closer to the next one in\n// the document structure by lifting it out of its parent or moving it\n// into a parent of the previous block. Will use the view for accurate\n// (bidi-aware) start-of-textblock detection if given.\nexport function joinBackward(state, dispatch, view) {\n  let {$cursor} = state.selection\n  if (!$cursor || (view ? !view.endOfTextblock(\"backward\", state)\n                        : $cursor.parentOffset > 0))\n    return false\n\n  let $cut = findCutBefore($cursor)\n\n  // If there is no node before this, try to lift\n  if (!$cut) {\n    let range = $cursor.blockRange(), target = range && liftTarget(range)\n    if (target == null) return false\n    if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n    return true\n  }\n\n  let before = $cut.nodeBefore\n  // Apply the joining algorithm\n  if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch))\n    return true\n\n  // If the node below has no content and the node above is\n  // selectable, delete the node below and select the one above.\n  if ($cursor.parent.content.size == 0 &&\n      (textblockAt(before, \"end\") || NodeSelection.isSelectable(before))) {\n    if (dispatch) {\n      let tr = state.tr.deleteRange($cursor.before(), $cursor.after())\n      tr.setSelection(textblockAt(before, \"end\") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1)\n                      : NodeSelection.create(tr.doc, $cut.pos - before.nodeSize))\n      dispatch(tr.scrollIntoView())\n    }\n    return true\n  }\n\n  // If the node before is an atom, delete it\n  if (before.isAtom && $cut.depth == $cursor.depth - 1) {\n    if (dispatch) dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView())\n    return true\n  }\n\n  return false\n}\n\nfunction textblockAt(node, side) {\n  for (; node; node = (side == \"start\" ? node.firstChild : node.lastChild))\n    if (node.isTextblock) return true\n  return false\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) → bool\n// When the selection is empty and at the start of a textblock, select\n// the node before that textblock, if possible. This is intended to be\n// bound to keys like backspace, after\n// [`joinBackward`](#commands.joinBackward) or other deleting\n// commands, as a fall-back behavior when the schema doesn't allow\n// deletion at the selected point.\nexport function selectNodeBackward(state, dispatch, view) {\n  let {$cursor} = state.selection\n  if (!$cursor || (view ? !view.endOfTextblock(\"backward\", state)\n                        : $cursor.parentOffset > 0))\n    return false\n\n  let $cut = findCutBefore($cursor), node = $cut && $cut.nodeBefore\n  if (!node || !NodeSelection.isSelectable(node)) return false\n  if (dispatch)\n    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos - node.nodeSize)).scrollIntoView())\n  return true\n}\n\nfunction findCutBefore($pos) {\n  if (!$pos.parent.type.spec.isolating) for (let i = $pos.depth - 1; i >= 0; i--) {\n    if ($pos.index(i) > 0) return $pos.doc.resolve($pos.before(i + 1))\n    if ($pos.node(i).type.spec.isolating) break\n  }\n  return null\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) → bool\n// If the selection is empty and the cursor is at the end of a\n// textblock, try to reduce or remove the boundary between that block\n// and the one after it, either by joining them or by moving the other\n// block closer to this one in the tree structure. Will use the view\n// for accurate start-of-textblock detection if given.\nexport function joinForward(state, dispatch, view) {\n  let {$cursor} = state.selection\n  if (!$cursor || (view ? !view.endOfTextblock(\"forward\", state)\n                        : $cursor.parentOffset < $cursor.parent.content.size))\n    return false\n\n  let $cut = findCutAfter($cursor)\n\n  // If there is no node after this, there's nothing to do\n  if (!$cut) return false\n\n  let after = $cut.nodeAfter\n  // Try the joining algorithm\n  if (deleteBarrier(state, $cut, dispatch)) return true\n\n  // If the node above has no content and the node below is\n  // selectable, delete the node above and select the one below.\n  if ($cursor.parent.content.size == 0 &&\n      (textblockAt(after, \"start\") || NodeSelection.isSelectable(after))) {\n    if (dispatch) {\n      let tr = state.tr.deleteRange($cursor.before(), $cursor.after())\n      tr.setSelection(textblockAt(after, \"start\") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1)\n                      : NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)))\n      dispatch(tr.scrollIntoView())\n    }\n    return true\n  }\n\n  // If the next node is an atom, delete it\n  if (after.isAtom && $cut.depth == $cursor.depth - 1) {\n    if (dispatch) dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView())\n    return true\n  }\n\n  return false\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) → bool\n// When the selection is empty and at the end of a textblock, select\n// the node coming after that textblock, if possible. This is intended\n// to be bound to keys like delete, after\n// [`joinForward`](#commands.joinForward) and similar deleting\n// commands, to provide a fall-back behavior when the schema doesn't\n// allow deletion at the selected point.\nexport function selectNodeForward(state, dispatch, view) {\n  let {$cursor} = state.selection\n  if (!$cursor || (view ? !view.endOfTextblock(\"forward\", state)\n                        : $cursor.parentOffset < $cursor.parent.content.size))\n    return false\n\n  let $cut = findCutAfter($cursor), node = $cut && $cut.nodeAfter\n  if (!node || !NodeSelection.isSelectable(node)) return false\n  if (dispatch)\n    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos)).scrollIntoView())\n  return true\n}\n\nfunction findCutAfter($pos) {\n  if (!$pos.parent.type.spec.isolating) for (let i = $pos.depth - 1; i >= 0; i--) {\n    let parent = $pos.node(i)\n    if ($pos.index(i) + 1 < parent.childCount) return $pos.doc.resolve($pos.after(i + 1))\n    if (parent.type.spec.isolating) break\n  }\n  return null\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Join the selected block or, if there is a text selection, the\n// closest ancestor block of the selection that can be joined, with\n// the sibling above it.\nexport function joinUp(state, dispatch) {\n  let sel = state.selection, nodeSel = sel instanceof NodeSelection, point\n  if (nodeSel) {\n    if (sel.node.isTextblock || !canJoin(state.doc, sel.from)) return false\n    point = sel.from\n  } else {\n    point = joinPoint(state.doc, sel.from, -1)\n    if (point == null) return false\n  }\n  if (dispatch) {\n    let tr = state.tr.join(point)\n    if (nodeSel) tr.setSelection(NodeSelection.create(tr.doc, point - state.doc.resolve(point).nodeBefore.nodeSize))\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Join the selected block, or the closest ancestor of the selection\n// that can be joined, with the sibling after it.\nexport function joinDown(state, dispatch) {\n  let sel = state.selection, point\n  if (sel instanceof NodeSelection) {\n    if (sel.node.isTextblock || !canJoin(state.doc, sel.to)) return false\n    point = sel.to\n  } else {\n    point = joinPoint(state.doc, sel.to, 1)\n    if (point == null) return false\n  }\n  if (dispatch)\n    dispatch(state.tr.join(point).scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Lift the selected block, or the closest ancestor block of the\n// selection that can be lifted, out of its parent node.\nexport function lift(state, dispatch) {\n  let {$from, $to} = state.selection\n  let range = $from.blockRange($to), target = range && liftTarget(range)\n  if (target == null) return false\n  if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// If the selection is in a node whose type has a truthy\n// [`code`](#model.NodeSpec.code) property in its spec, replace the\n// selection with a newline character.\nexport function newlineInCode(state, dispatch) {\n  let {$head, $anchor} = state.selection\n  if (!$head.parent.type.spec.code || !$head.sameParent($anchor)) return false\n  if (dispatch) dispatch(state.tr.insertText(\"\\n\").scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// When the selection is in a node with a truthy\n// [`code`](#model.NodeSpec.code) property in its spec, create a\n// default block after the code block, and move the cursor there.\nexport function exitCode(state, dispatch) {\n  let {$head, $anchor} = state.selection\n  if (!$head.parent.type.spec.code || !$head.sameParent($anchor)) return false\n  let above = $head.node(-1), after = $head.indexAfter(-1), type = above.contentMatchAt(after).defaultType\n  if (!above.canReplaceWith(after, after, type)) return false\n  if (dispatch) {\n    let pos = $head.after(), tr = state.tr.replaceWith(pos, pos, type.createAndFill())\n    tr.setSelection(Selection.near(tr.doc.resolve(pos), 1))\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// If a block node is selected, create an empty paragraph before (if\n// it is its parent's first child) or after it.\nexport function createParagraphNear(state, dispatch) {\n  let {$from, $to} = state.selection\n  if ($from.parent.inlineContent || $to.parent.inlineContent) return false\n  let type = $from.parent.contentMatchAt($to.indexAfter()).defaultType\n  if (!type || !type.isTextblock) return false\n  if (dispatch) {\n    let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos\n    let tr = state.tr.insert(side, type.createAndFill())\n    tr.setSelection(TextSelection.create(tr.doc, side + 1))\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// If the cursor is in an empty textblock that can be lifted, lift the\n// block.\nexport function liftEmptyBlock(state, dispatch) {\n  let {$cursor} = state.selection\n  if (!$cursor || $cursor.parent.content.size) return false\n  if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {\n    let before = $cursor.before()\n    if (canSplit(state.doc, before)) {\n      if (dispatch) dispatch(state.tr.split(before).scrollIntoView())\n      return true\n    }\n  }\n  let range = $cursor.blockRange(), target = range && liftTarget(range)\n  if (target == null) return false\n  if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Split the parent block of the selection. If the selection is a text\n// selection, also delete its content.\nexport function splitBlock(state, dispatch) {\n  let {$from, $to} = state.selection\n  if (state.selection instanceof NodeSelection && state.selection.node.isBlock) {\n    if (!$from.parentOffset || !canSplit(state.doc, $from.pos)) return false\n    if (dispatch) dispatch(state.tr.split($from.pos).scrollIntoView())\n    return true\n  }\n\n  if (!$from.parent.isBlock) return false\n\n  if (dispatch) {\n    let atEnd = $to.parentOffset == $to.parent.content.size\n    let tr = state.tr\n    if (state.selection instanceof TextSelection) tr.deleteSelection()\n    let deflt = $from.depth == 0 ? null : $from.node(-1).contentMatchAt($from.indexAfter(-1)).defaultType\n    let types = atEnd && deflt ? [{type: deflt}] : null\n    let can = canSplit(tr.doc, $from.pos, 1, types)\n    if (!types && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt && [{type: deflt}])) {\n      types = [{type: deflt}]\n      can = true\n    }\n    if (can) {\n      tr.split(tr.mapping.map($from.pos), 1, types)\n      if (!atEnd && !$from.parentOffset && $from.parent.type != deflt &&\n          $from.node(-1).canReplace($from.index(-1), $from.indexAfter(-1), Fragment.from(deflt.create(), $from.parent)))\n        tr.setNodeMarkup(tr.mapping.map($from.before()), deflt)\n    }\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Acts like [`splitBlock`](#commands.splitBlock), but without\n// resetting the set of active marks at the cursor.\nexport function splitBlockKeepMarks(state, dispatch) {\n  return splitBlock(state, dispatch && (tr => {\n    let marks = state.storedMarks || (state.selection.$to.parentOffset && state.selection.$from.marks())\n    if (marks) tr.ensureMarks(marks)\n    dispatch(tr)\n  }))\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Move the selection to the node wrapping the current selection, if\n// any. (Will not select the document node.)\nexport function selectParentNode(state, dispatch) {\n  let {$from, to} = state.selection, pos\n  let same = $from.sharedDepth(to)\n  if (same == 0) return false\n  pos = $from.before(same)\n  if (dispatch) dispatch(state.tr.setSelection(NodeSelection.create(state.doc, pos)))\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Select the whole document.\nexport function selectAll(state, dispatch) {\n  if (dispatch) dispatch(state.tr.setSelection(new AllSelection(state.doc)))\n  return true\n}\n\nfunction joinMaybeClear(state, $pos, dispatch) {\n  let before = $pos.nodeBefore, after = $pos.nodeAfter, index = $pos.index()\n  if (!before || !after || !before.type.compatibleContent(after.type)) return false\n  if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {\n    if (dispatch) dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView())\n    return true\n  }\n  if (!$pos.parent.canReplace(index, index + 1) || !(after.isTextblock || canJoin(state.doc, $pos.pos)))\n    return false\n  if (dispatch)\n    dispatch(state.tr\n             .clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount))\n             .join($pos.pos)\n             .scrollIntoView())\n  return true\n}\n\nfunction deleteBarrier(state, $cut, dispatch) {\n  let before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match\n  if (before.type.spec.isolating || after.type.spec.isolating) return false\n  if (joinMaybeClear(state, $cut, dispatch)) return true\n\n  if ($cut.parent.canReplace($cut.index(), $cut.index() + 1) &&\n      (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) &&\n      match.matchType(conn[0] || after.type).validEnd) {\n    if (dispatch) {\n      let end = $cut.pos + after.nodeSize, wrap = Fragment.empty\n      for (let i = conn.length - 1; i >= 0; i--)\n        wrap = Fragment.from(conn[i].create(null, wrap))\n      wrap = Fragment.from(before.copy(wrap))\n      let tr = state.tr.step(new ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new Slice(wrap, 1, 0), conn.length, true))\n      let joinAt = end + 2 * conn.length\n      if (canJoin(tr.doc, joinAt)) tr.join(joinAt)\n      dispatch(tr.scrollIntoView())\n    }\n    return true\n  }\n\n  let selAfter = Selection.findFrom($cut, 1)\n  let range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && liftTarget(range)\n  if (target != null && target >= $cut.depth) {\n    if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n    return true\n  }\n\n  return false\n}\n\n// Parameterized commands\n\n// :: (NodeType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Wrap the selection in a node of the given type with the given\n// attributes.\nexport function wrapIn(nodeType, attrs) {\n  return function(state, dispatch) {\n    let {$from, $to} = state.selection\n    let range = $from.blockRange($to), wrapping = range && findWrapping(range, nodeType, attrs)\n    if (!wrapping) return false\n    if (dispatch) dispatch(state.tr.wrap(range, wrapping).scrollIntoView())\n    return true\n  }\n}\n\n// :: (NodeType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Returns a command that tries to set the selected textblocks to the\n// given node type with the given attributes.\nexport function setBlockType(nodeType, attrs) {\n  return function(state, dispatch) {\n    let {from, to} = state.selection\n    let applicable = false\n    state.doc.nodesBetween(from, to, (node, pos) => {\n      if (applicable) return false\n      if (!node.isTextblock || node.hasMarkup(nodeType, attrs)) return\n      if (node.type == nodeType) {\n        applicable = true\n      } else {\n        let $pos = state.doc.resolve(pos), index = $pos.index()\n        applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType)\n      }\n    })\n    if (!applicable) return false\n    if (dispatch) dispatch(state.tr.setBlockType(from, to, nodeType, attrs).scrollIntoView())\n    return true\n  }\n}\n\nfunction markApplies(doc, ranges, type) {\n  for (let i = 0; i < ranges.length; i++) {\n    let {$from, $to} = ranges[i]\n    let can = $from.depth == 0 ? doc.type.allowsMarkType(type) : false\n    doc.nodesBetween($from.pos, $to.pos, node => {\n      if (can) return false\n      can = node.inlineContent && node.type.allowsMarkType(type)\n    })\n    if (can) return true\n  }\n  return false\n}\n\n// :: (MarkType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Create a command function that toggles the given mark with the\n// given attributes. Will return `false` when the current selection\n// doesn't support that mark. This will remove the mark if any marks\n// of that type exist in the selection, or add it otherwise. If the\n// selection is empty, this applies to the [stored\n// marks](#state.EditorState.storedMarks) instead of a range of the\n// document.\nexport function toggleMark(markType, attrs) {\n  return function(state, dispatch) {\n    let {empty, $cursor, ranges} = state.selection\n    if ((empty && !$cursor) || !markApplies(state.doc, ranges, markType)) return false\n    if (dispatch) {\n      if ($cursor) {\n        if (markType.isInSet(state.storedMarks || $cursor.marks()))\n          dispatch(state.tr.removeStoredMark(markType))\n        else\n          dispatch(state.tr.addStoredMark(markType.create(attrs)))\n      } else {\n        let has = false, tr = state.tr\n        for (let i = 0; !has && i < ranges.length; i++) {\n          let {$from, $to} = ranges[i]\n          has = state.doc.rangeHasMark($from.pos, $to.pos, markType)\n        }\n        for (let i = 0; i < ranges.length; i++) {\n          let {$from, $to} = ranges[i]\n          if (has) tr.removeMark($from.pos, $to.pos, markType)\n          else tr.addMark($from.pos, $to.pos, markType.create(attrs))\n        }\n        dispatch(tr.scrollIntoView())\n      }\n    }\n    return true\n  }\n}\n\nfunction wrapDispatchForJoin(dispatch, isJoinable) {\n  return tr => {\n    if (!tr.isGeneric) return dispatch(tr)\n\n    let ranges = []\n    for (let i = 0; i < tr.mapping.maps.length; i++) {\n      let map = tr.mapping.maps[i]\n      for (let j = 0; j < ranges.length; j++)\n        ranges[j] = map.map(ranges[j])\n      map.forEach((_s, _e, from, to) => ranges.push(from, to))\n    }\n\n    // Figure out which joinable points exist inside those ranges,\n    // by checking all node boundaries in their parent nodes.\n    let joinable = []\n    for (let i = 0; i < ranges.length; i += 2) {\n      let from = ranges[i], to = ranges[i + 1]\n      let $from = tr.doc.resolve(from), depth = $from.sharedDepth(to), parent = $from.node(depth)\n      for (let index = $from.indexAfter(depth), pos = $from.after(depth + 1); pos <= to; ++index) {\n        let after = parent.maybeChild(index)\n        if (!after) break\n        if (index && joinable.indexOf(pos) == -1) {\n          let before = parent.child(index - 1)\n          if (before.type == after.type && isJoinable(before, after))\n            joinable.push(pos)\n        }\n        pos += after.nodeSize\n      }\n    }\n    // Join the joinable points\n    joinable.sort((a, b) => a - b)\n    for (let i = joinable.length - 1; i >= 0; i--) {\n      if (canJoin(tr.doc, joinable[i])) tr.join(joinable[i])\n    }\n    dispatch(tr)\n  }\n}\n\n// :: ((state: EditorState, ?(tr: Transaction)) → bool, union<(before: Node, after: Node) → bool, [string]>) → (state: EditorState, ?(tr: Transaction)) → bool\n// Wrap a command so that, when it produces a transform that causes\n// two joinable nodes to end up next to each other, those are joined.\n// Nodes are considered joinable when they are of the same type and\n// when the `isJoinable` predicate returns true for them or, if an\n// array of strings was passed, if their node type name is in that\n// array.\nexport function autoJoin(command, isJoinable) {\n  if (Array.isArray(isJoinable)) {\n    let types = isJoinable\n    isJoinable = node => types.indexOf(node.type.name) > -1\n  }\n  return (state, dispatch) => command(state, dispatch && wrapDispatchForJoin(dispatch, isJoinable))\n}\n\n// :: (...[(EditorState, ?(tr: Transaction), ?EditorView) → bool]) → (EditorState, ?(tr: Transaction), ?EditorView) → bool\n// Combine a number of command functions into a single function (which\n// calls them one by one until one returns true).\nexport function chainCommands(...commands) {\n  return function(state, dispatch, view) {\n    for (let i = 0; i < commands.length; i++)\n      if (commands[i](state, dispatch, view)) return true\n    return false\n  }\n}\n\nlet backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward)\nlet del = chainCommands(deleteSelection, joinForward, selectNodeForward)\n\n// :: Object\n// A basic keymap containing bindings not specific to any schema.\n// Binds the following keys (when multiple commands are listed, they\n// are chained with [`chainCommands`](#commands.chainCommands)):\n//\n// * **Enter** to `newlineInCode`, `createParagraphNear`, `liftEmptyBlock`, `splitBlock`\n// * **Mod-Enter** to `exitCode`\n// * **Backspace** and **Mod-Backspace** to `deleteSelection`, `joinBackward`, `selectNodeBackward`\n// * **Delete** and **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\n// * **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\n// * **Mod-a** to `selectAll`\nexport let pcBaseKeymap = {\n  \"Enter\": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),\n  \"Mod-Enter\": exitCode,\n  \"Backspace\": backspace,\n  \"Mod-Backspace\": backspace,\n  \"Delete\": del,\n  \"Mod-Delete\": del,\n  \"Mod-a\": selectAll\n}\n\n// :: Object\n// A copy of `pcBaseKeymap` that also binds **Ctrl-h** like Backspace,\n// **Ctrl-d** like Delete, **Alt-Backspace** like Ctrl-Backspace, and\n// **Ctrl-Alt-Backspace**, **Alt-Delete**, and **Alt-d** like\n// Ctrl-Delete.\nexport let macBaseKeymap = {\n  \"Ctrl-h\": pcBaseKeymap[\"Backspace\"],\n  \"Alt-Backspace\": pcBaseKeymap[\"Mod-Backspace\"],\n  \"Ctrl-d\": pcBaseKeymap[\"Delete\"],\n  \"Ctrl-Alt-Backspace\": pcBaseKeymap[\"Mod-Delete\"],\n  \"Alt-Delete\": pcBaseKeymap[\"Mod-Delete\"],\n  \"Alt-d\": pcBaseKeymap[\"Mod-Delete\"]\n}\nfor (let key in pcBaseKeymap) macBaseKeymap[key] = pcBaseKeymap[key]\n\n// declare global: os, navigator\nconst mac = typeof navigator != \"undefined\" ? /Mac/.test(navigator.platform)\n          : typeof os != \"undefined\" ? os.platform() == \"darwin\" : false\n\n// :: Object\n// Depending on the detected platform, this will hold\n// [`pcBasekeymap`](#commands.pcBaseKeymap) or\n// [`macBaseKeymap`](#commands.macBaseKeymap).\nexport let baseKeymap = mac ? macBaseKeymap : pcBaseKeymap\n","import {Plugin} from \"prosemirror-state\"\nimport {dropPoint} from \"prosemirror-transform\"\n\nexport function dropCursor(options = {}) {\n  return new Plugin({\n    view(editorView) { return new DropCursorView(editorView, options) }\n  })\n}\n\nclass DropCursorView {\n  constructor(editorView, options) {\n    this.editorView = editorView\n    this.width = options.width || 1\n    this.color = options.color || \"black\"\n    this.cursorPos = null\n    this.element = null\n    this.timeout = null\n\n    this.handlers = [\"dragover\", \"dragend\", \"drop\", \"dragleave\"].map(name => {\n      let handler = e => this[name](e)\n      editorView.dom.addEventListener(name, handler)\n      return {name, handler}\n    })\n  }\n\n  destroy() {\n    this.handlers.forEach(({name, handler}) => this.editorView.dom.removeEventListener(name, handler))\n  }\n\n  update(editorView, prevState) {\n    if (this.cursorPos != null && prevState.doc != editorView.state.doc) this.updateOverlay()\n  }\n\n  setCursor(pos) {\n    if (pos == this.cursorPos) return\n    this.cursorPos = pos\n    if (pos == null) {\n      this.element.remove()\n      this.element = null\n    } else {\n      this.updateOverlay()\n    }\n  }\n\n  updateOverlay() {\n    let $pos = this.editorView.state.doc.resolve(this.cursorPos), rect\n    if (!$pos.parent.inlineContent) {\n      let before = $pos.nodeBefore, after = $pos.nodeAfter\n      if (before || after) {\n        let nodeRect = this.editorView.nodeDOM(this.cursorPos - (before ?  before.nodeSize : 0)).getBoundingClientRect()\n        let top = before ? nodeRect.bottom : nodeRect.top\n        if (before && after)\n          top = (top + this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top) / 2\n        rect = {left: nodeRect.left, right: nodeRect.right, top: top - this.width / 2, bottom: top + this.width / 2}\n      }\n    }\n    if (!rect) {\n      let coords = this.editorView.coordsAtPos(this.cursorPos)\n      rect = {left: coords.left - this.width / 2, right: coords.left + this.width / 2, top: coords.top, bottom: coords.bottom}\n    }\n\n    let parent = this.editorView.dom.offsetParent\n    if (!this.element) {\n      this.element = parent.appendChild(document.createElement(\"div\"))\n      this.element.style.cssText = \"position: absolute; z-index: 50; pointer-events: none; background-color: \" + this.color\n    }\n    let parentRect = parent == document.body && getComputedStyle(parent).position == \"static\"\n        ? {left: -pageXOffset, top: -pageYOffset} : parent.getBoundingClientRect()\n    this.element.style.left = (rect.left - parentRect.left) + \"px\"\n    this.element.style.top = (rect.top - parentRect.top) + \"px\"\n    this.element.style.width = (rect.right - rect.left) + \"px\"\n    this.element.style.height = (rect.bottom - rect.top) + \"px\"\n  }\n\n  scheduleRemoval(timeout) {\n    clearTimeout(this.timeout)\n    this.timeout = setTimeout(() => this.setCursor(null), timeout)\n  }\n\n  dragover(event) {\n    let pos = this.editorView.posAtCoords({left: event.clientX, top: event.clientY})\n    if (pos) {\n      let target = pos.pos\n      if (this.editorView.dragging && this.editorView.dragging.slice) {\n        target = dropPoint(this.editorView.state.doc, target, this.editorView.dragging.slice)\n        if (target == null) target = pos.pos\n      }\n      this.setCursor(target)\n      this.scheduleRemoval(5000)\n    }\n  }\n\n  dragend() {\n    this.scheduleRemoval(20)\n  }\n\n  drop() {\n    this.scheduleRemoval(20)\n  }\n\n  dragleave(event) {\n    if (event.target == this.editorView.dom || !this.editorView.dom.contains(event.relatedTarget))\n      this.setCursor(null)\n  }\n}\n","var base = {\n  8: \"Backspace\",\n  9: \"Tab\",\n  10: \"Enter\",\n  12: \"NumLock\",\n  13: \"Enter\",\n  16: \"Shift\",\n  17: \"Control\",\n  18: \"Alt\",\n  20: \"CapsLock\",\n  27: \"Escape\",\n  32: \" \",\n  33: \"PageUp\",\n  34: \"PageDown\",\n  35: \"End\",\n  36: \"Home\",\n  37: \"ArrowLeft\",\n  38: \"ArrowUp\",\n  39: \"ArrowRight\",\n  40: \"ArrowDown\",\n  44: \"PrintScreen\",\n  45: \"Insert\",\n  46: \"Delete\",\n  59: \";\",\n  61: \"=\",\n  91: \"Meta\",\n  92: \"Meta\",\n  106: \"*\",\n  107: \"+\",\n  108: \",\",\n  109: \"-\",\n  110: \".\",\n  111: \"/\",\n  144: \"NumLock\",\n  145: \"ScrollLock\",\n  160: \"Shift\",\n  161: \"Shift\",\n  162: \"Control\",\n  163: \"Control\",\n  164: \"Alt\",\n  165: \"Alt\",\n  173: \"-\",\n  186: \";\",\n  187: \"=\",\n  188: \",\",\n  189: \"-\",\n  190: \".\",\n  191: \"/\",\n  192: \"`\",\n  219: \"[\",\n  220: \"\\\\\",\n  221: \"]\",\n  222: \"'\",\n  229: \"q\"\n}\nvar shift = {\n  48: \")\",\n  49: \"!\",\n  50: \"@\",\n  51: \"#\",\n  52: \"$\",\n  53: \"%\",\n  54: \"^\",\n  55: \"&\",\n  56: \"*\",\n  57: \"(\",\n  59: \";\",\n  61: \"+\",\n  173: \"_\",\n  186: \":\",\n  187: \"+\",\n  188: \"<\",\n  189: \"_\",\n  190: \">\",\n  191: \"?\",\n  192: \"~\",\n  219: \"{\",\n  220: \"|\",\n  221: \"}\",\n  222: \"\\\"\",\n  229: \"Q\"\n}\n\nvar chrome = typeof navigator != \"undefined\" && /Chrome\\/(\\d+)/.exec(navigator.userAgent)\nvar safari = typeof navigator != \"undefined\" && /Apple Computer/.test(navigator.vendor)\nvar gecko = typeof navigator != \"undefined\" && /Gecko\\/\\d+/.test(navigator.userAgent)\nvar mac = typeof navigator != \"undefined\" && /Mac/.test(navigator.platform)\nvar brokenModifierNames = chrome && (mac || +chrome[1] < 57) || gecko && mac\n\n// Fill in the digit keys\nfor (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i)\n\n// The function keys\nfor (var i = 1; i <= 24; i++) base[i + 111] = \"F\" + i\n\n// And the alphabetic keys\nfor (var i = 65; i <= 90; i++) {\n  base[i] = String.fromCharCode(i + 32)\n  shift[i] = String.fromCharCode(i)\n}\n\n// For each code that doesn't have a shift-equivalent, copy the base name\nfor (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code]\n\nfunction keyName(event) {\n  // Don't trust event.key in Chrome when there are modifiers until\n  // they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838\n  var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||\n    safari && event.shiftKey && event.key && event.key.length == 1\n  var name = (!ignoreKey && event.key) ||\n    (event.shiftKey ? shift : base)[event.keyCode] ||\n    event.key || \"Unidentified\"\n  // Edge sometimes produces wrong names (Issue #3)\n  if (name == \"Esc\") name = \"Escape\"\n  if (name == \"Del\") name = \"Delete\"\n  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/\n  if (name == \"Left\") name = \"ArrowLeft\"\n  if (name == \"Up\") name = \"ArrowUp\"\n  if (name == \"Right\") name = \"ArrowRight\"\n  if (name == \"Down\") name = \"ArrowDown\"\n  return name\n}\n\nmodule.exports = keyName\nkeyName.base = base\nkeyName.shift = shift\n","import keyName from \"w3c-keyname\"\nimport {Plugin} from \"prosemirror-state\"\n\n// declare global: navigator\n\nconst mac = typeof navigator != \"undefined\" ? /Mac/.test(navigator.platform) : false\n\nfunction normalizeKeyName(name) {\n  let parts = name.split(/-(?!$)/), result = parts[parts.length - 1]\n  if (result == \"Space\") result = \" \"\n  let alt, ctrl, shift, meta\n  for (let i = 0; i < parts.length - 1; i++) {\n    let mod = parts[i]\n    if (/^(cmd|meta|m)$/i.test(mod)) meta = true\n    else if (/^a(lt)?$/i.test(mod)) alt = true\n    else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true\n    else if (/^s(hift)?$/i.test(mod)) shift = true\n    else if (/^mod$/i.test(mod)) { if (mac) meta = true; else ctrl = true }\n    else throw new Error(\"Unrecognized modifier name: \" + mod)\n  }\n  if (alt) result = \"Alt-\" + result\n  if (ctrl) result = \"Ctrl-\" + result\n  if (meta) result = \"Meta-\" + result\n  if (shift) result = \"Shift-\" + result\n  return result\n}\n\nfunction normalize(map) {\n  let copy = Object.create(null)\n  for (let prop in map) copy[normalizeKeyName(prop)] = map[prop]\n  return copy\n}\n\nfunction modifiers(name, event, shift) {\n  if (event.altKey) name = \"Alt-\" + name\n  if (event.ctrlKey) name = \"Ctrl-\" + name\n  if (event.metaKey) name = \"Meta-\" + name\n  if (shift !== false && event.shiftKey) name = \"Shift-\" + name\n  return name\n}\n\n// :: (Object) → Plugin\n// Create a keymap plugin for the given set of bindings.\n//\n// Bindings should map key names to [command](#commands)-style\n// functions, which will be called with `(EditorState, dispatch,\n// EditorView)` arguments, and should return true when they've handled\n// the key. Note that the view argument isn't part of the command\n// protocol, but can be used as an escape hatch if a binding needs to\n// directly interact with the UI.\n//\n// Key names may be strings like `\"Shift-Ctrl-Enter\"`—a key\n// identifier prefixed with zero or more modifiers. Key identifiers\n// are based on the strings that can appear in\n// [`KeyEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).\n// Use lowercase letters to refer to letter keys (or uppercase letters\n// if you want shift to be held). You may use `\"Space\"` as an alias\n// for the `\" \"` name.\n//\n// Modifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or\n// `a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or\n// `Meta-`) are recognized. For characters that are created by holding\n// shift, the `Shift-` prefix is implied, and should not be added\n// explicitly.\n//\n// You can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on\n// other platforms.\n//\n// You can add multiple keymap plugins to an editor. The order in\n// which they appear determines their precedence (the ones early in\n// the array get to dispatch first).\nexport function keymap(bindings) {\n  return new Plugin({props: {handleKeyDown: keydownHandler(bindings)}})\n}\n\n// :: (Object) → (view: EditorView, event: dom.Event) → bool\n// Given a set of bindings (using the same format as\n// [`keymap`](#keymap.keymap), return a [keydown\n// handler](#view.EditorProps.handleKeyDown) handles them.\nexport function keydownHandler(bindings) {\n  let map = normalize(bindings)\n  return function(view, event) {\n    let name = keyName(event), isChar = name.length == 1 && name != \" \", baseName\n    let direct = map[modifiers(name, event, !isChar)]\n    if (direct && direct(view.state, view.dispatch, view)) return true\n    if (isChar && (event.shiftKey || event.altKey || event.metaKey) &&\n        (baseName = keyName.base[event.keyCode]) && baseName != name) {\n      let fromCode = map[modifiers(baseName, event, true)]\n      if (fromCode && fromCode(view.state, view.dispatch, view)) return true\n    }\n    return false\n  }\n}\n","const result = {}\nexport default result\n\nif (typeof navigator != \"undefined\" && typeof document != \"undefined\") {\n  const ie_edge = /Edge\\/(\\d+)/.exec(navigator.userAgent)\n  const ie_upto10 = /MSIE \\d/.test(navigator.userAgent)\n  const ie_11up = /Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(navigator.userAgent)\n\n  result.mac = /Mac/.test(navigator.platform)\n  let ie = result.ie = !!(ie_upto10 || ie_11up || ie_edge)\n  result.ie_version = ie_upto10 ? document.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : null\n  result.gecko = !ie && /gecko\\/(\\d+)/i.test(navigator.userAgent)\n  result.gecko_version = result.gecko && +(/Firefox\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1]\n  let chrome = !ie && /Chrome\\/(\\d+)/.exec(navigator.userAgent)\n  result.chrome = !!chrome\n  result.chrome_version = chrome && +chrome[1]\n  result.ios = !ie && /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent)\n  result.android = /Android \\d/.test(navigator.userAgent)\n  result.webkit = !ie && 'WebkitAppearance' in document.documentElement.style\n  result.safari = /Apple Computer/.test(navigator.vendor)\n  result.webkit_version = result.webkit && +(/\\bAppleWebKit\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1]\n}\n","import browser from \"./browser\"\n\nexport const domIndex = function(node) {\n  for (var index = 0;; index++) {\n    node = node.previousSibling\n    if (!node) return index\n  }\n}\n\nexport const parentNode = function(node) {\n  let parent = node.parentNode\n  return parent && parent.nodeType == 11 ? parent.host : parent\n}\n\nexport const textRange = function(node, from, to) {\n  let range = document.createRange()\n  range.setEnd(node, to == null ? node.nodeValue.length : to)\n  range.setStart(node, from || 0)\n  return range\n}\n\n// Scans forward and backward through DOM positions equivalent to the\n// given one to see if the two are in the same place (i.e. after a\n// text node vs at the end of that text node)\nexport const isEquivalentPosition = function(node, off, targetNode, targetOff) {\n  return targetNode && (scanFor(node, off, targetNode, targetOff, -1) ||\n                        scanFor(node, off, targetNode, targetOff, 1))\n}\n\nconst atomElements = /^(img|br|input|textarea|hr)$/i\n\nfunction scanFor(node, off, targetNode, targetOff, dir) {\n  for (;;) {\n    if (node == targetNode && off == targetOff) return true\n    if (off == (dir < 0 ? 0 : nodeSize(node)) || node.nodeType == 3 && node.nodeValue == \"\\ufeff\") {\n      let parent = node.parentNode\n      if (parent.nodeType != 1 || hasBlockDesc(node) || atomElements.test(node.nodeName) || node.contentEditable == \"false\")\n        return false\n      off = domIndex(node) + (dir < 0 ? 0 : 1)\n      node = parent\n    } else if (node.nodeType == 1) {\n      node = node.childNodes[off + (dir < 0 ? -1 : 0)]\n      off = dir < 0 ? nodeSize(node) : 0\n    } else {\n      return false\n    }\n  }\n}\n\nfunction nodeSize(node) {\n  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length\n}\n\nfunction hasBlockDesc(dom) {\n  let desc = dom.pmViewDesc\n  return desc && desc.node && desc.node.isBlock\n}\n\n// Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523\n// (isCollapsed inappropriately returns true in shadow dom)\nexport const selectionCollapsed = function(domSel) {\n  let collapsed = domSel.isCollapsed\n  if (collapsed && browser.chrome && domSel.rangeCount && !domSel.getRangeAt(0).collapsed)\n    collapsed = false\n  return collapsed\n}\n","import {textRange, parentNode} from \"./dom\"\n\nfunction windowRect(win) {\n  return {left: 0, right: win.innerWidth,\n          top: 0, bottom: win.innerHeight}\n}\n\nfunction getSide(value, side) {\n  return typeof value == \"number\" ? value : value[side]\n}\n\nexport function scrollRectIntoView(view, rect, startDOM) {\n  let scrollThreshold = view.someProp(\"scrollThreshold\") || 0, scrollMargin = view.someProp(\"scrollMargin\") || 5\n  let doc = view.dom.ownerDocument, win = doc.defaultView\n  for (let parent = startDOM || view.dom;; parent = parentNode(parent)) {\n    if (!parent) break\n    if (parent.nodeType != 1) continue\n    let atTop = parent == doc.body || parent.nodeType != 1\n    let bounding = atTop ? windowRect(win) : parent.getBoundingClientRect()\n    let moveX = 0, moveY = 0\n    if (rect.top < bounding.top + getSide(scrollThreshold, \"top\"))\n      moveY = -(bounding.top - rect.top + getSide(scrollMargin, \"top\"))\n    else if (rect.bottom > bounding.bottom - getSide(scrollThreshold, \"bottom\"))\n      moveY = rect.bottom - bounding.bottom + getSide(scrollMargin, \"bottom\")\n    if (rect.left < bounding.left + getSide(scrollThreshold, \"left\"))\n      moveX = -(bounding.left - rect.left + getSide(scrollMargin, \"left\"))\n    else if (rect.right > bounding.right - getSide(scrollThreshold, \"right\"))\n      moveX = rect.right - bounding.right + getSide(scrollMargin, \"right\")\n    if (moveX || moveY) {\n      if (atTop) {\n        win.scrollBy(moveX, moveY)\n      } else {\n        if (moveY) parent.scrollTop += moveY\n        if (moveX) parent.scrollLeft += moveX\n      }\n    }\n    if (atTop) break\n  }\n}\n\n// Store the scroll position of the editor's parent nodes, along with\n// the top position of an element near the top of the editor, which\n// will be used to make sure the visible viewport remains stable even\n// when the size of the content above changes.\nexport function storeScrollPos(view) {\n  let rect = view.dom.getBoundingClientRect(), startY = Math.max(0, rect.top)\n  let doc = view.dom.ownerDocument\n  let refDOM, refTop\n  for (let x = (rect.left + rect.right) / 2, y = startY + 1;\n       y < Math.min(innerHeight, rect.bottom); y += 5) {\n    let dom = view.root.elementFromPoint(x, y)\n    if (dom == view.dom || !view.dom.contains(dom)) continue\n    let localRect = dom.getBoundingClientRect()\n    if (localRect.top >= startY - 20) {\n      refDOM = dom\n      refTop = localRect.top\n      break\n    }\n  }\n  let stack = []\n  for (let dom = view.dom; dom; dom = parentNode(dom)) {\n    stack.push({dom, top: dom.scrollTop, left: dom.scrollLeft})\n    if (dom == doc.body) break\n  }\n  return {refDOM, refTop, stack}\n}\n\n// Reset the scroll position of the editor's parent nodes to that what\n// it was before, when storeScrollPos was called.\nexport function resetScrollPos({refDOM, refTop, stack}) {\n  let newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0\n  let dTop = newRefTop == 0 ? 0 : newRefTop - refTop\n  for (let i = 0; i < stack.length; i++) {\n    let {dom, top, left} = stack[i]\n    if (dom.scrollTop != top + dTop) dom.scrollTop = top + dTop\n    if (dom.scrollLeft != left) dom.scrollLeft = left\n  }\n}\n\nfunction findOffsetInNode(node, coords) {\n  let closest, dxClosest = 2e8, coordsClosest, offset = 0\n  let rowBot = coords.top, rowTop = coords.top\n  for (let child = node.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {\n    let rects\n    if (child.nodeType == 1) rects = child.getClientRects()\n    else if (child.nodeType == 3) rects = textRange(child).getClientRects()\n    else continue\n\n    for (let i = 0; i < rects.length; i++) {\n      let rect = rects[i]\n      if (rect.top <= rowBot && rect.bottom >= rowTop) {\n        rowBot = Math.max(rect.bottom, rowBot)\n        rowTop = Math.min(rect.top, rowTop)\n        let dx = rect.left > coords.left ? rect.left - coords.left\n            : rect.right < coords.left ? coords.left - rect.right : 0\n        if (dx < dxClosest) {\n          closest = child\n          dxClosest = dx\n          coordsClosest = dx && closest.nodeType == 3 ? {left: rect.right < coords.left ? rect.right : rect.left, top: coords.top} : coords\n          if (child.nodeType == 1 && dx)\n            offset = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0)\n          continue\n        }\n      }\n      if (!closest && (coords.left >= rect.right && coords.top >= rect.top ||\n                       coords.left >= rect.left && coords.top >= rect.bottom))\n        offset = childIndex + 1\n    }\n  }\n  if (closest && closest.nodeType == 3) return findOffsetInText(closest, coordsClosest)\n  if (!closest || (dxClosest && closest.nodeType == 1)) return {node, offset}\n  return findOffsetInNode(closest, coordsClosest)\n}\n\nfunction findOffsetInText(node, coords) {\n  let len = node.nodeValue.length\n  let range = document.createRange()\n  for (let i = 0; i < len; i++) {\n    range.setEnd(node, i + 1)\n    range.setStart(node, i)\n    let rect = singleRect(range, 1)\n    if (rect.top == rect.bottom) continue\n    if (rect.left - 1 <= coords.left && rect.right + 1 >= coords.left &&\n        rect.top - 1 <= coords.top && rect.bottom + 1 >= coords.top)\n      return {node, offset: i + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0)}\n  }\n  return {node, offset: 0}\n}\n\nfunction targetKludge(dom, coords) {\n  let parent = dom.parentNode\n  if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left)\n    return parent\n  return dom\n}\n\nfunction posFromElement(view, elt, coords) {\n  if (!view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) return null\n\n  let {node, offset} = findOffsetInNode(elt, coords), bias = -1\n  if (node.nodeType == 1 && !node.firstChild) {\n    let rect = node.getBoundingClientRect()\n    bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1\n  }\n  return view.docView.posFromDOM(node, offset, bias)\n}\n\nfunction posFromCaret(view, node, offset, coords) {\n  // Browser (in caretPosition/RangeFromPoint) will agressively\n  // normalize towards nearby inline nodes. Since we are interested in\n  // positions between block nodes too, we first walk up the hierarchy\n  // of nodes to see if there are block nodes that the coordinates\n  // fall outside of. If so, we take the position before/after that\n  // block. If not, we call `posFromDOM` on the raw node/offset.\n  let outside = -1\n  for (let cur = node;;) {\n    if (cur == view.dom) break\n    let desc = view.docView.nearestDesc(cur, true)\n    if (!desc) return null\n    if (desc.node.isBlock && desc.parent) {\n      let rect = desc.dom.getBoundingClientRect()\n      if (rect.left > coords.left || rect.top > coords.top) outside = desc.posBefore\n      else if (rect.right < coords.left || rect.bottom < coords.top) outside = desc.posAfter\n      else break\n    }\n    cur = desc.dom.parentNode\n  }\n  return outside > -1 ? outside : view.docView.posFromDOM(node, offset)\n}\n\n// Given an x,y position on the editor, get the position in the document.\nexport function posAtCoords(view, coords) {\n  let root = view.root, node, offset\n  if (root.caretPositionFromPoint) {\n    let pos = root.caretPositionFromPoint(coords.left, coords.top)\n    if (pos) ({offsetNode: node, offset} = pos)\n  }\n  if (!node && root.caretRangeFromPoint) {\n    let range = root.caretRangeFromPoint(coords.left, coords.top)\n    if (range) ({startContainer: node, startOffset: offset} = range)\n  }\n\n  let elt = root.elementFromPoint(coords.left, coords.top + 1), pos\n  if (!elt) return null\n  elt = targetKludge(elt, coords)\n  if (node) {\n    // Suspiciously specific kludge to work around caret*FromPoint\n    // never returning a position at the end of the document\n    if (node == view.dom && offset == node.childNodes.length - 1 && node.lastChild.nodeType == 1 &&\n        coords.top > node.lastChild.getBoundingClientRect().bottom)\n      pos = view.state.doc.content.size\n    // Ignore positions directly after a BR, since caret*FromPoint\n    // 'round up' positions that would be more accurately places\n    // before the BR node.\n    else if (offset == 0 || node.nodeType != 1 || node.childNodes[offset - 1].nodeName != \"BR\")\n      pos = posFromCaret(view, node, offset, coords)\n  }\n  if (pos == null) {\n    pos = posFromElement(view, elt, coords)\n    if (pos == null) return null\n  }\n\n  let desc = view.docView.nearestDesc(elt, true)\n  return {pos, inside: desc ? desc.posAtStart - desc.border : -1}\n}\n\nfunction singleRect(object, bias) {\n  let rects = object.getClientRects()\n  return !rects.length ? object.getBoundingClientRect() : rects[bias < 0 ? 0 : rects.length - 1]\n}\n\n// : (EditorView, number) → {left: number, top: number, right: number, bottom: number}\n// Given a position in the document model, get a bounding box of the\n// character at that position, relative to the window.\nexport function coordsAtPos(view, pos) {\n  let {node, offset} = view.docView.domFromPos(pos)\n  let side, rect\n  if (node.nodeType == 3) {\n    if (offset < node.nodeValue.length) {\n      rect = singleRect(textRange(node, offset, offset + 1), -1)\n      side = \"left\"\n    }\n    if ((!rect || rect.left == rect.right) && offset) {\n      rect = singleRect(textRange(node, offset - 1, offset), 1)\n      side = \"right\"\n    }\n  } else if (node.firstChild) {\n    if (offset < node.childNodes.length) {\n      let child = node.childNodes[offset]\n      rect = singleRect(child.nodeType == 3 ? textRange(child) : child, -1)\n      side = \"left\"\n    }\n    if ((!rect || rect.top == rect.bottom) && offset) {\n      let child = node.childNodes[offset - 1]\n      rect = singleRect(child.nodeType == 3 ? textRange(child) : child, 1)\n      side = \"right\"\n    }\n  } else {\n    rect = node.getBoundingClientRect()\n    side = \"left\"\n  }\n  let x = rect[side]\n  return {top: rect.top, bottom: rect.bottom, left: x, right: x}\n}\n\nfunction withFlushedState(view, state, f) {\n  let viewState = view.state, active = view.root.activeElement\n  if (viewState != state || !view.inDOMChange) view.updateState(state)\n  if (active != view.dom) view.focus()\n  try {\n    return f()\n  } finally {\n    if (viewState != state) view.updateState(viewState)\n    if (active != view.dom) active.focus()\n  }\n}\n\n// : (EditorView, number, number)\n// Whether vertical position motion in a given direction\n// from a position would leave a text block.\nfunction endOfTextblockVertical(view, state, dir) {\n  let sel = state.selection\n  let $pos = dir == \"up\" ? sel.$anchor.min(sel.$head) : sel.$anchor.max(sel.$head)\n  if (!$pos.depth) return false\n  return withFlushedState(view, state, () => {\n    let {node: dom} = view.docView.domFromPos($pos.pos)\n    for (;;) {\n      let nearest = view.docView.nearestDesc(dom, true)\n      if (!nearest || nearest.node.isBlock) break\n      dom = nearest.dom.parentNode\n    }\n    let coords = coordsAtPos(view, $pos.pos)\n    for (let child = dom.firstChild; child; child = child.nextSibling) {\n      let boxes\n      if (child.nodeType == 1) boxes = child.getClientRects()\n      else if (child.nodeType == 3) boxes = textRange(child, 0, child.nodeValue.length).getClientRects()\n      else continue\n      for (let i = 0; i < boxes.length; i++) {\n        let box = boxes[i]\n        if (box.bottom > box.top && (dir == \"up\" ? box.bottom < coords.top + 1 : box.top > coords.bottom - 1))\n          return false\n      }\n    }\n    return true\n  })\n}\n\nconst maybeRTL = /[\\u0590-\\u08ac]/\n\nfunction endOfTextblockHorizontal(view, state, dir) {\n  let {$head} = state.selection\n  if (!$head.parent.isTextblock || !$head.depth) return false\n  let offset = $head.parentOffset, atStart = !offset, atEnd = offset == $head.parent.content.size\n  let sel = getSelection()\n  // If the textblock is all LTR, or the browser doesn't support\n  // Selection.modify (Edge), fall back to a primitive approach\n  if (!maybeRTL.test($head.parent.textContent) || !sel.modify)\n    return dir == \"left\" || dir == \"backward\" ? atStart : atEnd\n\n  return withFlushedState(view, state, () => {\n    // This is a huge hack, but appears to be the best we can\n    // currently do: use `Selection.modify` to move the selection by\n    // one character, and see if that moves the cursor out of the\n    // textblock (or doesn't move it at all, when at the start/end of\n    // the document).\n    let oldRange = sel.getRangeAt(0), oldNode = sel.focusNode, oldOff = sel.focusOffset\n    sel.modify(\"move\", dir, \"character\")\n    let parentDOM = view.docView.domAfterPos($head.before())\n    let result = !parentDOM.contains(sel.focusNode.nodeType == 1 ? sel.focusNode : sel.focusNode.parentNode) ||\n        (oldNode == sel.focusNode && oldOff == sel.focusOffset)\n    // Restore the previous selection\n    sel.removeAllRanges()\n    sel.addRange(oldRange)\n    return result\n  })\n}\n\nlet cachedState = null, cachedDir = null, cachedResult = false\nexport function endOfTextblock(view, state, dir) {\n  if (cachedState == state && cachedDir == dir) return cachedResult\n  cachedState = state; cachedDir = dir\n  return cachedResult = dir == \"up\" || dir == \"down\"\n    ? endOfTextblockVertical(view, state, dir)\n    : endOfTextblockHorizontal(view, state, dir)\n}\n","import {DOMSerializer, Fragment, Mark} from \"prosemirror-model\"\n\nimport {domIndex, isEquivalentPosition} from \"./dom\"\nimport browser from \"./browser\"\n\n// NodeView:: interface\n//\n// By default, document nodes are rendered using the result of the\n// [`toDOM`](#model.NodeSpec.toDOM) method of their spec, and managed\n// entirely by the editor. For some use cases, such as embedded\n// node-specific editing interfaces, you want more control over\n// the behavior of a node's in-editor representation, and need to\n// [define](#view.EditorProps.nodeViews) a custom node view.\n//\n// Objects returned as node views must conform to this interface.\n//\n//   dom:: ?dom.Node\n//   The outer DOM node that represents the document node. When not\n//   given, the default strategy is used to create a DOM node.\n//\n//   contentDOM:: ?dom.Node\n//   The DOM node that should hold the node's content. Only meaningful\n//   if the node view also defines a `dom` property and if its node\n//   type is not a leaf node type. When this is present, ProseMirror\n//   will take care of rendering the node's children into it. When it\n//   is not present, the node view itself is responsible for rendering\n//   (or deciding not to render) its child nodes.\n//\n//   update:: ?(node: Node, decorations: [Decoration]) → bool\n//   When given, this will be called when the view is updating itself.\n//   It will be given a node (possibly of a different type), and an\n//   array of active decorations (which are automatically drawn, and\n//   the node view may ignore if it isn't interested in them), and\n//   should return true if it was able to update to that node, and\n//   false otherwise. If the node view has a `contentDOM` property (or\n//   no `dom` property), updating its child nodes will be handled by\n//   ProseMirror.\n//\n//   selectNode:: ?()\n//   Can be used to override the way the node's selected status (as a\n//   node selection) is displayed.\n//\n//   deselectNode:: ?()\n//   When defining a `selectNode` method, you should also provide a\n//   `deselectNode` method to remove the effect again.\n//\n//   setSelection:: ?(anchor: number, head: number, root: dom.Document)\n//   This will be called to handle setting the selection inside the\n//   node. The `anchor` and `head` positions are relative to the start\n//   of the node. By default, a DOM selection will be created between\n//   the DOM positions corresponding to those positions, but if you\n//   override it you can do something else.\n//\n//   stopEvent:: ?(event: dom.Event) → bool\n//   Can be used to prevent the editor view from trying to handle some\n//   or all DOM events that bubble up from the node view. Events for\n//   which this returns true are not handled by the editor.\n//\n//   ignoreMutation:: ?(dom.MutationRecord) → bool\n//   Called when a DOM\n//   [mutation](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)\n//   happens within the view. Return false if the editor should\n//   re-parse the range around the mutation, true if it can safely be\n//   ignored.\n//\n//   destroy:: ?()\n//   Called when the node view is removed from the editor or the whole\n//   editor is destroyed.\n\n// View descriptions are data structures that describe the DOM that is\n// used to represent the editor's content. They are used for:\n//\n// - Incremental redrawing when the document changes\n//\n// - Figuring out what part of the document a given DOM position\n//   corresponds to\n//\n// - Wiring in custom implementations of the editing interface for a\n//   given node\n//\n// They form a doubly-linked mutable tree, starting at `view.docView`.\n\nconst NOT_DIRTY = 0, CHILD_DIRTY = 1, CONTENT_DIRTY = 2, NODE_DIRTY = 3\n\n// Superclass for the various kinds of descriptions. Defines their\n// basic structure and shared methods.\nclass ViewDesc {\n  // : (?ViewDesc, [ViewDesc], dom.Node, ?dom.Node)\n  constructor(parent, children, dom, contentDOM) {\n    this.parent = parent\n    this.children = children\n    this.dom = dom\n    // An expando property on the DOM node provides a link back to its\n    // description.\n    dom.pmViewDesc = this\n    // This is the node that holds the child views. It may be null for\n    // descs that don't have children.\n    this.contentDOM = contentDOM\n    this.dirty = NOT_DIRTY\n  }\n\n  // Used to check whether a given description corresponds to a\n  // widget/mark/node.\n  matchesWidget() { return false }\n  matchesMark() { return false }\n  matchesNode() { return false }\n  matchesHack() { return false }\n\n  get beforePosition() { return false }\n\n  // : () → ?ParseRule\n  // When parsing in-editor content (in domchange.js), we allow\n  // descriptions to determine the parse rules that should be used to\n  // parse them.\n  parseRule() { return null }\n\n  // : (dom.Event) → bool\n  // Used by the editor's event handler to ignore events that come\n  // from certain descs.\n  stopEvent() { return false }\n\n  // The size of the content represented by this desc.\n  get size() {\n    let size = 0\n    for (let i = 0; i < this.children.length; i++) size += this.children[i].size\n    return size\n  }\n\n  // For block nodes, this represents the space taken up by their\n  // start/end tokens.\n  get border() { return 0 }\n\n  destroy() {\n    this.parent = null\n    if (this.dom.pmViewDesc == this) this.dom.pmViewDesc = null\n    for (let i = 0; i < this.children.length; i++)\n      this.children[i].destroy()\n  }\n\n  posBeforeChild(child) {\n    for (let i = 0, pos = this.posAtStart; i < this.children.length; i++) {\n      let cur = this.children[i]\n      if (cur == child) return pos\n      pos += cur.size\n    }\n  }\n\n  get posBefore() {\n    return this.parent.posBeforeChild(this)\n  }\n\n  get posAtStart() {\n    return this.parent ? this.parent.posBeforeChild(this) + this.border : 0\n  }\n\n  get posAfter() {\n    return this.posBefore + this.size\n  }\n\n  get posAtEnd() {\n    return this.posAtStart + this.size - 2 * this.border\n  }\n\n  // : (dom.Node, number, ?number) → number\n  localPosFromDOM(dom, offset, bias) {\n    // If the DOM position is in the content, use the child desc after\n    // it to figure out a position.\n    if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {\n      if (bias < 0) {\n        let domBefore, desc\n        if (dom == this.contentDOM) {\n          domBefore = dom.childNodes[offset - 1]\n        } else {\n          while (dom.parentNode != this.contentDOM) dom = dom.parentNode\n          domBefore = dom.previousSibling\n        }\n        while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this)) domBefore = domBefore.previousSibling\n        return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart\n      } else {\n        let domAfter, desc\n        if (dom == this.contentDOM) {\n          domAfter = dom.childNodes[offset]\n        } else {\n          while (dom.parentNode != this.contentDOM) dom = dom.parentNode\n          domAfter = dom.nextSibling\n        }\n        while (domAfter && !((desc = domAfter.pmViewDesc) && desc.parent == this)) domAfter = domAfter.nextSibling\n        return domAfter ? this.posBeforeChild(desc) : this.posAtEnd\n      }\n    }\n    // Otherwise, use various heuristics, falling back on the bias\n    // parameter, to determine whether to return the position at the\n    // start or at the end of this view desc.\n    let atEnd\n    if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {\n      atEnd = dom.compareDocumentPosition(this.contentDOM) & 2\n    } else if (this.dom.firstChild) {\n      if (offset == 0) for (let search = dom;; search = search.parentNode) {\n        if (search == this.dom) { atEnd = false; break }\n        if (search.parentNode.firstChild != search) break\n      }\n      if (atEnd == null && offset == dom.childNodes.length) for (let search = dom;; search = search.parentNode) {\n        if (search == this.dom) { atEnd = true; break }\n        if (search.parentNode.lastChild != search) break\n      }\n    }\n    return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart\n  }\n\n  // Scan up the dom finding the first desc that is a descendant of\n  // this one.\n  nearestDesc(dom, onlyNodes) {\n    for (let first = true, cur = dom; cur; cur = cur.parentNode) {\n      let desc = this.getDesc(cur)\n      if (desc && (!onlyNodes || desc.node)) {\n        // If dom is outside of this desc's nodeDOM, don't count it.\n        if (first && desc.nodeDOM && !(desc.nodeDOM.nodeType == 1 ? desc.nodeDOM.contains(dom) : desc.nodeDOM == dom)) first = false\n        else return desc\n      }\n    }\n  }\n\n  getDesc(dom) {\n    let desc = dom.pmViewDesc\n    for (let cur = desc; cur; cur = cur.parent) if (cur == this) return desc\n  }\n\n  posFromDOM(dom, offset, bias) {\n    for (let scan = dom;; scan = scan.parentNode) {\n      let desc = this.getDesc(scan)\n      if (desc) return desc.localPosFromDOM(dom, offset, bias)\n    }\n  }\n\n  // : (number) → ?NodeViewDesc\n  // Find the desc for the node after the given pos, if any. (When a\n  // parent node overrode rendering, there might not be one.)\n  descAt(pos) {\n    for (let i = 0, offset = 0; i < this.children.length; i++) {\n      let child = this.children[i], end = offset + child.size\n      if (offset == pos && end != offset) {\n        while (!child.border && child.children.length) child = child.children[0]\n        return child\n      }\n      if (pos < end) return child.descAt(pos - offset - child.border)\n      offset = end\n    }\n  }\n\n  // : (number) → {node: dom.Node, offset: number}\n  domFromPos(pos) {\n    if (!this.contentDOM) return {node: this.dom, offset: 0}\n    for (let offset = 0, i = 0;; i++) {\n      if (offset == pos) {\n        while (i < this.children.length && this.children[i].beforePosition) i++\n        return {node: this.contentDOM, offset: i}\n      }\n      if (i == this.children.length) throw new Error(\"Invalid position \" + pos)\n      let child = this.children[i], end = offset + child.size\n      if (pos < end) return child.domFromPos(pos - offset - child.border)\n      offset = end\n    }\n  }\n\n  // Used to find a DOM range in a single parent for a given changed\n  // range.\n  parseRange(from, to, base = 0) {\n    if (this.children.length == 0)\n      return {node: this.contentDOM, from, to, fromOffset: 0, toOffset: this.contentDOM.childNodes.length}\n\n    let fromOffset = -1, toOffset = -1\n    for (let offset = 0, i = 0;; i++) {\n      let child = this.children[i], end = offset + child.size\n      if (fromOffset == -1 && from <= end) {\n        let childBase = offset + child.border\n        // FIXME maybe descend mark views to parse a narrower range?\n        if (from >= childBase && to <= end - child.border && child.node &&\n            child.contentDOM && this.contentDOM.contains(child.contentDOM))\n          return child.parseRange(from - childBase, to - childBase, base + childBase)\n\n        from = base + offset\n        for (let j = i; j > 0; j--) {\n          let prev = this.children[j - 1]\n          if (prev.size && prev.dom.parentNode == this.contentDOM && !prev.emptyChildAt(1)) {\n            fromOffset = domIndex(prev.dom) + 1\n            break\n          }\n          from -= prev.size\n        }\n        if (fromOffset == -1) fromOffset = 0\n      }\n      if (fromOffset > -1 && to <= end) {\n        to = base + end\n        for (let j = i + 1; j < this.children.length; j++) {\n          let next = this.children[j]\n          if (next.size && next.dom.parentNode == this.contentDOM && !next.emptyChildAt(-1)) {\n            toOffset = domIndex(next.dom)\n            break\n          }\n          to += next.size\n        }\n        if (toOffset == -1) toOffset = this.contentDOM.childNodes.length\n        break\n      }\n      offset = end\n    }\n    return {node: this.contentDOM, from, to, fromOffset, toOffset}\n  }\n\n  emptyChildAt(side) {\n    if (this.border || !this.contentDOM || !this.children.length) return false\n    let child = this.children[side < 0 ? 0 : this.children.length - 1]\n    return child.size == 0 || child.emptyChildAt(side)\n  }\n\n  // : (number) → dom.Node\n  domAfterPos(pos) {\n    let {node, offset} = this.domFromPos(pos)\n    if (node.nodeType != 1 || offset == node.childNodes.length)\n      throw new RangeError(\"No node after pos \" + pos)\n    return node.childNodes[offset]\n  }\n\n  // : (number, number, dom.Document)\n  // View descs are responsible for setting any selection that falls\n  // entirely inside of them, so that custom implementations can do\n  // custom things with the selection. Note that this falls apart when\n  // a selection starts in such a node and ends in another, in which\n  // case we just use whatever domFromPos produces as a best effort.\n  setSelection(anchor, head, root, force) {\n    // If the selection falls entirely in a child, give it to that child\n    let from = Math.min(anchor, head), to = Math.max(anchor, head)\n    for (let i = 0, offset = 0; i < this.children.length; i++) {\n      let child = this.children[i], end = offset + child.size\n      if (from > offset && to < end)\n        return child.setSelection(anchor - offset - child.border, head - offset - child.border, root, force)\n      offset = end\n    }\n\n    let anchorDOM = this.domFromPos(anchor), headDOM = this.domFromPos(head)\n    let domSel = root.getSelection(), range = document.createRange()\n    if (!force &&\n        isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset) &&\n        isEquivalentPosition(headDOM.node, headDOM.offset, domSel.focusNode, domSel.focusOffset))\n      return\n\n    // Selection.extend can be used to create an 'inverted' selection\n    // (one where the focus is before the anchor), but not all\n    // browsers support it yet.\n    if (domSel.extend) {\n      range.setEnd(anchorDOM.node, anchorDOM.offset)\n      range.collapse(false)\n    } else {\n      if (anchor > head) { let tmp = anchorDOM; anchorDOM = headDOM; headDOM = tmp }\n      range.setEnd(headDOM.node, headDOM.offset)\n      range.setStart(anchorDOM.node, anchorDOM.offset)\n    }\n    domSel.removeAllRanges()\n    domSel.addRange(range)\n    if (domSel.extend)\n      domSel.extend(headDOM.node, headDOM.offset)\n  }\n\n  // : (dom.MutationRecord) → bool\n  ignoreMutation(_mutation) {\n    return !this.contentDOM\n  }\n\n  get contentLost() {\n    return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM)\n  }\n\n  // Remove a subtree of the element tree that has been touched\n  // by a DOM change, so that the next update will redraw it.\n  markDirty(from, to) {\n    for (let offset = 0, i = 0; i < this.children.length; i++) {\n      let child = this.children[i], end = offset + child.size\n      if (offset == end ? from <= end && to >= offset : from < end && to > offset) {\n        let startInside = offset + child.border, endInside = end - child.border\n        if (from >= startInside && to <= endInside) {\n          this.dirty = from == offset || to == end ? CONTENT_DIRTY : CHILD_DIRTY\n          if (from == startInside && to == endInside && child.contentLost) child.dirty = NODE_DIRTY\n          else child.markDirty(from - startInside, to - startInside)\n          return\n        } else {\n          child.dirty = NODE_DIRTY\n        }\n      }\n      offset = end\n    }\n    this.dirty = CONTENT_DIRTY\n  }\n}\n\n// Reused array to avoid allocating fresh arrays for things that will\n// stay empty anyway.\nconst nothing = []\n\n// A widget desc represents a widget decoration, which is a DOM node\n// drawn between the document nodes.\nclass WidgetViewDesc extends ViewDesc {\n  // : (ViewDesc, Decoration)\n  constructor(parent, widget, view, pos) {\n    let self, dom = widget.type.toDOM\n    if (typeof dom == \"function\") dom = dom(view, () => {\n      if (!self) return pos\n      if (self.parent) return self.parent.posBeforeChild(self)\n    })\n    if (!widget.type.spec.raw) {\n      if (dom.nodeType != 1) {\n        let wrap = document.createElement(\"span\")\n        wrap.appendChild(dom)\n        dom = wrap\n      }\n      dom.contentEditable = false\n      dom.classList.add(\"ProseMirror-widget\")\n    }\n    super(parent, nothing, dom, null)\n    this.widget = widget\n    self = this\n  }\n\n  get beforePosition() {\n    return this.widget.type.side < 0\n  }\n\n  matchesWidget(widget) {\n    return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type)\n  }\n\n  parseRule() { return {ignore: true} }\n\n  stopEvent(event) {\n    let stop = this.widget.spec.stopEvent\n    return stop ? stop(event) : false\n  }\n}\n\n// A cursor wrapper is used to put the cursor in when newly typed text\n// needs to be styled differently from its surrounding text (for\n// example through storedMarks), so that the style of the text doesn't\n// visually 'pop' between typing it and actually updating the view.\nclass CursorWrapperDesc extends WidgetViewDesc {\n  parseRule() {\n    let content\n    for (let child = this.dom.firstChild; child; child = child.nextSibling) {\n      let add\n      if (child.nodeType == 3) {\n        let text = child.nodeValue.replace(/\\ufeff/g, \"\")\n        if (!text) continue\n        add = document.createTextNode(text)\n      } else if (child.textContent == \"\\ufeff\") {\n        continue\n      } else {\n        add = child.cloneNode(true)\n      }\n      if (!content) content = document.createDocumentFragment()\n      content.appendChild(add)\n    }\n    if (content) return {skip: content}\n    else return super.parseRule()\n  }\n\n  ignoreMutation() { return false }\n}\n\n// A mark desc represents a mark. May have multiple children,\n// depending on how the mark is split. Note that marks are drawn using\n// a fixed nesting order, for simplicity and predictability, so in\n// some cases they will be split more often than would appear\n// necessary.\nclass MarkViewDesc extends ViewDesc {\n  // : (ViewDesc, Mark, dom.Node)\n  constructor(parent, mark, dom, contentDOM) {\n    super(parent, [], dom, contentDOM)\n    this.mark = mark\n  }\n\n  static create(parent, mark, inline, view) {\n    let custom = view.nodeViews[mark.type.name]\n    let spec = custom && custom(mark, view, inline)\n    if (!spec || !spec.dom)\n      spec = DOMSerializer.renderSpec(document, mark.type.spec.toDOM(mark, inline))\n    return new MarkViewDesc(parent, mark, spec.dom, spec.contentDOM || spec.dom)\n  }\n\n  parseRule() { return {mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM} }\n\n  matchesMark(mark) { return this.dirty != NODE_DIRTY && this.mark.eq(mark) }\n\n  markDirty(from, to) {\n    super.markDirty(from, to)\n    // Move dirty info to nearest node view\n    if (this.dirty != NOT_DIRTY) {\n      let parent = this.parent\n      while (!parent.node) parent = parent.parent\n      if (parent.dirty < this.dirty) parent.dirty = this.dirty\n      this.dirty = NOT_DIRTY\n    }\n  }\n}\n\n// Node view descs are the main, most common type of view desc, and\n// correspond to an actual node in the document. Unlike mark descs,\n// they populate their child array themselves.\nclass NodeViewDesc extends ViewDesc {\n  // : (?ViewDesc, Node, [Decoration], DecorationSet, dom.Node, ?dom.Node, EditorView)\n  constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {\n    super(parent, node.isLeaf ? nothing : [], dom, contentDOM)\n    this.nodeDOM = nodeDOM\n    this.node = node\n    this.outerDeco = outerDeco\n    this.innerDeco = innerDeco\n    if (contentDOM) this.updateChildren(view, pos)\n  }\n\n  // By default, a node is rendered using the `toDOM` method from the\n  // node type spec. But client code can use the `nodeViews` spec to\n  // supply a custom node view, which can influence various aspects of\n  // the way the node works.\n  //\n  // (Using subclassing for this was intentionally decided against,\n  // since it'd require exposing a whole slew of finnicky\n  // implementation details to the user code that they probably will\n  // never need.)\n  static create(parent, node, outerDeco, innerDeco, view, pos) {\n    let custom = view.nodeViews[node.type.name], descObj\n    let spec = custom && custom(node, view, () => {\n      // (This is a function that allows the custom view to find its\n      // own position)\n      if (!descObj) return pos\n      if (descObj.parent) return descObj.parent.posBeforeChild(descObj)\n    }, outerDeco)\n\n    let dom = spec && spec.dom, contentDOM = spec && spec.contentDOM\n    if (node.isText) {\n      if (!dom) dom = document.createTextNode(node.text)\n      else if (dom.nodeType != 3) throw new RangeError(\"Text must be rendered as a DOM text node\")\n    } else if (!dom) {\n      ;({dom, contentDOM} = DOMSerializer.renderSpec(document, node.type.spec.toDOM(node)))\n    }\n    if (!contentDOM && !node.isText && dom.nodeName != \"BR\") { // Chrome gets confused by <br contenteditable=false>\n      dom.contentEditable = false\n      if (node.type.spec.draggable) dom.draggable = true\n    }\n\n    let nodeDOM = dom\n    dom = applyOuterDeco(dom, outerDeco, node)\n\n    if (spec)\n      return descObj = new CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view)\n    else if (node.isText)\n      return new TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view)\n    else\n      return new NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos + 1)\n  }\n\n  parseRule() {\n    // Experimental kludge to allow opt-in re-parsing of nodes\n    if (this.node.type.spec.reparseInView) return null\n    // FIXME the assumption that this can always return the current\n    // attrs means that if the user somehow manages to change the\n    // attrs in the dom, that won't be picked up. Not entirely sure\n    // whether this is a problem\n    let rule = {node: this.node.type.name, attrs: this.node.attrs}\n    if (this.node.type.spec.code) rule.preserveWhitespace = \"full\"\n    if (this.contentDOM && !this.contentLost) rule.contentElement = this.contentDOM\n    else rule.getContent = () => this.contentDOM ? Fragment.empty : this.node.content\n    return rule\n  }\n\n  matchesNode(node, outerDeco, innerDeco) {\n    return this.dirty == NOT_DIRTY && node.eq(this.node) &&\n      sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco)\n  }\n\n  get size() { return this.node.nodeSize }\n\n  get border() { return this.node.isLeaf ? 0 : 1 }\n\n  // Syncs `this.children` to match `this.node.content` and the local\n  // decorations, possibly introducing nesting for marks. Then, in a\n  // separate step, syncs the DOM inside `this.contentDOM` to\n  // `this.children`.\n  updateChildren(view, pos) {\n    let updater = new ViewTreeUpdater(this), inline = this.node.inlineContent\n    iterDeco(this.node, this.innerDeco, (widget, i) => {\n      if (widget.spec.marks)\n        updater.syncToMarks(widget.spec.marks, inline, view)\n      else if (widget.type.side >= 0)\n        updater.syncToMarks(i == this.node.childCount ? Mark.none : this.node.child(i).marks, inline, view)\n      // If the next node is a desc matching this widget, reuse it,\n      // otherwise insert the widget as a new view desc.\n      updater.placeWidget(widget, view, pos)\n    }, (child, outerDeco, innerDeco, i) => {\n      // Make sure the wrapping mark descs match the node's marks.\n      updater.syncToMarks(child.marks, inline, view)\n      // Either find an existing desc that exactly matches this node,\n      // and drop the descs before it.\n      updater.findNodeMatch(child, outerDeco, innerDeco, i) ||\n        // Or try updating the next desc to reflect this node.\n        updater.updateNextNode(child, outerDeco, innerDeco, view, i) ||\n        // Or just add it as a new desc.\n        updater.addNode(child, outerDeco, innerDeco, view, pos)\n      pos += child.nodeSize\n    })\n    // Drop all remaining descs after the current position.\n    updater.syncToMarks(nothing, inline, view)\n    if (this.node.isTextblock) updater.addTextblockHacks()\n    updater.destroyRest()\n\n    // Sync the DOM if anything changed\n    if (updater.changed || this.dirty == CONTENT_DIRTY) this.renderChildren()\n  }\n\n  renderChildren() {\n    renderDescs(this.contentDOM, this.children, NodeViewDesc.is)\n    if (browser.ios) iosHacks(this.dom)\n  }\n\n  // : (Node, [Decoration], DecorationSet, EditorView) → bool\n  // If this desc be updated to match the given node decoration,\n  // do so and return true.\n  update(node, outerDeco, innerDeco, view) {\n    if (this.dirty == NODE_DIRTY ||\n        !node.sameMarkup(this.node)) return false\n    this.updateInner(node, outerDeco, innerDeco, view)\n    return true\n  }\n\n  updateInner(node, outerDeco, innerDeco, view) {\n    this.updateOuterDeco(outerDeco)\n    this.node = node\n    this.innerDeco = innerDeco\n    if (this.contentDOM) this.updateChildren(view, this.posAtStart)\n    this.dirty = NOT_DIRTY\n  }\n\n  updateOuterDeco(outerDeco) {\n    if (sameOuterDeco(outerDeco, this.outerDeco)) return\n    let needsWrap = this.nodeDOM.nodeType != 1\n    let oldDOM = this.dom\n    this.dom = patchOuterDeco(this.dom, this.nodeDOM,\n                              computeOuterDeco(this.outerDeco, this.node, needsWrap),\n                              computeOuterDeco(outerDeco, this.node, needsWrap))\n    if (this.dom != oldDOM) {\n      oldDOM.pmViewDesc = null\n      this.dom.pmViewDesc = this\n    }\n    this.outerDeco = outerDeco\n  }\n\n  // Mark this node as being the selected node.\n  selectNode() {\n    this.nodeDOM.classList.add(\"ProseMirror-selectednode\")\n  }\n\n  // Remove selected node marking from this node.\n  deselectNode() {\n    this.nodeDOM.classList.remove(\"ProseMirror-selectednode\")\n  }\n}\n\n// Create a view desc for the top-level document node, to be exported\n// and used by the view class.\nexport function docViewDesc(doc, outerDeco, innerDeco, dom, view) {\n  applyOuterDeco(dom, outerDeco, doc)\n  return new NodeViewDesc(null, doc, outerDeco, innerDeco, dom, dom, dom, view, 0)\n}\n\nclass TextViewDesc extends NodeViewDesc {\n  constructor(parent, node, outerDeco, innerDeco, dom, nodeDOM, view) {\n    super(parent, node, outerDeco, innerDeco, dom, null, nodeDOM, view)\n  }\n\n  parseRule() {\n    let parent = this.nodeDOM.parentNode\n    return parent ? {skip: parent} : {ignore: true}\n  }\n\n  update(node, outerDeco) {\n    if (this.dirty == NODE_DIRTY || (this.dirty != NOT_DIRTY && !this.inParent()) ||\n        !node.sameMarkup(this.node)) return false\n    this.updateOuterDeco(outerDeco)\n    if ((this.dirty != NOT_DIRTY || node.text != this.node.text) && node.text != this.nodeDOM.nodeValue)\n      this.nodeDOM.nodeValue = node.text\n    this.node = node\n    this.dirty = NOT_DIRTY\n    return true\n  }\n\n  inParent() {\n    let parentDOM = this.parent.contentDOM\n    for (let n = this.nodeDOM; n; n = n.parentNode) if (n == parentDOM) return true\n    return false\n  }\n\n  domFromPos(pos) {\n    return {node: this.nodeDOM, offset: pos}\n  }\n\n  localPosFromDOM(dom, offset, bias) {\n    if (dom == this.nodeDOM) return this.posAtStart + Math.min(offset, this.node.text.length)\n    return super.localPosFromDOM(dom, offset, bias)\n  }\n\n  ignoreMutation(mutation) {\n    return mutation.type != \"characterData\"\n  }\n}\n\n// A dummy desc used to tag trailing BR or span nodes created to work\n// around contentEditable terribleness.\nclass BRHackViewDesc extends ViewDesc {\n  parseRule() { return {ignore: true} }\n  matchesHack() { return this.dirty == NOT_DIRTY }\n}\n\n// A separate subclass is used for customized node views, so that the\n// extra checks only have to be made for nodes that are actually\n// customized.\nclass CustomNodeViewDesc extends NodeViewDesc {\n  // : (?ViewDesc, Node, [Decoration], DecorationSet, dom.Node, ?dom.Node, NodeView, EditorView)\n  constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view) {\n    super(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view)\n    this.spec = spec\n  }\n\n  // A custom `update` method gets to decide whether the update goes\n  // through. If it does, and there's a `contentDOM` node, our logic\n  // updates the children.\n  update(node, outerDeco, innerDeco, view) {\n    if (this.dirty == NODE_DIRTY) return false\n    if (this.spec.update) {\n      let result = this.spec.update(node, outerDeco)\n      if (result) this.updateInner(node, outerDeco, innerDeco, view)\n      return result\n    } else if (!this.contentDOM && !node.isLeaf) {\n      return false\n    } else {\n      return super.update(node, outerDeco, innerDeco, view)\n    }\n  }\n\n  selectNode() {\n    this.spec.selectNode ? this.spec.selectNode() : super.selectNode()\n  }\n\n  deselectNode() {\n    this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode()\n  }\n\n  setSelection(anchor, head, root, force) {\n    this.spec.setSelection ? this.spec.setSelection(anchor, head, root)\n      : super.setSelection(anchor, head, root, force)\n  }\n\n  destroy() {\n    if (this.spec.destroy) this.spec.destroy()\n    super.destroy()\n  }\n\n  stopEvent(event) {\n    return this.spec.stopEvent ? this.spec.stopEvent(event) : false\n  }\n\n  ignoreMutation(mutation) {\n    return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : super.ignoreMutation(mutation)\n  }\n}\n\n// : (dom.Node, [ViewDesc])\n// Sync the content of the given DOM node with the nodes associated\n// with the given array of view descs, recursing into mark descs\n// because this should sync the subtree for a whole node at a time.\nfunction renderDescs(parentDOM, descs) {\n  let dom = parentDOM.firstChild\n  for (let i = 0; i < descs.length; i++) {\n    let desc = descs[i], childDOM = desc.dom\n    if (childDOM.parentNode == parentDOM) {\n      while (childDOM != dom) dom = rm(dom)\n      dom = dom.nextSibling\n    } else {\n      parentDOM.insertBefore(childDOM, dom)\n    }\n    if (desc instanceof MarkViewDesc) {\n      let pos = dom ? dom.previousSibling : parentDOM.lastChild\n      renderDescs(desc.contentDOM, desc.children)\n      dom = pos ? pos.nextSibling : parentDOM.firstChild\n    }\n  }\n  while (dom) dom = rm(dom)\n}\n\nfunction OuterDecoLevel(nodeName) {\n  if (nodeName) this.nodeName = nodeName\n}\nOuterDecoLevel.prototype = Object.create(null)\n\nconst noDeco = [new OuterDecoLevel]\n\nfunction computeOuterDeco(outerDeco, node, needsWrap) {\n  if (outerDeco.length == 0) return noDeco\n\n  let top = needsWrap ? noDeco[0] : new OuterDecoLevel, result = [top]\n\n  for (let i = 0; i < outerDeco.length; i++) {\n    let attrs = outerDeco[i].type.attrs, cur = top\n    if (!attrs) continue\n    if (attrs.nodeName)\n      result.push(cur = new OuterDecoLevel(attrs.nodeName))\n\n    for (let name in attrs) {\n      let val = attrs[name]\n      if (val == null) continue\n      if (needsWrap && result.length == 1)\n        result.push(cur = top = new OuterDecoLevel(node.isInline ? \"span\" : \"div\"))\n      if (name == \"class\") cur.class = (cur.class ? cur.class + \" \" : \"\") + val\n      else if (name == \"style\") cur.style = (cur.style ? cur.style + \";\" : \"\") + val\n      else if (name != \"nodeName\") cur[name] = val\n    }\n  }\n\n  return result\n}\n\nfunction patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {\n  // Shortcut for trivial case\n  if (prevComputed == noDeco && curComputed == noDeco) return nodeDOM\n\n  let curDOM = nodeDOM\n  for (let i = 0; i < curComputed.length; i++) {\n    let deco = curComputed[i], prev = prevComputed[i]\n    if (i) {\n      let parent\n      if (prev && prev.nodeName == deco.nodeName && curDOM != outerDOM &&\n          (parent = nodeDOM.parentNode) && parent.tagName.toLowerCase() == deco.nodeName) {\n        curDOM = parent\n      } else {\n        parent = document.createElement(deco.nodeName)\n        parent.appendChild(curDOM)\n        curDOM = parent\n      }\n    }\n    patchAttributes(curDOM, prev || noDeco[0], deco)\n  }\n  return curDOM\n}\n\nfunction patchAttributes(dom, prev, cur) {\n  for (let name in prev)\n    if (name != \"class\" && name != \"style\" && name != \"nodeName\" && !(name in cur))\n      dom.removeAttribute(name)\n  for (let name in cur)\n    if (name != \"class\" && name != \"style\" && name != \"nodeName\" && cur[name] != prev[name])\n      dom.setAttribute(name, cur[name])\n  if (prev.class != cur.class) {\n    let prevList = prev.class ? prev.class.split(\" \") : nothing\n    let curList = cur.class ? cur.class.split(\" \") : nothing\n    for (let i = 0; i < prevList.length; i++) if (curList.indexOf(prevList[i]) == -1)\n      dom.classList.remove(prevList[i])\n    for (let i = 0; i < curList.length; i++) if (prevList.indexOf(curList[i]) == -1)\n      dom.classList.add(curList[i])\n  }\n  if (prev.style != cur.style) {\n    if (prev.style) {\n      let prop = /\\s*([\\w\\-\\xa1-\\uffff]+)\\s*:(?:\"(?:\\\\.|[^\"])*\"|'(?:\\\\.|[^'])*'|\\(.*?\\)|[^;])*/g, m\n      while (m = prop.exec(prev.style))\n        dom.style[m[1].toLowerCase()] = \"\"\n    }\n    if (cur.style)\n      dom.style.cssText += cur.style\n  }\n}\n\nfunction applyOuterDeco(dom, deco, node) {\n  return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node, dom.nodeType != 1))\n}\n\n// : ([Decoration], [Decoration]) → bool\nfunction sameOuterDeco(a, b) {\n  if (a.length != b.length) return false\n  for (let i = 0; i < a.length; i++) if (!a[i].type.eq(b[i].type)) return false\n  return true\n}\n\n// Remove a DOM node and return its next sibling.\nfunction rm(dom) {\n  let next = dom.nextSibling\n  dom.parentNode.removeChild(dom)\n  return next\n}\n\n// Helper class for incrementally updating a tree of mark descs and\n// the widget and node descs inside of them.\nclass ViewTreeUpdater {\n  // : (NodeViewDesc)\n  constructor(top) {\n    this.top = top\n    // Index into `this.top`'s child array, represents the current\n    // update position.\n    this.index = 0\n    // When entering a mark, the current top and index are pushed\n    // onto this.\n    this.stack = []\n    // Tracks whether anything was changed\n    this.changed = false\n\n    this.preMatched = preMatch(top.node.content, top.children)\n  }\n\n  // Destroy and remove the children between the given indices in\n  // `this.top`.\n  destroyBetween(start, end) {\n    if (start == end) return\n    for (let i = start; i < end; i++) this.top.children[i].destroy()\n    this.top.children.splice(start, end - start)\n    this.changed = true\n  }\n\n  // Destroy all remaining children in `this.top`.\n  destroyRest() {\n    this.destroyBetween(this.index, this.top.children.length)\n  }\n\n  // : ([Mark], EditorView)\n  // Sync the current stack of mark descs with the given array of\n  // marks, reusing existing mark descs when possible.\n  syncToMarks(marks, inline, view) {\n    let keep = 0, depth = this.stack.length >> 1\n    let maxKeep = Math.min(depth, marks.length), next\n    while (keep < maxKeep &&\n           (keep == depth - 1 ? this.top : this.stack[(keep + 1) << 1]).matchesMark(marks[keep]))\n      keep++\n\n    while (keep < depth) {\n      this.destroyRest()\n      this.top.dirty = NOT_DIRTY\n      this.index = this.stack.pop()\n      this.top = this.stack.pop()\n      depth--\n    }\n    while (depth < marks.length) {\n      this.stack.push(this.top, this.index + 1)\n      let found = -1\n      for (let i = this.index; i < Math.min(this.index + 3, this.top.children.length); i++) {\n        if (this.top.children[i].matchesMark(marks[depth])) { found = i; break }\n      }\n      if (found > -1) {\n        if (found > this.index) {\n          this.changed = true\n          this.top.children.splice(this.index, found - this.index)\n        }\n        this.top = this.top.children[this.index]\n      } else {\n        let markDesc = MarkViewDesc.create(this.top, marks[depth], inline, view)\n        this.top.children.splice(this.index, 0, markDesc)\n        this.top = markDesc\n        this.changed = true\n      }\n      this.index = 0\n      depth++\n    }\n  }\n\n  // : (Node, [Decoration], DecorationSet) → bool\n  // Try to find a node desc matching the given data. Skip over it and\n  // return true when successful.\n  findNodeMatch(node, outerDeco, innerDeco, index) {\n    for (let i = this.index, children = this.top.children, e = Math.min(children.length, i + 5); i < e; i++) {\n      let child = children[i], preMatched\n      if (child.matchesNode(node, outerDeco, innerDeco) &&\n          ((preMatched = this.preMatched.indexOf(child)) == -1 || preMatched == index)) {\n        this.destroyBetween(this.index, i)\n        this.index++\n        return true\n      }\n    }\n    return false\n  }\n\n  // : (Node, [Decoration], DecorationSet, EditorView, Fragment, number) → bool\n  // Try to update the next node, if any, to the given data. Checks\n  // pre-matches to avoid overwriting nodes that could still be used.\n  updateNextNode(node, outerDeco, innerDeco, view, index) {\n    if (this.index == this.top.children.length) return false\n    let next = this.top.children[this.index]\n    if (next instanceof NodeViewDesc) {\n      let preMatch = this.preMatched.indexOf(next)\n      if (preMatch > -1 && preMatch != index) return false\n      let nextDOM = next.dom\n      if (next.update(node, outerDeco, innerDeco, view)) {\n        if (next.dom != nextDOM) this.changed = true\n        this.index++\n        return true\n      }\n    }\n    return false\n  }\n\n  // : (Node, [Decoration], DecorationSet, EditorView)\n  // Insert the node as a newly created node desc.\n  addNode(node, outerDeco, innerDeco, view, pos) {\n    this.top.children.splice(this.index++, 0, NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos))\n    this.changed = true\n  }\n\n  placeWidget(widget, view, pos) {\n    if (this.index < this.top.children.length && this.top.children[this.index].matchesWidget(widget)) {\n      this.index++\n    } else {\n      let desc = new (widget.spec.isCursorWrapper ? CursorWrapperDesc : WidgetViewDesc)(this.top, widget, view, pos)\n      this.top.children.splice(this.index++, 0, desc)\n      this.changed = true\n    }\n  }\n\n  // Make sure a textblock looks and behaves correctly in\n  // contentEditable.\n  addTextblockHacks() {\n    let lastChild = this.top.children[this.index - 1]\n    while (lastChild instanceof MarkViewDesc) lastChild = lastChild.children[lastChild.children.length - 1]\n\n    if (!lastChild || // Empty textblock\n        !(lastChild instanceof TextViewDesc) ||\n        /\\n$/.test(lastChild.node.text)) {\n      if (this.index < this.top.children.length && this.top.children[this.index].matchesHack()) {\n        this.index++\n      } else {\n        let dom = document.createElement(\"br\")\n        this.top.children.splice(this.index++, 0, new BRHackViewDesc(this.top, nothing, dom, null))\n        this.changed = true\n      }\n    }\n  }\n}\n\n// : (Fragment, [ViewDesc]) → [ViewDesc]\n// Iterate from the end of the fragment and array of descs to find\n// directly matching ones, in order to avoid overeagerly reusing\n// those for other nodes. Returns an array whose positions correspond\n// to node positions in the fragment, and whose elements are either\n// descs matched to the child at that index, or empty.\nfunction preMatch(frag, descs) {\n  let result = [], end = frag.childCount\n  for (let i = descs.length - 1; end > 0 && i >= 0; i--) {\n    let desc = descs[i], node = desc.node\n    if (!node) continue\n    if (node != frag.child(end - 1)) break\n    result[--end] = desc\n  }\n  return result\n}\n\nfunction compareSide(a, b) { return a.type.side - b.type.side }\n\n// : (ViewDesc, DecorationSet, (Decoration), (Node, [Decoration], DecorationSet, number))\n// This function abstracts iterating over the nodes and decorations in\n// a fragment. Calls `onNode` for each node, with its local and child\n// decorations. Splits text nodes when there is a decoration starting\n// or ending inside of them. Calls `onWidget` for each widget.\nfunction iterDeco(parent, deco, onWidget, onNode) {\n  let locals = deco.locals(parent), offset = 0\n  // Simple, cheap variant for when there are no local decorations\n  if (locals.length == 0) {\n    for (let i = 0; i < parent.childCount; i++) {\n      let child = parent.child(i)\n      onNode(child, locals, deco.forChild(offset, child), i)\n      offset += child.nodeSize\n    }\n    return\n  }\n\n  let decoIndex = 0, active = [], restNode = null\n  for (let parentIndex = 0;;) {\n    if (decoIndex < locals.length && locals[decoIndex].to == offset) {\n      let widget = locals[decoIndex++], widgets\n      while (decoIndex < locals.length && locals[decoIndex].to == offset)\n        (widgets || (widgets = [widget])).push(locals[decoIndex++])\n      if (widgets) {\n        widgets.sort(compareSide)\n        for (let i = 0; i < widgets.length; i++) onWidget(widgets[i], parentIndex)\n      } else {\n        onWidget(widget, parentIndex)\n      }\n    }\n\n    let child\n    if (restNode) {\n      child = restNode\n      restNode = null\n    } else if (parentIndex < parent.childCount) {\n      child = parent.child(parentIndex++)\n    } else {\n      break\n    }\n\n    for (let i = 0; i < active.length; i++) if (active[i].to <= offset) active.splice(i--, 1)\n    while (decoIndex < locals.length && locals[decoIndex].from == offset) active.push(locals[decoIndex++])\n\n    let end = offset + child.nodeSize\n    if (child.isText) {\n      let cutAt = end\n      if (decoIndex < locals.length && locals[decoIndex].from < cutAt) cutAt = locals[decoIndex].from\n      for (let i = 0; i < active.length; i++) if (active[i].to < cutAt) cutAt = active[i].to\n      if (cutAt < end) {\n        restNode = child.cut(cutAt - offset)\n        child = child.cut(0, cutAt - offset)\n        end = cutAt\n      }\n    }\n\n    onNode(child, active.length ? active.slice() : nothing, deco.forChild(offset, child), parentIndex - 1)\n    offset = end\n  }\n}\n\n// List markers in Mobile Safari will mysteriously disappear\n// sometimes. This works around that.\nfunction iosHacks(dom) {\n  if (dom.nodeName == \"UL\" || dom.nodeName == \"OL\") {\n    let oldCSS = dom.style.cssText\n    dom.style.cssText = oldCSS + \"; list-style: square !important\"\n    window.getComputedStyle(dom).listStyle\n    dom.style.cssText = oldCSS\n  }\n}\n","import {Selection, NodeSelection, TextSelection} from \"prosemirror-state\"\nimport browser from \"./browser\"\nimport {domIndex, selectionCollapsed} from \"./dom\"\n\nfunction moveSelectionBlock(state, dir) {\n  let {$anchor, $head} = state.selection\n  let $side = dir > 0 ? $anchor.max($head) : $anchor.min($head)\n  let $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null\n  return $start && Selection.findFrom($start, dir)\n}\n\nfunction apply(view, sel) {\n  view.dispatch(view.state.tr.setSelection(sel).scrollIntoView())\n  return true\n}\n\nfunction selectHorizontally(view, dir) {\n  let sel = view.state.selection\n  if (sel instanceof TextSelection) {\n    if (!sel.empty) {\n      return false\n    } else if (view.endOfTextblock(dir > 0 ? \"right\" : \"left\")) {\n      let next = moveSelectionBlock(view.state, dir)\n      if (next && (next instanceof NodeSelection)) return apply(view, next)\n      return false\n    } else {\n      let $head = sel.$head, node = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter, desc\n      if (node && NodeSelection.isSelectable(node)) {\n        let nodePos = dir < 0 ? $head.pos - node.nodeSize : $head.pos\n        if (node.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM)\n          return apply(view, new NodeSelection(dir < 0 ? view.state.doc.resolve($head.pos - node.nodeSize) : $head))\n      }\n      return false\n    }\n  } else if (sel instanceof NodeSelection && sel.node.isInline) {\n    return apply(view, new TextSelection(dir > 0 ? sel.$to : sel.$from))\n  } else {\n    let next = moveSelectionBlock(view.state, dir)\n    if (next) return apply(view, next)\n    return false\n  }\n}\n\nfunction nodeLen(node) {\n  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length\n}\n\nfunction isIgnorable(dom) {\n  let desc = dom.pmViewDesc\n  return desc && desc.size == 0 && (dom.nextSibling || dom.nodeName != \"BR\")\n}\n\n// Make sure the cursor isn't directly after one or more ignored\n// nodes, which will confuse the browser's cursor motion logic.\nfunction skipIgnoredNodesLeft(view) {\n  let sel = view.root.getSelection()\n  let node = sel.focusNode, offset = sel.focusOffset\n  if (!node) return\n  let moveNode, moveOffset, force = false\n  // Gecko will do odd things when the selection is directly in front\n  // of a non-editable node, so in that case, move it into the next\n  // node if possible. Issue prosemirror/prosemirror#832.\n  if (browser.gecko && node.nodeType == 1 && offset < nodeLen(node) && isIgnorable(node.childNodes[offset])) force = true\n  for (;;) {\n    if (offset > 0) {\n      if (node.nodeType != 1) {\n        if (node.nodeType == 3 && node.nodeValue.charAt(offset - 1) == \"\\ufeff\") {\n          // IE11's cursor will still be stuck when placed at the\n          // beginning of the cursor wrapper text node (#807)\n          if (browser.ie && browser.ie_version <= 11) force = true\n          moveNode = node\n          moveOffset = --offset\n        } else break\n      } else {\n        let before = node.childNodes[offset - 1]\n        if (isIgnorable(before)) {\n          moveNode = node\n          moveOffset = --offset\n        } else if (before.nodeType == 3) {\n          node = before\n          offset = node.nodeValue.length\n        } else break\n      }\n    } else if (isBlockNode(node)) {\n      break\n    } else {\n      let prev = node.previousSibling\n      while (prev && isIgnorable(prev)) {\n        moveNode = node.parentNode\n        moveOffset = domIndex(prev)\n        prev = prev.previousSibling\n      }\n      if (!prev) {\n        node = node.parentNode\n        if (node == view.dom) break\n        offset = 0\n      } else {\n        node = prev\n        offset = nodeLen(node)\n      }\n    }\n  }\n  if (force) setSelFocus(view, sel, node, offset)\n  else if (moveNode) setSelFocus(view, sel, moveNode, moveOffset)\n}\n\n// Make sure the cursor isn't directly before one or more ignored\n// nodes.\nfunction skipIgnoredNodesRight(view) {\n  let sel = view.root.getSelection()\n  let node = sel.focusNode, offset = sel.focusOffset\n  if (!node) return\n  let len = nodeLen(node)\n  let moveNode, moveOffset\n  for (;;) {\n    if (offset < len) {\n      if (node.nodeType != 1) break\n      let after = node.childNodes[offset]\n      if (isIgnorable(after)) {\n        moveNode = node\n        moveOffset = ++offset\n      }\n      else break\n    } else if (isBlockNode(node)) {\n      break\n    } else {\n      let next = node.nextSibling\n      while (next && isIgnorable(next)) {\n        moveNode = next.parentNode\n        moveOffset = domIndex(next) + 1\n        next = next.nextSibling\n      }\n      if (!next) {\n        node = node.parentNode\n        if (node == view.dom) break\n        offset = len = 0\n      } else {\n        node = next\n        offset = 0\n        len = nodeLen(node)\n      }\n    }\n  }\n  if (moveNode) setSelFocus(view, sel, moveNode, moveOffset)\n}\n\nfunction isBlockNode(dom) {\n  let desc = dom.pmViewDesc\n  return desc && desc.node && desc.node.isBlock\n}\n\nfunction setSelFocus(view, sel, node, offset) {\n  if (selectionCollapsed(sel)) {\n    let range = document.createRange()\n    range.setEnd(node, offset)\n    range.setStart(node, offset)\n    sel.removeAllRanges()\n    sel.addRange(range)\n  } else if (sel.extend) {\n    sel.extend(node, offset)\n  }\n  view.selectionReader.storeDOMState(view.selection)\n}\n\n// : (EditorState, number)\n// Check whether vertical selection motion would involve node\n// selections. If so, apply it (if not, the result is left to the\n// browser)\nfunction selectVertically(view, dir) {\n  let sel = view.state.selection\n  if (sel instanceof TextSelection && !sel.empty) return false\n  let {$from, $to} = sel\n\n  if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? \"up\" : \"down\")) {\n    let next = moveSelectionBlock(view.state, dir)\n    if (next && (next instanceof NodeSelection))\n      return apply(view, next)\n  }\n  if (!$from.parent.inlineContent) {\n    let beyond = Selection.findFrom(dir < 0 ? $from : $to, dir)\n    return beyond ? apply(view, beyond) : true\n  }\n  return false\n}\n\nfunction stopNativeHorizontalDelete(view, dir) {\n  if (!(view.state.selection instanceof TextSelection)) return true\n  let {$head, $anchor, empty} = view.state.selection\n  if (!$head.sameParent($anchor)) return true\n  if (!empty) return false\n  if (view.endOfTextblock(dir > 0 ? \"forward\" : \"backward\")) return true\n  let nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter)\n  if (nextNode && !nextNode.isText) {\n    let tr = view.state.tr\n    if (dir < 0) tr.delete($head.pos - nextNode.nodeSize, $head.pos)\n    else tr.delete($head.pos, $head.pos + nextNode.nodeSize)\n    view.dispatch(tr)\n    return true\n  }\n  return false\n}\n\nfunction switchEditable(view, node, state) {\n  view.domObserver.stop()\n  node.contentEditable = state\n  view.domObserver.start()\n}\n\n// Issue #867 / https://bugs.chromium.org/p/chromium/issues/detail?id=903821\n// In which Chrome does really wrong things when the down arrow is\n// pressed when the cursor is directly at the start of a textblock and\n// has an uneditable node after it\nfunction chromeDownArrowBug(view) {\n  if (!browser.chrome || view.state.selection.$head.parentOffset > 0) return\n  let {focusNode, focusOffset} = view.root.getSelection()\n  if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 &&\n      focusNode.firstChild && focusNode.firstChild.contentEditable == \"false\") {\n    let child = focusNode.firstChild\n    switchEditable(view, child, true)\n    setTimeout(() => switchEditable(view, child, false), 20)\n  }\n}\n\n// A backdrop key mapping used to make sure we always suppress keys\n// that have a dangerous default effect, even if the commands they are\n// bound to return false, and to make sure that cursor-motion keys\n// find a cursor (as opposed to a node selection) when pressed. For\n// cursor-motion keys, the code in the handlers also takes care of\n// block selections.\n\nfunction getMods(event) {\n  let result = \"\"\n  if (event.ctrlKey) result += \"c\"\n  if (event.metaKey) result += \"m\"\n  if (event.altKey) result += \"a\"\n  if (event.shiftKey) result += \"s\"\n  return result\n}\n\nexport function captureKeyDown(view, event) {\n  let code = event.keyCode, mods = getMods(event)\n  if (code == 8 || (browser.mac && code == 72 && mods == \"c\")) { // Backspace, Ctrl-h on Mac\n    return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodesLeft(view)\n  } else if (code == 46 || (browser.mac && code == 68 && mods == \"c\")) { // Delete, Ctrl-d on Mac\n    return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodesRight(view)\n  } else if (code == 13 || code == 27) { // Enter, Esc\n    return true\n  } else if (code == 37) { // Left arrow\n    return selectHorizontally(view, -1) || skipIgnoredNodesLeft(view)\n  } else if (code == 39) { // Right arrow\n    return selectHorizontally(view, 1) || skipIgnoredNodesRight(view)\n  } else if (code == 38) { // Up arrow\n    return selectVertically(view, -1) || skipIgnoredNodesLeft(view)\n  } else if (code == 40) { // Down arrow\n    return chromeDownArrowBug(view) || selectVertically(view, 1) || skipIgnoredNodesRight(view)\n  } else if (mods == (browser.mac ? \"m\" : \"c\") &&\n             (code == 66 || code == 73 || code == 89 || code == 90)) { // Mod-[biyz]\n    return true\n  }\n  return false\n}\n","import {EditorState} from \"prosemirror-state\"\nimport {Mapping} from \"prosemirror-transform\"\n\nclass TrackedRecord {\n  constructor(prev, mapping, state) {\n    this.prev = prev\n    this.mapping = mapping\n    this.state = state\n  }\n}\n\nexport class TrackMappings {\n  constructor(state) {\n    this.seen = [new TrackedRecord(null, null, state)]\n    // Kludge to listen to state changes globally in order to be able\n    // to find mappings from a given state to another.\n    EditorState.addApplyListener(this.track = this.track.bind(this))\n  }\n\n  destroy() {\n    EditorState.removeApplyListener(this.track)\n  }\n\n  find(state) {\n    for (let i = this.seen.length - 1; i >= 0; i--) {\n      let record = this.seen[i]\n      if (record.state == state) return record\n    }\n  }\n\n  track(old, tr, state) {\n    let found = this.seen.length < 200 ? this.find(old) : null\n    if (found)\n      this.seen.push(new TrackedRecord(found, tr.docChanged ? tr.mapping : null, state))\n  }\n\n  getMapping(state, appendTo) {\n    let found = this.find(state)\n    if (!found) return null\n    let mappings = []\n    for (let rec = found; rec; rec = rec.prev)\n      if (rec.mapping) mappings.push(rec.mapping)\n    let result = appendTo || new Mapping\n    for (let i = mappings.length - 1; i >= 0; i--)\n      result.appendMapping(mappings[i])\n    return result\n  }\n}\n","import {Fragment, DOMParser} from \"prosemirror-model\"\nimport {Selection, TextSelection} from \"prosemirror-state\"\nimport {Mapping} from \"prosemirror-transform\"\n\nimport {TrackMappings} from \"./trackmappings\"\nimport {selectionBetween} from \"./selection\"\nimport {selectionCollapsed} from \"./dom\"\nimport browser from \"./browser\"\n\nexport class DOMChange {\n  constructor(view, composing) {\n    this.view = view\n    this.state = view.state\n    this.composing = composing\n    this.from = this.to = null\n    this.typeOver = false\n    this.timeout = composing ? null : setTimeout(() => this.finish(), DOMChange.commitTimeout)\n    this.trackMappings = new TrackMappings(view.state)\n\n    // If there have been changes since this DOM update started, we must\n    // map our start and end positions, as well as the new selection\n    // positions, through them. This tracks that mapping.\n    this.mapping = new Mapping\n    this.mappingTo = view.state\n  }\n\n  addRange(from, to) {\n    if (this.from == null) {\n      this.from = from\n      this.to = to\n    } else {\n      this.from = Math.min(from, this.from)\n      this.to = Math.max(to, this.to)\n    }\n  }\n\n  changedRange() {\n    if (this.from == null) return rangeAroundSelection(this.state.selection)\n    let $from = this.state.doc.resolve(Math.min(this.from, this.state.selection.from)), $to = this.state.doc.resolve(this.to)\n    let shared = $from.sharedDepth(this.to)\n    return {from: $from.before(shared + 1), to: $to.after(shared + 1)}\n  }\n\n  markDirty(range) {\n    if (this.from == null) this.view.docView.markDirty((range = range || this.changedRange()).from, range.to)\n    else this.view.docView.markDirty(this.from, this.to)\n  }\n\n  stateUpdated(state) {\n    if (this.trackMappings.getMapping(state, this.mapping)) {\n      this.trackMappings.destroy()\n      this.trackMappings = new TrackMappings(state)\n      this.mappingTo = state\n      return true\n    } else {\n      this.markDirty()\n      this.destroy()\n      return false\n    }\n  }\n\n  finish(force) {\n    clearTimeout(this.timeout)\n    if (this.composing && !force) return\n    this.view.domObserver.flush()\n    let range = this.changedRange()\n    this.markDirty(range)\n\n    this.destroy()\n    let sel = this.state.selection, allowTypeOver = this.typeOver && sel instanceof TextSelection &&\n        !sel.empty && sel.$head.sameParent(sel.$anchor)\n    readDOMChange(this.view, this.mapping, this.state, range, allowTypeOver)\n\n    // If the reading didn't result in a view update, force one by\n    // resetting the view to its current state.\n    if (this.view.docView.dirty) this.view.updateState(this.view.state)\n  }\n\n  destroy() {\n    clearTimeout(this.timeout)\n    this.trackMappings.destroy()\n    this.view.inDOMChange = null\n  }\n\n  compositionEnd() {\n    if (this.composing) {\n      this.composing = false\n      this.timeout = setTimeout(() => this.finish(), 50)\n    }\n  }\n\n  static start(view, composing) {\n    if (view.inDOMChange) {\n      if (composing) {\n        clearTimeout(view.inDOMChange.timeout)\n        view.inDOMChange.composing = true\n      }\n    } else {\n      view.inDOMChange = new DOMChange(view, composing)\n    }\n    return view.inDOMChange\n  }\n}\nDOMChange.commitTimeout = 20\n\n// Note that all referencing and parsing is done with the\n// start-of-operation selection and document, since that's the one\n// that the DOM represents. If any changes came in in the meantime,\n// the modification is mapped over those before it is applied, in\n// readDOMChange.\n\nfunction parseBetween(view, oldState, range) {\n  let {node: parent, fromOffset, toOffset, from, to} = view.docView.parseRange(range.from, range.to)\n\n  let domSel = view.root.getSelection(), find = null, anchor = domSel.anchorNode\n  if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {\n    find = [{node: anchor, offset: domSel.anchorOffset}]\n    if (!selectionCollapsed(domSel))\n      find.push({node: domSel.focusNode, offset: domSel.focusOffset})\n  }\n  // Work around issue in Chrome where backspacing sometimes replaces\n  // the deleted content with a random BR node (issues #799, #831)\n  if (browser.chrome && view.lastKeyCode === 8) {\n    for (let off = toOffset; off > fromOffset; off--) {\n      let node = parent.childNodes[off - 1], desc = node.pmViewDesc\n      if (node.nodeType == \"BR\" && !desc) { toOffset = off; break }\n      if (!desc || desc.size) break\n    }\n  }\n  let startDoc = oldState.doc\n  let parser = view.someProp(\"domParser\") || DOMParser.fromSchema(view.state.schema)\n  let $from = startDoc.resolve(from)\n  let sel = null, doc = parser.parse(parent, {\n    topNode: $from.parent,\n    topMatch: $from.parent.contentMatchAt($from.index()),\n    topOpen: true,\n    from: fromOffset,\n    to: toOffset,\n    preserveWhitespace: $from.parent.type.spec.code ? \"full\" : true,\n    editableContent: true,\n    findPositions: find,\n    ruleFromNode: ruleFromNode(parser, $from),\n    context: $from\n  })\n  if (find && find[0].pos != null) {\n    let anchor = find[0].pos, head = find[1] && find[1].pos\n    if (head == null) head = anchor\n    sel = {anchor: anchor + from, head: head + from}\n  }\n  return {doc, sel, from, to}\n}\n\nfunction ruleFromNode(parser, context) {\n  return dom => {\n    let desc = dom.pmViewDesc\n    if (desc) {\n      return desc.parseRule()\n    } else if (dom.nodeName == \"BR\" && dom.parentNode) {\n      // Safari replaces the list item or table cell with a BR\n      // directly in the list node (?!) if you delete the last\n      // character in a list item or table cell (#708, #862)\n      if (browser.safari && /^(ul|ol)$/i.test(dom.parentNode.nodeName))\n        return parser.matchTag(document.createElement(\"li\"), context)\n      else if (dom.parentNode.lastChild == dom || browser.safari && /^(tr|table)$/i.test(dom.parentNode.nodeName))\n        return {ignore: true}\n    }\n  }\n}\n\nfunction isAtEnd($pos, depth) {\n  for (let i = depth || 0; i < $pos.depth; i++)\n    if ($pos.index(i) + 1 < $pos.node(i).childCount) return false\n  return $pos.parentOffset == $pos.parent.content.size\n}\nfunction isAtStart($pos, depth) {\n  for (let i = depth || 0; i < $pos.depth; i++)\n    if ($pos.index(0) > 0) return false\n  return $pos.parentOffset == 0\n}\n\nfunction rangeAroundSelection(selection) {\n  // Intentionally uses $head/$anchor because those will correspond to the DOM selection\n  let $from = selection.$anchor.min(selection.$head), $to = selection.$anchor.max(selection.$head)\n\n  if ($from.sameParent($to) && $from.parent.inlineContent && $from.parentOffset && $to.parentOffset < $to.parent.content.size) {\n    let startOff = Math.max(0, $from.parentOffset)\n    let size = $from.parent.content.size\n    let endOff = Math.min(size, $to.parentOffset)\n\n    if (startOff > 0)\n      startOff = $from.parent.childBefore(startOff).offset\n    if (endOff < size) {\n      let after = $from.parent.childAfter(endOff)\n      endOff = after.offset + after.node.nodeSize\n    }\n    let nodeStart = $from.start()\n    return {from: nodeStart + startOff, to: nodeStart + endOff}\n  } else {\n    for (let depth = 0;; depth++) {\n      let fromStart = isAtStart($from, depth + 1), toEnd = isAtEnd($to, depth + 1)\n      if (fromStart || toEnd || $from.index(depth) != $to.index(depth) || $to.node(depth).isTextblock) {\n        let from = $from.before(depth + 1), to = $to.after(depth + 1)\n        if (fromStart && $from.index(depth) > 0)\n          from -= $from.node(depth).child($from.index(depth) - 1).nodeSize\n        if (toEnd && $to.index(depth) + 1 < $to.node(depth).childCount)\n          to += $to.node(depth).child($to.index(depth) + 1).nodeSize\n        return {from, to}\n      }\n    }\n  }\n}\n\nfunction keyEvent(keyCode, key) {\n  let event = document.createEvent(\"Event\")\n  event.initEvent(\"keydown\", true, true)\n  event.keyCode = keyCode\n  event.key = event.code = key\n  return event\n}\n\nfunction readDOMChange(view, mapping, oldState, range, allowTypeOver) {\n  let parse = parseBetween(view, oldState, range)\n\n  let doc = oldState.doc, compare = doc.slice(parse.from, parse.to)\n  let preferredPos, preferredSide\n  // Prefer anchoring to end when Backspace is pressed\n  if (view.lastKeyCode === 8 && Date.now() - 100 < view.lastKeyCodeTime) {\n    preferredPos = oldState.selection.to\n    preferredSide = \"end\"\n  } else {\n    preferredPos = oldState.selection.from\n    preferredSide = \"start\"\n  }\n  view.lastKeyCode = null\n\n  let change = findDiff(compare.content, parse.doc.content, parse.from, preferredPos, preferredSide)\n  if (!change) {\n    if (allowTypeOver) {\n      let state = view.state, sel = state.selection\n      view.dispatch(state.tr.replaceSelectionWith(state.schema.text(state.doc.textBetween(sel.from, sel.to)), true).scrollIntoView())\n    } else if (parse.sel) {\n      let sel = resolveSelection(view, view.state.doc, mapping, parse.sel)\n      if (sel && !sel.eq(view.state.selection)) view.dispatch(view.state.tr.setSelection(sel))\n    }\n    return\n  }\n\n  let $from = parse.doc.resolveNoCache(change.start - parse.from)\n  let $to = parse.doc.resolveNoCache(change.endB - parse.from)\n  let nextSel\n  // If this looks like the effect of pressing Enter, just dispatch an\n  // Enter key instead.\n  if (!$from.sameParent($to) && $from.pos < parse.doc.content.size &&\n      (nextSel = Selection.findFrom(parse.doc.resolve($from.pos + 1), 1, true)) &&\n      nextSel.head == $to.pos &&\n      view.someProp(\"handleKeyDown\", f => f(view, keyEvent(13, \"Enter\"))))\n    return\n  // Same for backspace\n  if (oldState.selection.anchor > change.start &&\n      looksLikeJoin(doc, change.start, change.endA, $from, $to) &&\n      view.someProp(\"handleKeyDown\", f => f(view, keyEvent(8, \"Backspace\")))) {\n    if (browser.android && browser.chrome) { // #820\n      view.selectionReader.suppressUpdates = true\n      setTimeout(() => view.selectionReader.suppressUpdates = false, 50)\n    }\n    return\n  }\n\n  let from = mapping.map(change.start), to = mapping.map(change.endA, -1)\n\n  let tr, storedMarks, markChange, $from1\n  if ($from.sameParent($to) && $from.parent.inlineContent) {\n    if ($from.pos == $to.pos) { // Deletion\n      tr = view.state.tr.delete(from, to)\n      storedMarks = doc.resolve(change.start).marksAcross(doc.resolve(change.endA))\n    } else if ( // Adding or removing a mark\n      change.endA == change.endB && ($from1 = doc.resolve(change.start)) &&\n      (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset),\n                                 $from1.parent.content.cut($from1.parentOffset, change.endA - $from1.start())))\n    ) {\n      tr = view.state.tr\n      if (markChange.type == \"add\") tr.addMark(from, to, markChange.mark)\n      else tr.removeMark(from, to, markChange.mark)\n    } else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {\n      // Both positions in the same text node -- simply insert text\n      let text = $from.parent.textBetween($from.parentOffset, $to.parentOffset)\n      if (view.someProp(\"handleTextInput\", f => f(view, from, to, text))) return\n      tr = view.state.tr.insertText(text, from, to)\n    }\n  }\n\n  if (!tr)\n    tr = view.state.tr.replace(from, to, parse.doc.slice(change.start - parse.from, change.endB - parse.from))\n  if (parse.sel) {\n    let sel = resolveSelection(view, tr.doc, mapping, parse.sel)\n    if (sel) tr.setSelection(sel)\n  }\n  if (storedMarks) tr.ensureMarks(storedMarks)\n  view.dispatch(tr.scrollIntoView())\n}\n\nfunction resolveSelection(view, doc, mapping, parsedSel) {\n  if (Math.max(parsedSel.anchor, parsedSel.head) > doc.content.size) return null\n  return selectionBetween(view, doc.resolve(mapping.map(parsedSel.anchor)),\n                          doc.resolve(mapping.map(parsedSel.head)))\n}\n\n// : (Fragment, Fragment) → ?{mark: Mark, type: string}\n// Given two same-length, non-empty fragments of inline content,\n// determine whether the first could be created from the second by\n// removing or adding a single mark type.\nfunction isMarkChange(cur, prev) {\n  let curMarks = cur.firstChild.marks, prevMarks = prev.firstChild.marks\n  let added = curMarks, removed = prevMarks, type, mark, update\n  for (let i = 0; i < prevMarks.length; i++) added = prevMarks[i].removeFromSet(added)\n  for (let i = 0; i < curMarks.length; i++) removed = curMarks[i].removeFromSet(removed)\n  if (added.length == 1 && removed.length == 0) {\n    mark = added[0]\n    type = \"add\"\n    update = node => node.mark(mark.addToSet(node.marks))\n  } else if (added.length == 0 && removed.length == 1) {\n    mark = removed[0]\n    type = \"remove\"\n    update = node => node.mark(mark.removeFromSet(node.marks))\n  } else {\n    return null\n  }\n  let updated = []\n  for (let i = 0; i < prev.childCount; i++) updated.push(update(prev.child(i)))\n  if (Fragment.from(updated).eq(cur)) return {mark, type}\n}\n\nfunction looksLikeJoin(old, start, end, $newStart, $newEnd) {\n  if (!$newStart.parent.isTextblock ||\n      // The content must have shrunk\n      end - start <= $newEnd.pos - $newStart.pos ||\n      // newEnd must point directly at or after the end of the block that newStart points into\n      skipClosingAndOpening($newStart, true, false) < $newEnd.pos)\n    return false\n\n  let $start = old.resolve(start)\n  // Start must be at the end of a block\n  if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock)\n    return false\n  let $next = old.resolve(skipClosingAndOpening($start, true, true))\n  // The next textblock must start before end and end near it\n  if (!$next.parent.isTextblock || $next.pos > end ||\n      skipClosingAndOpening($next, true, false) < end)\n    return false\n\n  // The fragments after the join point must match\n  return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content)\n}\n\nfunction skipClosingAndOpening($pos, fromEnd, mayOpen) {\n  let depth = $pos.depth, end = fromEnd ? $pos.end() : $pos.pos\n  while (depth > 0 && (fromEnd || $pos.indexAfter(depth) == $pos.node(depth).childCount)) {\n    depth--\n    end++\n    fromEnd = false\n  }\n  if (mayOpen) {\n    let next = $pos.node(depth).maybeChild($pos.indexAfter(depth))\n    while (next && !next.isLeaf) {\n      next = next.firstChild\n      end++\n    }\n  }\n  return end\n}\n\nfunction findDiff(a, b, pos, preferredPos, preferredSide) {\n  let start = a.findDiffStart(b, pos)\n  if (start == null) return null\n  let {a: endA, b: endB} = a.findDiffEnd(b, pos + a.size, pos + b.size)\n  if (preferredSide == \"end\") {\n    let adjust = Math.max(0, start - Math.min(endA, endB))\n    preferredPos -= endA + adjust - start\n  }\n  if (endA < start && a.size < b.size) {\n    let move = preferredPos <= start && preferredPos >= endA ? start - preferredPos : 0\n    start -= move\n    endB = start + (endB - endA)\n    endA = start\n  } else if (endB < start) {\n    let move = preferredPos <= start && preferredPos >= endB ? start - preferredPos : 0\n    start -= move\n    endA = start + (endA - endB)\n    endB = start\n  }\n  return {start, endA, endB}\n}\n","import {Slice, Fragment, DOMParser, DOMSerializer} from \"prosemirror-model\"\n\nexport function serializeForClipboard(view, slice) {\n  let context = [], {content, openStart, openEnd} = slice\n  while (openStart > 1 && openEnd > 1 && content.childCount == 1 && content.firstChild.childCount == 1) {\n    openStart--\n    openEnd--\n    let node = content.firstChild\n    context.push(node.type.name, node.type.hasRequiredAttrs() ? node.attrs : null)\n    content = node.content\n  }\n\n  let serializer = view.someProp(\"clipboardSerializer\") || DOMSerializer.fromSchema(view.state.schema)\n  let wrap = document.createElement(\"div\")\n  wrap.appendChild(serializer.serializeFragment(content))\n\n  let firstChild = wrap.firstChild, needsWrap\n  while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {\n    for (let i = needsWrap.length - 1; i >= 0; i--) {\n      let wrapper = document.createElement(needsWrap[i])\n      while (wrap.firstChild) wrapper.appendChild(wrap.firstChild)\n      wrap.appendChild(wrapper)\n    }\n    firstChild = wrap.firstChild\n  }\n\n  if (firstChild && firstChild.nodeType == 1)\n    firstChild.setAttribute(\"data-pm-slice\", `${openStart} ${openEnd} ${JSON.stringify(context)}`)\n\n  let text = view.someProp(\"clipboardTextSerializer\", f => f(slice)) ||\n      slice.content.textBetween(0, slice.content.size, \"\\n\\n\")\n\n  return {dom: wrap, text}\n}\n\n// : (EditorView, string, string, ?bool, ResolvedPos) → ?Slice\n// Read a slice of content from the clipboard (or drop data).\nexport function parseFromClipboard(view, text, html, plainText, $context) {\n  let dom, inCode = $context.parent.type.spec.code, slice\n  if (!html && !text) return null\n  let asText = text && (plainText || inCode || !html)\n  if (asText) {\n    view.someProp(\"transformPastedText\", f => { text = f(text) })\n    if (inCode) return new Slice(Fragment.from(view.state.schema.text(text)), 0, 0)\n    let parsed = view.someProp(\"clipboardTextParser\", f => f(text, $context))\n    if (parsed) {\n      slice = parsed\n    } else {\n      dom = document.createElement(\"div\")\n      text.trim().split(/(?:\\r\\n?|\\n)+/).forEach(block => {\n        dom.appendChild(document.createElement(\"p\")).textContent = block\n      })\n    }\n  } else {\n    view.someProp(\"transformPastedHTML\", f => html = f(html))\n    dom = readHTML(html)\n  }\n\n  let contextNode = dom && dom.querySelector(\"[data-pm-slice]\")\n  let sliceData = contextNode && /^(\\d+) (\\d+) (.*)/.exec(contextNode.getAttribute(\"data-pm-slice\"))\n  if (!slice) {\n    let parser = view.someProp(\"clipboardParser\") || view.someProp(\"domParser\") || DOMParser.fromSchema(view.state.schema)\n    slice = parser.parseSlice(dom, {preserveWhitespace: !!(asText || sliceData), context: $context})\n  }\n  if (sliceData)\n    slice = addContext(new Slice(slice.content, Math.min(slice.openStart, +sliceData[1]),\n                                 Math.min(slice.openEnd, +sliceData[2])), sliceData[3])\n  else // HTML wasn't created by ProseMirror. Make sure top-level siblings are coherent\n    slice = Slice.maxOpen(normalizeSiblings(slice.content, $context), false)\n  view.someProp(\"transformPasted\", f => { slice = f(slice) })\n  return slice\n}\n\n// Takes a slice parsed with parseSlice, which means there hasn't been\n// any content-expression checking done on the top nodes, tries to\n// find a parent node in the current context that might fit the nodes,\n// and if successful, rebuilds the slice so that it fits into that parent.\n//\n// This addresses the problem that Transform.replace expects a\n// coherent slice, and will fail to place a set of siblings that don't\n// fit anywhere in the schema.\nfunction normalizeSiblings(fragment, $context) {\n  if (fragment.childCount < 2) return fragment\n  for (let d = $context.depth; d >= 0; d--) {\n    let parent = $context.node(d)\n    let match = parent.contentMatchAt($context.index(d))\n    let lastWrap, result = []\n    fragment.forEach(node => {\n      if (!result) return\n      let wrap = match.findWrapping(node.type), inLast\n      if (!wrap) return result = null\n      if (inLast = result.length && lastWrap.length && addToSibling(wrap, lastWrap, node, result[result.length - 1], 0)) {\n        result[result.length - 1] = inLast\n      } else {\n        if (result.length) result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length)\n        let wrapped = withWrappers(node, wrap)\n        result.push(wrapped)\n        match = match.matchType(wrapped.type, wrapped.attrs)\n        lastWrap = wrap\n      }\n    })\n    if (result) return Fragment.from(result)\n  }\n  return fragment\n}\n\nfunction withWrappers(node, wrap, from = 0) {\n  for (let i = wrap.length - 1; i >= from; i--)\n    node = wrap[i].create(null, Fragment.from(node))\n  return node\n}\n\n// Used to group adjacent nodes wrapped in similar parents by\n// normalizeSiblings into the same parent node\nfunction addToSibling(wrap, lastWrap, node, sibling, depth) {\n  if (depth < wrap.length && depth < lastWrap.length && wrap[depth] == lastWrap[depth]) {\n    let inner = addToSibling(wrap, lastWrap, node, sibling.lastChild, depth + 1)\n    if (inner) return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner))\n    let match = sibling.contentMatchAt(sibling.childCount)\n    if (match.matchType(depth == wrap.length - 1 ? node.type : wrap[depth + 1]))\n      return sibling.copy(sibling.content.append(Fragment.from(withWrappers(node, wrap, depth + 1))))\n  }\n}\n\nfunction closeRight(node, depth) {\n  if (depth == 0) return node\n  let fragment = node.content.replaceChild(node.childCount - 1, closeRight(node.lastChild, depth - 1))\n  let fill = node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true)\n  return node.copy(fragment.append(fill))\n}\n\n// Trick from jQuery -- some elements must be wrapped in other\n// elements for innerHTML to work. I.e. if you do `div.innerHTML =\n// \"<td>..</td>\"` the table cells are ignored.\nconst wrapMap = {thead: [\"table\"], colgroup: [\"table\"], col: [\"table\", \"colgroup\"],\n                 tr: [\"table\", \"tbody\"], td: [\"table\", \"tbody\", \"tr\"], th: [\"table\", \"tbody\", \"tr\"]}\nlet detachedDoc = null\nfunction readHTML(html) {\n  let metas = /(\\s*<meta [^>]*>)*/.exec(html)\n  if (metas) html = html.slice(metas[0].length)\n  let doc = detachedDoc || (detachedDoc = document.implementation.createHTMLDocument(\"title\"))\n  let elt = doc.createElement(\"div\")\n  let firstTag = /(?:<meta [^>]*>)*<([a-z][^>\\s]+)/i.exec(html), wrap, depth = 0\n  if (wrap = firstTag && wrapMap[firstTag[1].toLowerCase()]) {\n    html = wrap.map(n => \"<\" + n + \">\").join(\"\") + html + wrap.map(n => \"</\" + n + \">\").reverse().join(\"\")\n    depth = wrap.length\n  }\n  elt.innerHTML = html\n  for (let i = 0; i < depth; i++) elt = elt.firstChild\n  return elt\n}\n\nfunction addContext(slice, context) {\n  if (!slice.size) return slice\n  let schema = slice.content.firstChild.type.schema, array\n  try { array = JSON.parse(context) }\n  catch(e) { return slice }\n  let {content, openStart, openEnd} = slice\n  for (let i = array.length - 2; i >= 0; i -= 2) {\n    let type = schema.nodes[array[i]]\n    if (!type || type.hasRequiredAttrs()) break\n    content = Fragment.from(type.create(array[i + 1], content))\n    openStart++; openEnd++\n  }\n  return new Slice(content, openStart, openEnd)\n}\n","import browser from \"./browser\"\nimport {DOMChange} from \"./domchange\"\nimport {domIndex} from \"./dom\"\n\nconst observeOptions = {childList: true, characterData: true, attributes: true, subtree: true, characterDataOldValue: true}\n// IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified\nconst useCharData = browser.ie && browser.ie_version <= 11\n\nexport class DOMObserver {\n  constructor(view) {\n    this.view = view\n    this.observer = window.MutationObserver &&\n      new window.MutationObserver(mutations => this.registerMutations(mutations))\n    if (useCharData)\n      this.onCharData = e => this.registerMutation({target: e.target, type: \"characterData\", oldValue: e.prevValue})\n  }\n\n  start() {\n    if (this.observer)\n      this.observer.observe(this.view.dom, observeOptions)\n    if (useCharData)\n      this.view.dom.addEventListener(\"DOMCharacterDataModified\", this.onCharData)\n  }\n\n  stop() {\n    if (this.observer) {\n      this.flush()\n      this.observer.disconnect()\n    }\n    if (useCharData)\n      this.view.dom.removeEventListener(\"DOMCharacterDataModified\", this.onCharData)\n  }\n\n  flush() {\n    if (this.observer)\n      this.registerMutations(this.observer.takeRecords())\n  }\n\n  registerMutations(mutations) {\n    for (let i = 0; i < mutations.length; i++)\n      this.registerMutation(mutations[i])\n  }\n\n  registerMutation(mut) {\n    if (!this.view.editable) return\n    let desc = this.view.docView.nearestDesc(mut.target)\n    if (mut.type == \"attributes\" &&\n        (desc == this.view.docView || mut.attributeName == \"contenteditable\")) return\n    if (!desc || desc.ignoreMutation(mut)) return\n\n    let from, to\n    if (mut.type == \"childList\") {\n      let fromOffset = mut.previousSibling && mut.previousSibling.parentNode == mut.target\n          ? domIndex(mut.previousSibling) + 1 : 0\n      if (fromOffset == -1) return\n      from = desc.localPosFromDOM(mut.target, fromOffset, -1)\n      let toOffset = mut.nextSibling && mut.nextSibling.parentNode == mut.target\n          ? domIndex(mut.nextSibling) : mut.target.childNodes.length\n      if (toOffset == -1) return\n      to = desc.localPosFromDOM(mut.target, toOffset, 1)\n    } else if (mut.type == \"attributes\") {\n      from = desc.posAtStart - desc.border\n      to = desc.posAtEnd + desc.border\n    } else { // \"characterData\"\n      from = desc.posAtStart\n      to = desc.posAtEnd\n      // An event was generated for a text change that didn't change\n      // any text. Mark the dom change to fall back to assuming the\n      // selection was typed over with an identical value if it can't\n      // find another change.\n      if (mut.target.nodeValue == mut.oldValue) DOMChange.start(this.view).typeOver = true\n    }\n\n    DOMChange.start(this.view).addRange(from, to)\n  }\n}\n","import {Selection, NodeSelection, TextSelection} from \"prosemirror-state\"\nimport {dropPoint} from \"prosemirror-transform\"\n\nimport browser from \"./browser\"\nimport {captureKeyDown} from \"./capturekeys\"\nimport {DOMChange} from \"./domchange\"\nimport {parseFromClipboard, serializeForClipboard} from \"./clipboard\"\nimport {DOMObserver} from \"./domobserver\"\nimport {selectionBetween, needsCursorWrapper} from \"./selection\"\n\n// A collection of DOM events that occur within the editor, and callback functions\n// to invoke when the event fires.\nconst handlers = {}, editHandlers = {}\n\nexport function initInput(view) {\n  view.shiftKey = false\n  view.mouseDown = null\n  view.inDOMChange = null\n  view.lastKeyCode = null\n  view.lastKeyCodeTime = 0\n  view.domObserver = new DOMObserver(view)\n  view.domObserver.start()\n\n  view.eventHandlers = Object.create(null)\n  for (let event in handlers) {\n    let handler = handlers[event]\n    view.dom.addEventListener(event, view.eventHandlers[event] = event => {\n      if (eventBelongsToView(view, event) && !runCustomHandler(view, event) &&\n          (view.editable || !(event.type in editHandlers)))\n        handler(view, event)\n    })\n  }\n  ensureListeners(view)\n}\n\nexport function destroyInput(view) {\n  view.domObserver.stop()\n  if (view.inDOMChange) view.inDOMChange.destroy()\n  for (let type in view.eventHandlers)\n    view.dom.removeEventListener(type, view.eventHandlers[type])\n}\n\nexport function ensureListeners(view) {\n  view.someProp(\"handleDOMEvents\", currentHandlers => {\n    for (let type in currentHandlers) if (!view.eventHandlers[type])\n      view.dom.addEventListener(type, view.eventHandlers[type] = event => runCustomHandler(view, event))\n  })\n}\n\nfunction runCustomHandler(view, event) {\n  return view.someProp(\"handleDOMEvents\", handlers => {\n    let handler = handlers[event.type]\n    return handler ? handler(view, event) || event.defaultPrevented : false\n  })\n}\n\nfunction eventBelongsToView(view, event) {\n  if (!event.bubbles) return true\n  if (event.defaultPrevented) return false\n  for (let node = event.target; node != view.dom; node = node.parentNode)\n    if (!node || node.nodeType == 11 ||\n        (node.pmViewDesc && node.pmViewDesc.stopEvent(event)))\n      return false\n  return true\n}\n\nexport function dispatchEvent(view, event) {\n  if (!runCustomHandler(view, event) && handlers[event.type] &&\n      (view.editable || !(event.type in editHandlers)))\n    handlers[event.type](view, event)\n}\n\neditHandlers.keydown = (view, event) => {\n  view.shiftKey = event.keyCode == 16 || event.shiftKey\n  if (view.inDOMChange) {\n    if (view.inDOMChange.composing) return\n    view.inDOMChange.finish()\n  }\n  view.lastKeyCode = event.keyCode\n  view.lastKeyCodeTime = Date.now()\n  if (view.someProp(\"handleKeyDown\", f => f(view, event)) || captureKeyDown(view, event))\n    event.preventDefault()\n  else\n    view.selectionReader.poll(\"key\")\n}\n\neditHandlers.keyup = (view, e) => {\n  if (e.keyCode == 16) view.shiftKey = false\n}\n\neditHandlers.keypress = (view, event) => {\n  if (view.inDOMChange || !event.charCode ||\n      event.ctrlKey && !event.altKey || browser.mac && event.metaKey) return\n\n  if (view.someProp(\"handleKeyPress\", f => f(view, event))) {\n    event.preventDefault()\n    return\n  }\n\n  let sel = view.state.selection\n  if (!(sel instanceof TextSelection) || !sel.$from.sameParent(sel.$to)) {\n    let text = String.fromCharCode(event.charCode)\n    if (!view.someProp(\"handleTextInput\", f => f(view, sel.$from.pos, sel.$to.pos, text)))\n      view.dispatch(view.state.tr.insertText(text).scrollIntoView())\n    event.preventDefault()\n  }\n}\n\nfunction eventCoords(event) { return {left: event.clientX, top: event.clientY} }\n\nlet lastClick = {time: 0, x: 0, y: 0, type: \"\"}\n\nfunction isNear(event, click) {\n  let dx = click.x - event.clientX, dy = click.y - event.clientY\n  return dx * dx + dy * dy < 100\n}\n\nfunction runHandlerOnContext(view, propName, pos, inside, event) {\n  if (inside == -1) return false\n  let $pos = view.state.doc.resolve(inside)\n  for (let i = $pos.depth + 1; i > 0; i--) {\n    if (view.someProp(propName, f => i > $pos.depth ? f(view, pos, $pos.nodeAfter, $pos.before(i), event, true)\n                                                    : f(view, pos, $pos.node(i), $pos.before(i), event, false)))\n      return true\n  }\n  return false\n}\n\nfunction updateSelection(view, selection, origin) {\n  if (!view.focused) view.focus()\n  let tr = view.state.tr.setSelection(selection)\n  if (origin == \"pointer\") tr.setMeta(\"pointer\", true)\n  view.dispatch(tr)\n}\n\nfunction selectClickedLeaf(view, inside) {\n  if (inside == -1) return false\n  let $pos = view.state.doc.resolve(inside), node = $pos.nodeAfter\n  if (node && node.isAtom && NodeSelection.isSelectable(node)) {\n    updateSelection(view, new NodeSelection($pos), \"pointer\")\n    return true\n  }\n  return false\n}\n\nfunction selectClickedNode(view, inside) {\n  if (inside == -1) return false\n  let sel = view.state.selection, selectedNode, selectAt\n  if (sel instanceof NodeSelection) selectedNode = sel.node\n\n  let $pos = view.state.doc.resolve(inside)\n  for (let i = $pos.depth + 1; i > 0; i--) {\n    let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i)\n    if (NodeSelection.isSelectable(node)) {\n      if (selectedNode && sel.$from.depth > 0 &&\n          i >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos)\n        selectAt = $pos.before(sel.$from.depth)\n      else\n        selectAt = $pos.before(i)\n      break\n    }\n  }\n\n  if (selectAt != null) {\n    updateSelection(view, NodeSelection.create(view.state.doc, selectAt), \"pointer\")\n    return true\n  } else {\n    return false\n  }\n}\n\nfunction handleSingleClick(view, pos, inside, event, selectNode) {\n  return runHandlerOnContext(view, \"handleClickOn\", pos, inside, event) ||\n    view.someProp(\"handleClick\", f => f(view, pos, event)) ||\n    (selectNode ? selectClickedNode(view, inside) : selectClickedLeaf(view, inside))\n}\n\nfunction handleDoubleClick(view, pos, inside, event) {\n  return runHandlerOnContext(view, \"handleDoubleClickOn\", pos, inside, event) ||\n    view.someProp(\"handleDoubleClick\", f => f(view, pos, event))\n}\n\nfunction handleTripleClick(view, pos, inside, event) {\n  return runHandlerOnContext(view, \"handleTripleClickOn\", pos, inside, event) ||\n    view.someProp(\"handleTripleClick\", f => f(view, pos, event)) ||\n    defaultTripleClick(view, inside)\n}\n\nfunction defaultTripleClick(view, inside) {\n  let doc = view.state.doc\n  if (inside == -1) {\n    if (doc.inlineContent) {\n      updateSelection(view, TextSelection.create(doc, 0, doc.content.size), \"pointer\")\n      return true\n    }\n    return false\n  }\n\n  let $pos = doc.resolve(inside)\n  for (let i = $pos.depth + 1; i > 0; i--) {\n    let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i)\n    let nodePos = $pos.before(i)\n    if (node.inlineContent)\n      updateSelection(view, TextSelection.create(doc, nodePos + 1, nodePos + 1 + node.content.size), \"pointer\")\n    else if (NodeSelection.isSelectable(node))\n      updateSelection(view, NodeSelection.create(doc, nodePos), \"pointer\")\n    else\n      continue\n    return true\n  }\n}\n\nfunction forceDOMFlush(view) {\n  if (!view.inDOMChange) return false\n  view.inDOMChange.finish(true)\n  return true\n}\n\nconst selectNodeModifier = browser.mac ? \"metaKey\" : \"ctrlKey\"\n\nhandlers.mousedown = (view, event) => {\n  view.shiftKey = event.shiftKey\n  let flushed = forceDOMFlush(view)\n  let now = Date.now(), type = \"singleClick\"\n  if (now - lastClick.time < 500 && isNear(event, lastClick) && !event[selectNodeModifier]) {\n    if (lastClick.type == \"singleClick\") type = \"doubleClick\"\n    else if (lastClick.type == \"doubleClick\") type = \"tripleClick\"\n  }\n  lastClick = {time: now, x: event.clientX, y: event.clientY, type}\n\n  let pos = view.posAtCoords(eventCoords(event))\n  if (!pos) return\n\n  if (type == \"singleClick\")\n    view.mouseDown = new MouseDown(view, pos, event, flushed)\n  else if ((type == \"doubleClick\" ? handleDoubleClick : handleTripleClick)(view, pos.pos, pos.inside, event))\n    event.preventDefault()\n  else\n    view.selectionReader.poll(\"pointer\")\n}\n\nclass MouseDown {\n  constructor(view, pos, event, flushed) {\n    this.view = view\n    this.pos = pos\n    this.event = event\n    this.flushed = flushed\n    this.selectNode = event[selectNodeModifier]\n    this.allowDefault = event.shiftKey\n\n    let targetNode, targetPos\n    if (pos.inside > -1) {\n      targetNode = view.state.doc.nodeAt(pos.inside)\n      targetPos = pos.inside\n    } else {\n      let $pos = view.state.doc.resolve(pos.pos)\n      targetNode = $pos.parent\n      targetPos = $pos.depth ? $pos.before() : 0\n    }\n\n    this.mightDrag = null\n    this.target = flushed ? null : event.target\n    if (targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false ||\n        view.state.selection instanceof NodeSelection && targetPos == view.state.selection.from)\n      this.mightDrag = {node: targetNode,\n                        pos: targetPos,\n                        addAttr: this.target && !this.target.draggable,\n                        setUneditable: this.target && browser.gecko && !this.target.hasAttribute(\"contentEditable\")}\n\n    if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {\n      this.view.domObserver.stop()\n      if (this.mightDrag.addAttr) this.target.draggable = true\n      if (this.mightDrag.setUneditable)\n        setTimeout(() => this.target.setAttribute(\"contentEditable\", \"false\"), 20)\n      this.view.domObserver.start()\n    }\n\n    view.root.addEventListener(\"mouseup\", this.up = this.up.bind(this))\n    view.root.addEventListener(\"mousemove\", this.move = this.move.bind(this))\n    view.selectionReader.poll(\"pointer\")\n  }\n\n  done() {\n    this.view.root.removeEventListener(\"mouseup\", this.up)\n    this.view.root.removeEventListener(\"mousemove\", this.move)\n    if (this.mightDrag && this.target) {\n      this.view.domObserver.stop()\n      if (this.mightDrag.addAttr) this.target.draggable = false\n      if (this.mightDrag.setUneditable) this.target.removeAttribute(\"contentEditable\")\n      this.view.domObserver.start()\n    }\n    this.view.mouseDown = null\n  }\n\n  up(event) {\n    this.done()\n\n    if (!this.view.dom.contains(event.target.nodeType == 3 ? event.target.parentNode : event.target))\n      return\n\n    if (this.allowDefault) {\n      // Force a cursor wrapper redraw if this was suppressed (to avoid an issue with IE drag-selection)\n      if (browser.ie && needsCursorWrapper(this.view.state)) this.view.updateState(this.view.state)\n      this.view.selectionReader.poll(\"pointer\")\n    } else if (handleSingleClick(this.view, this.pos.pos, this.pos.inside, event, this.selectNode)) {\n      event.preventDefault()\n    } else if (this.flushed) {\n      updateSelection(this.view, Selection.near(this.view.state.doc.resolve(this.pos.pos)), \"pointer\")\n      event.preventDefault()\n    } else {\n      this.view.selectionReader.poll(\"pointer\")\n    }\n  }\n\n  move(event) {\n    if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 ||\n                               Math.abs(this.event.y - event.clientY) > 4))\n      this.allowDefault = true\n    this.view.selectionReader.poll(\"pointer\")\n  }\n}\n\nhandlers.touchdown = view => {\n  forceDOMFlush(view)\n  view.selectionReader.poll(\"pointer\")\n}\n\nhandlers.contextmenu = view => forceDOMFlush(view)\n\n// Input compositions are hard. Mostly because the events fired by\n// browsers are A) very unpredictable and inconsistent, and B) not\n// cancelable.\n//\n// ProseMirror has the problem that it must not update the DOM during\n// a composition, or the browser will cancel it. What it does is keep\n// long-running operations (delayed DOM updates) when a composition is\n// active.\n//\n// We _do not_ trust the information in the composition events which,\n// apart from being very uninformative to begin with, is often just\n// plain wrong. Instead, when a composition ends, we parse the dom\n// around the original selection, and derive an update from that.\n\neditHandlers.compositionstart = editHandlers.compositionupdate = view => {\n  DOMChange.start(view, true)\n}\n\neditHandlers.compositionend = (view, e) => {\n  if (!view.inDOMChange) {\n    // We received a compositionend without having seen any previous\n    // events for the composition. If there's data in the event\n    // object, we assume that it's a real change, and start a\n    // composition. Otherwise, we just ignore it.\n    if (e.data) DOMChange.start(view, true)\n    else return\n  }\n\n  view.inDOMChange.compositionEnd()\n}\n\neditHandlers.input = view => {\n  let change = DOMChange.start(view)\n  if (!change.composing) change.finish()\n}\n\nfunction captureCopy(view, dom) {\n  // The extra wrapper is somehow necessary on IE/Edge to prevent the\n  // content from being mangled when it is put onto the clipboard\n  let doc = dom.ownerDocument\n  let wrap = doc.body.appendChild(doc.createElement(\"div\"))\n  wrap.appendChild(dom)\n  wrap.style.cssText = \"position: fixed; left: -10000px; top: 10px\"\n  let sel = getSelection(), range = doc.createRange()\n  range.selectNodeContents(dom)\n  // Done because IE will fire a selectionchange moving the selection\n  // to its start when removeAllRanges is called and the editor still\n  // has focus (which will mess up the editor's selection state).\n  view.dom.blur()\n  sel.removeAllRanges()\n  sel.addRange(range)\n  setTimeout(() => {\n    doc.body.removeChild(wrap)\n    view.focus()\n  }, 50)\n}\n\n// This is very crude, but unfortunately both these browsers _pretend_\n// that they have a clipboard API—all the objects and methods are\n// there, they just don't work, and they are hard to test.\nconst brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||\n      (browser.ios && browser.webkit_version < 604)\n\nhandlers.copy = editHandlers.cut = (view, e) => {\n  let sel = view.state.selection, cut = e.type == \"cut\"\n  if (sel.empty) return\n\n  // IE and Edge's clipboard interface is completely broken\n  let data = brokenClipboardAPI ? null : e.clipboardData\n  let slice = sel.content(), {dom, text} = serializeForClipboard(view, slice)\n  if (data) {\n    e.preventDefault()\n    data.clearData()\n    data.setData(\"text/html\", dom.innerHTML)\n    data.setData(\"text/plain\", text)\n  } else {\n    captureCopy(view, dom)\n  }\n  if (cut) view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta(\"uiEvent\", \"cut\"))\n}\n\nfunction sliceSingleNode(slice) {\n  return slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1 ? slice.content.firstChild : null\n}\n\nfunction capturePaste(view, e) {\n  let doc = view.dom.ownerDocument\n  let plainText = view.shiftKey || view.state.selection.$from.parent.type.spec.code\n  let target = doc.body.appendChild(doc.createElement(plainText ? \"textarea\" : \"div\"))\n  if (!plainText) target.contentEditable = \"true\"\n  target.style.cssText = \"position: fixed; left: -10000px; top: 10px\"\n  target.focus()\n  setTimeout(() => {\n    view.focus()\n    doc.body.removeChild(target)\n    if (plainText) doPaste(view, target.value, null, e)\n    else doPaste(view, target.textContent, target.innerHTML, e)\n  }, 50)\n}\n\nfunction doPaste(view, text, html, e) {\n  let slice = parseFromClipboard(view, text, html, view.shiftKey, view.state.selection.$from)\n  if (!slice) return false\n\n  if (view.someProp(\"handlePaste\", f => f(view, e, slice))) return true\n\n  let singleNode = sliceSingleNode(slice)\n  let tr = singleNode ? view.state.tr.replaceSelectionWith(singleNode, view.shiftKey) : view.state.tr.replaceSelection(slice)\n  view.dispatch(tr.scrollIntoView().setMeta(\"paste\", true).setMeta(\"uiEvent\", \"paste\"))\n  return true\n}\n\neditHandlers.paste = (view, e) => {\n  let data = brokenClipboardAPI ? null : e.clipboardData\n  if (data && (doPaste(view, data.getData(\"text/plain\"), data.getData(\"text/html\"), e) || data.files.length > 0))\n    e.preventDefault()\n  else\n    capturePaste(view, e)\n}\n\nclass Dragging {\n  constructor(slice, move) {\n    this.slice = slice\n    this.move = move\n  }\n}\n\nconst dragCopyModifier = browser.mac ? \"altKey\" : \"ctrlKey\"\n\nhandlers.dragstart = (view, e) => {\n  let mouseDown = view.mouseDown\n  if (mouseDown) mouseDown.done()\n  if (!e.dataTransfer) return\n\n  let sel = view.state.selection\n  let pos = sel.empty ? null : view.posAtCoords(eventCoords(e))\n  if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof NodeSelection ? sel.to - 1: sel.to)) {\n    // In selection\n  } else if (mouseDown && mouseDown.mightDrag) {\n    view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos)))\n  } else if (e.target && e.target.nodeType == 1) {\n    let desc = view.docView.nearestDesc(e.target, true)\n    if (!desc || !desc.node.type.spec.draggable || desc == view.docView) return\n    view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, desc.posBefore)))\n  }\n  let slice = view.state.selection.content(), {dom, text} = serializeForClipboard(view, slice)\n  e.dataTransfer.clearData()\n  e.dataTransfer.setData(brokenClipboardAPI ? \"Text\" : \"text/html\", dom.innerHTML)\n  if (!brokenClipboardAPI) e.dataTransfer.setData(\"text/plain\", text)\n  view.dragging = new Dragging(slice, !e[dragCopyModifier])\n}\n\nhandlers.dragend = view => {\n  window.setTimeout(() => view.dragging = null, 50)\n}\n\neditHandlers.dragover = editHandlers.dragenter = (_, e) => e.preventDefault()\n\neditHandlers.drop = (view, e) => {\n  let dragging = view.dragging\n  view.dragging = null\n\n  if (!e.dataTransfer) return\n\n  let eventPos = view.posAtCoords(eventCoords(e))\n  if (!eventPos) return\n  let $mouse = view.state.doc.resolve(eventPos.pos)\n  if (!$mouse) return\n  let slice = dragging && dragging.slice ||\n      parseFromClipboard(view, e.dataTransfer.getData(brokenClipboardAPI ? \"Text\" : \"text/plain\"),\n                         brokenClipboardAPI ? null : e.dataTransfer.getData(\"text/html\"), false, $mouse)\n  if (!slice) return\n\n  e.preventDefault()\n  if (view.someProp(\"handleDrop\", f => f(view, e, slice, dragging && dragging.move))) return\n  let insertPos = slice ? dropPoint(view.state.doc, $mouse.pos, slice) : $mouse.pos\n  if (insertPos == null) insertPos = $mouse.pos\n\n  let tr = view.state.tr\n  if (dragging && dragging.move) tr.deleteSelection()\n\n  let pos = tr.mapping.map(insertPos)\n  let isNode = slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1\n  let beforeInsert = tr.doc\n  if (isNode)\n    tr.replaceRangeWith(pos, pos, slice.content.firstChild)\n  else\n    tr.replaceRange(pos, pos, slice)\n  if (tr.doc.eq(beforeInsert)) return\n\n  let $pos = tr.doc.resolve(pos)\n  if (isNode && NodeSelection.isSelectable(slice.content.firstChild) &&\n      $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice.content.firstChild))\n    tr.setSelection(new NodeSelection($pos))\n  else\n    tr.setSelection(selectionBetween(view, $pos, tr.doc.resolve(tr.mapping.map(insertPos))))\n  view.focus()\n  view.dispatch(tr.setMeta(\"uiEvent\", \"drop\"))\n}\n\nhandlers.focus = view => {\n  if (!view.focused) {\n    view.dom.classList.add(\"ProseMirror-focused\")\n    view.focused = true\n  }\n}\n\nhandlers.blur = view => {\n  if (view.focused) {\n    view.dom.classList.remove(\"ProseMirror-focused\")\n    view.focused = false\n  }\n}\n\n// Make sure all handlers get registered\nfor (let prop in editHandlers) handlers[prop] = editHandlers[prop]\n","function compareObjs(a, b) {\n  if (a == b) return true\n  for (let p in a) if (a[p] !== b[p]) return false\n  for (let p in b) if (!(p in a)) return false\n  return true\n}\n\nclass WidgetType {\n  constructor(toDOM, spec) {\n    this.spec = spec || noSpec\n    this.side = this.spec.side || 0\n    this.toDOM = toDOM\n  }\n\n  map(mapping, span, offset, oldOffset) {\n    let {pos, deleted} = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1)\n    return deleted ? null : new Decoration(pos - offset, pos - offset, this)\n  }\n\n  valid() { return true }\n\n  eq(other) {\n    return this == other ||\n      (other instanceof WidgetType &&\n       (this.spec.key && this.spec.key == other.spec.key ||\n        this.toDOM == other.toDOM && compareObjs(this.spec, other.spec)))\n  }\n}\n\nclass InlineType {\n  constructor(attrs, spec) {\n    this.spec = spec || noSpec\n    this.attrs = attrs\n  }\n\n  map(mapping, span, offset, oldOffset) {\n    let from = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset\n    let to = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset\n    return from >= to ? null : new Decoration(from, to, this)\n  }\n\n  valid(_, span) { return span.from < span.to }\n\n  eq(other) {\n    return this == other ||\n      (other instanceof InlineType && compareObjs(this.attrs, other.attrs) &&\n       compareObjs(this.spec, other.spec))\n  }\n\n  static is(span) { return span.type instanceof InlineType }\n}\n\nclass NodeType {\n  constructor(attrs, spec) {\n    this.spec = spec || noSpec\n    this.attrs = attrs\n  }\n\n  map(mapping, span, offset, oldOffset) {\n    let from = mapping.mapResult(span.from + oldOffset, 1)\n    if (from.deleted) return null\n    let to = mapping.mapResult(span.to + oldOffset, -1)\n    if (to.deleted || to.pos <= from.pos) return null\n    return new Decoration(from.pos - offset, to.pos - offset, this)\n  }\n\n  valid(node, span) {\n    let {index, offset} = node.content.findIndex(span.from)\n    return offset == span.from && offset + node.child(index).nodeSize == span.to\n  }\n\n  eq(other) {\n    return this == other ||\n      (other instanceof NodeType && compareObjs(this.attrs, other.attrs) &&\n       compareObjs(this.spec, other.spec))\n  }\n}\n\n// ::- Decoration objects can be provided to the view through the\n// [`decorations` prop](#view.EditorProps.decorations). They come in\n// several variants—see the static members of this class for details.\nexport class Decoration {\n  constructor(from, to, type) {\n    // :: number\n    // The start position of the decoration.\n    this.from = from\n    // :: number\n    // The end position. Will be the same as `from` for [widget\n    // decorations](#view.Decoration^widget).\n    this.to = to\n    this.type = type\n  }\n\n  copy(from, to) {\n    return new Decoration(from, to, this.type)\n  }\n\n  eq(other) {\n    return this.type.eq(other.type) && this.from == other.from && this.to == other.to\n  }\n\n  map(mapping, offset, oldOffset) {\n    return this.type.map(mapping, this, offset, oldOffset)\n  }\n\n  // :: (number, union<(view: EditorView, getPos: () → number) → dom.Node, dom.Node>, ?Object) → Decoration\n  // Creates a widget decoration, which is a DOM node that's shown in\n  // the document at the given position. It is recommended that you\n  // delay rendering the widget by passing a function that will be\n  // called when the widget is actually drawn in a view, but you can\n  // also directly pass a DOM node. `getPos` can be used to find the\n  // widget's current document position.\n  //\n  //   spec::- These options are supported:\n  //\n  //     side:: ?number\n  //     Controls which side of the document position this widget is\n  //     associated with. When negative, it is drawn before a cursor\n  //     at its position, and content inserted at that position ends\n  //     up after the widget. When zero (the default) or positive, the\n  //     widget is drawn after the cursor and content inserted there\n  //     ends up before the widget.\n  //\n  //     When there are multiple widgets at a given position, their\n  //     `side` values determine the order in which they appear. Those\n  //     with lower values appear first. The ordering of widgets with\n  //     the same `side` value is unspecified.\n  //\n  //     When `marks` is null, `side` also determines the marks that\n  //     the widget is wrapped in—those of the node before when\n  //     negative, those of the node after when positive.\n  //\n  //     marks:: ?[Mark]\n  //     The precise set of marks to draw around the widget.\n  //\n  //     stopEvent:: ?(event: dom.Event) → bool\n  //     Can be used to control which DOM events, when they bubble out\n  //     of this widget, the editor view should ignore.\n  //\n  //     key:: ?string\n  //     When comparing decorations of this type (in order to decide\n  //     whether it needs to be redrawn), ProseMirror will by default\n  //     compare the widget DOM node by identity. If you pass a key,\n  //     that key will be compared instead, which can be useful when\n  //     you generate decorations on the fly and don't want to store\n  //     and reuse DOM nodes. Make sure that any widgets with the same\n  //     key are interchangeable—if widgets differ in, for example,\n  //     the behavior of some event handler, they should get\n  //     different keys.\n  static widget(pos, toDOM, spec) {\n    return new Decoration(pos, pos, new WidgetType(toDOM, spec))\n  }\n\n  // :: (number, number, DecorationAttrs, ?Object) → Decoration\n  // Creates an inline decoration, which adds the given attributes to\n  // each inline node between `from` and `to`.\n  //\n  //   spec::- These options are recognized:\n  //\n  //     inclusiveStart:: ?bool\n  //     Determines how the left side of the decoration is\n  //     [mapped](#transform.Position_Mapping) when content is\n  //     inserted directly at that position. By default, the decoration\n  //     won't include the new content, but you can set this to `true`\n  //     to make it inclusive.\n  //\n  //     inclusiveEnd:: ?bool\n  //     Determines how the right side of the decoration is mapped.\n  //     See\n  //     [`inclusiveStart`](#view.Decoration^inline^spec.inclusiveStart).\n  static inline(from, to, attrs, spec) {\n    return new Decoration(from, to, new InlineType(attrs, spec))\n  }\n\n  // :: (number, number, DecorationAttrs, ?Object) → Decoration\n  // Creates a node decoration. `from` and `to` should point precisely\n  // before and after a node in the document. That node, and only that\n  // node, will receive the given attributes.\n  static node(from, to, attrs, spec) {\n    return new Decoration(from, to, new NodeType(attrs, spec))\n  }\n\n  // :: Object\n  // The spec provided when creating this decoration. Can be useful\n  // if you've stored extra information in that object.\n  get spec() { return this.type.spec }\n}\n\n// DecorationAttrs:: interface\n// A set of attributes to add to a decorated node. Most properties\n// simply directly correspond to DOM attributes of the same name,\n// which will be set to the property's value. These are exceptions:\n//\n//   class:: ?string\n//   A CSS class name or a space-separated set of class names to be\n//   _added_ to the classes that the node already had.\n//\n//   style:: ?string\n//   A string of CSS to be _added_ to the node's existing `style` property.\n//\n//   nodeName:: ?string\n//   When non-null, the target node is wrapped in a DOM element of\n//   this type (and the other attributes are applied to this element).\n\nconst none = [], noSpec = {}\n\n// ::- A collection of [decorations](#view.Decoration), organized in\n// such a way that the drawing algorithm can efficiently use and\n// compare them. This is a persistent data structure—it is not\n// modified, updates create a new value.\nexport class DecorationSet {\n  constructor(local, children) {\n    this.local = local && local.length ? local : none\n    this.children = children && children.length ? children : none\n  }\n\n  // :: (Node, [Decoration]) → DecorationSet\n  // Create a set of decorations, using the structure of the given\n  // document.\n  static create(doc, decorations) {\n    return decorations.length ? buildTree(decorations, doc, 0, noSpec) : empty\n  }\n\n  // :: (?number, ?number, ?(spec: Object) → bool) → [Decoration]\n  // Find all decorations in this set which touch the given range\n  // (including decorations that start or end directly at the\n  // boundaries) and match the given predicate on their spec. When\n  // `start` and `end` are omitted, all decorations in the set are\n  // considered. When `predicate` isn't given, all decorations are\n  // asssumed to match.\n  find(start, end, predicate) {\n    let result = []\n    this.findInner(start == null ? 0 : start, end == null ? 1e9 : end, result, 0, predicate)\n    return result\n  }\n\n  findInner(start, end, result, offset, predicate) {\n    for (let i = 0; i < this.local.length; i++) {\n      let span = this.local[i]\n      if (span.from <= end && span.to >= start && (!predicate || predicate(span.spec)))\n        result.push(span.copy(span.from + offset, span.to + offset))\n    }\n    for (let i = 0; i < this.children.length; i += 3) {\n      if (this.children[i] < end && this.children[i + 1] > start) {\n        let childOff = this.children[i] + 1\n        this.children[i + 2].findInner(start - childOff, end - childOff, result, offset + childOff, predicate)\n      }\n    }\n  }\n\n  // :: (Mapping, Node, ?Object) → DecorationSet\n  // Map the set of decorations in response to a change in the\n  // document.\n  //\n  //   options::- An optional set of options.\n  //\n  //     onRemove:: ?(decorationSpec: Object)\n  //     When given, this function will be called for each decoration\n  //     that gets dropped as a result of the mapping, passing the\n  //     spec of that decoration.\n  map(mapping, doc, options) {\n    if (this == empty || mapping.maps.length == 0) return this\n    return this.mapInner(mapping, doc, 0, 0, options || noSpec)\n  }\n\n  mapInner(mapping, node, offset, oldOffset, options) {\n    let newLocal\n    for (let i = 0; i < this.local.length; i++) {\n      let mapped = this.local[i].map(mapping, offset, oldOffset)\n      if (mapped && mapped.type.valid(node, mapped)) (newLocal || (newLocal = [])).push(mapped)\n      else if (options.onRemove) options.onRemove(this.local[i].spec)\n    }\n\n    if (this.children.length)\n      return mapChildren(this.children, newLocal, mapping, node, offset, oldOffset, options)\n    else\n      return newLocal ? new DecorationSet(newLocal.sort(byPos)) : empty\n  }\n\n  // :: (Node, [Decoration]) → DecorationSet\n  // Add the given array of decorations to the ones in the set,\n  // producing a new set. Needs access to the current document to\n  // create the appropriate tree structure.\n  add(doc, decorations) {\n    if (!decorations.length) return this\n    if (this == empty) return DecorationSet.create(doc, decorations)\n    return this.addInner(doc, decorations, 0)\n  }\n\n  addInner(doc, decorations, offset) {\n    let children, childIndex = 0\n    doc.forEach((childNode, childOffset) => {\n      let baseOffset = childOffset + offset, found\n      if (!(found = takeSpansForNode(decorations, childNode, baseOffset))) return\n\n      if (!children) children = this.children.slice()\n      while (childIndex < children.length && children[childIndex] < childOffset) childIndex += 3\n      if (children[childIndex] == childOffset)\n        children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found, baseOffset + 1)\n      else\n        children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree(found, childNode, baseOffset + 1, noSpec))\n      childIndex += 3\n    })\n\n    let local = moveSpans(childIndex ? withoutNulls(decorations) : decorations, -offset)\n    return new DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local,\n                             children || this.children)\n  }\n\n  // :: ([Decoration]) → DecorationSet\n  // Create a new set that contains the decorations in this set, minus\n  // the ones in the given array.\n  remove(decorations) {\n    if (decorations.length == 0 || this == empty) return this\n    return this.removeInner(decorations, 0)\n  }\n\n  removeInner(decorations, offset) {\n    let children = this.children, local = this.local\n    for (let i = 0; i < children.length; i += 3) {\n      let found, from = children[i] + offset, to = children[i + 1] + offset\n      for (let j = 0, span; j < decorations.length; j++) if (span = decorations[j]) {\n        if (span.from > from && span.to < to) {\n          decorations[j] = null\n          ;(found || (found = [])).push(span)\n        }\n      }\n      if (!found) continue\n      if (children == this.children) children = this.children.slice()\n      let removed = children[i + 2].removeInner(found, from + 1)\n      if (removed != empty) {\n        children[i + 2] = removed\n      } else {\n        children.splice(i, 3)\n        i -= 3\n      }\n    }\n    if (local.length) for (let i = 0, span; i < decorations.length; i++) if (span = decorations[i]) {\n      for (let j = 0; j < local.length; j++) if (local[j].type.eq(span.type)) {\n        if (local == this.local) local = this.local.slice()\n        local.splice(j--, 1)\n      }\n    }\n    if (children == this.children && local == this.local) return this\n    return local.length || children.length ? new DecorationSet(local, children) : empty\n  }\n\n  forChild(offset, node) {\n    if (this == empty) return this\n    if (node.isLeaf) return DecorationSet.empty\n\n    let child, local\n    for (let i = 0; i < this.children.length; i += 3) if (this.children[i] >= offset) {\n      if (this.children[i] == offset) child = this.children[i + 2]\n      break\n    }\n    let start = offset + 1, end = start + node.content.size\n    for (let i = 0; i < this.local.length; i++) {\n      let dec = this.local[i]\n      if (dec.from < end && dec.to > start && (dec.type instanceof InlineType)) {\n        let from = Math.max(start, dec.from) - start, to = Math.min(end, dec.to) - start\n        if (from < to) (local || (local = [])).push(dec.copy(from, to))\n      }\n    }\n    if (local) {\n      let localSet = new DecorationSet(local.sort(byPos))\n      return child ? new DecorationGroup([localSet, child]) : localSet\n    }\n    return child || empty\n  }\n\n  eq(other) {\n    if (this == other) return true\n    if (!(other instanceof DecorationSet) ||\n        this.local.length != other.local.length ||\n        this.children.length != other.children.length) return false\n    for (let i = 0; i < this.local.length; i++)\n      if (!this.local[i].eq(other.local[i])) return false\n    for (let i = 0; i < this.children.length; i += 3)\n      if (this.children[i] != other.children[i] ||\n          this.children[i + 1] != other.children[i + 1] ||\n          !this.children[i + 2].eq(other.children[i + 2])) return false\n    return false\n  }\n\n  locals(node) {\n    return removeOverlap(this.localsInner(node))\n  }\n\n  localsInner(node) {\n    if (this == empty) return none\n    if (node.inlineContent || !this.local.some(InlineType.is)) return this.local\n    let result = []\n    for (let i = 0; i < this.local.length; i++) {\n      if (!(this.local[i].type instanceof InlineType))\n        result.push(this.local[i])\n    }\n    return result\n  }\n}\n\nconst empty = new DecorationSet()\n\n// :: DecorationSet\n// The empty set of decorations.\nDecorationSet.empty = empty\n\nDecorationSet.removeOverlap = removeOverlap\n\n// :- An abstraction that allows the code dealing with decorations to\n// treat multiple DecorationSet objects as if it were a single object\n// with (a subset of) the same interface.\nclass DecorationGroup {\n  constructor(members) {\n    this.members = members\n  }\n\n  forChild(offset, child) {\n    if (child.isLeaf) return DecorationSet.empty\n    let found = []\n    for (let i = 0; i < this.members.length; i++) {\n      let result = this.members[i].forChild(offset, child)\n      if (result == empty) continue\n      if (result instanceof DecorationGroup) found = found.concat(result.members)\n      else found.push(result)\n    }\n    return DecorationGroup.from(found)\n  }\n\n  eq(other) {\n    if (!(other instanceof DecorationGroup) ||\n        other.members.length != this.members.length) return false\n    for (let i = 0; i < this.members.length; i++)\n      if (!this.members[i].eq(other.members[i])) return false\n    return true\n  }\n\n  locals(node) {\n    let result, sorted = true\n    for (let i = 0; i < this.members.length; i++) {\n      let locals = this.members[i].localsInner(node)\n      if (!locals.length) continue\n      if (!result) {\n        result = locals\n      } else {\n        if (sorted) {\n          result = result.slice()\n          sorted = false\n        }\n        for (let j = 0; j < locals.length; j++) result.push(locals[j])\n      }\n    }\n    return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none\n  }\n\n  // : ([DecorationSet]) → union<DecorationSet, DecorationGroup>\n  // Create a group for the given array of decoration sets, or return\n  // a single set when possible.\n  static from(members) {\n    switch (members.length) {\n      case 0: return empty\n      case 1: return members[0]\n      default: return new DecorationGroup(members)\n    }\n  }\n}\n\nfunction mapChildren(oldChildren, newLocal, mapping, node, offset, oldOffset, options) {\n  let children = oldChildren.slice()\n\n  // Mark the children that are directly touched by changes, and\n  // move those that are after the changes.\n  let shift = (oldStart, oldEnd, newStart, newEnd) => {\n    for (let i = 0; i < children.length; i += 3) {\n      let end = children[i + 1], dSize\n      if (end == -1 || oldStart > end + oldOffset) continue\n      if (oldEnd >= children[i] + oldOffset) {\n        children[i + 1] = -1\n      } else if (dSize = (newEnd - newStart) - (oldEnd - oldStart) + (oldOffset - offset)) {\n        children[i] += dSize\n        children[i + 1] += dSize\n      }\n    }\n  }\n  for (let i = 0; i < mapping.maps.length; i++) mapping.maps[i].forEach(shift)\n\n  // Find the child nodes that still correspond to a single node,\n  // recursively call mapInner on them and update their positions.\n  let mustRebuild = false\n  for (let i = 0; i < children.length; i += 3) if (children[i + 1] == -1) { // Touched nodes\n    let from = mapping.map(children[i] + oldOffset), fromLocal = from - offset\n    if (fromLocal < 0 || fromLocal >= node.content.size) {\n      mustRebuild = true\n      continue\n    }\n    // Must read oldChildren because children was tagged with -1\n    let to = mapping.map(oldChildren[i + 1] + oldOffset, -1), toLocal = to - offset\n    let {index, offset: childOffset} = node.content.findIndex(fromLocal)\n    let childNode = node.maybeChild(index)\n    if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {\n      let mapped = children[i + 2].mapInner(mapping, childNode, from + 1, children[i] + oldOffset + 1, options)\n      if (mapped != empty) {\n        children[i] = fromLocal\n        children[i + 1] = toLocal\n        children[i + 2] = mapped\n      } else {\n        children[i + 1] = -2\n        mustRebuild = true\n      }\n    } else {\n      mustRebuild = true\n    }\n  }\n\n  // Remaining children must be collected and rebuilt into the appropriate structure\n  if (mustRebuild) {\n    let decorations = mapAndGatherRemainingDecorations(children, oldChildren, newLocal || [], mapping,\n                                                       offset, oldOffset, options)\n    let built = buildTree(decorations, node, 0, options)\n    newLocal = built.local\n    for (let i = 0; i < children.length; i += 3) if (children[i + 1] < 0) {\n      children.splice(i, 3)\n      i -= 3\n    }\n    for (let i = 0, j = 0; i < built.children.length; i += 3) {\n      let from = built.children[i]\n      while (j < children.length && children[j] < from) j += 3\n      children.splice(j, 0, built.children[i], built.children[i + 1], built.children[i + 2])\n    }\n  }\n\n  return new DecorationSet(newLocal && newLocal.sort(byPos), children)\n}\n\nfunction moveSpans(spans, offset) {\n  if (!offset || !spans.length) return spans\n  let result = []\n  for (let i = 0; i < spans.length; i++) {\n    let span = spans[i]\n    result.push(new Decoration(span.from + offset, span.to + offset, span.type))\n  }\n  return result\n}\n\nfunction mapAndGatherRemainingDecorations(children, oldChildren, decorations, mapping, offset, oldOffset, options) {\n  // Gather all decorations from the remaining marked children\n  function gather(set, oldOffset) {\n    for (let i = 0; i < set.local.length; i++) {\n      let mapped = set.local[i].map(mapping, offset, oldOffset)\n      if (mapped) decorations.push(mapped)\n      else if (options.onRemove) options.onRemove(set.local[i].spec)\n    }\n    for (let i = 0; i < set.children.length; i += 3)\n      gather(set.children[i + 2], set.children[i] + oldOffset + 1)\n  }\n  for (let i = 0; i < children.length; i += 3) if (children[i + 1] == -1)\n    gather(children[i + 2], oldChildren[i] + oldOffset + 1)\n\n  return decorations\n}\n\nfunction takeSpansForNode(spans, node, offset) {\n  if (node.isLeaf) return null\n  let end = offset + node.nodeSize, found = null\n  for (let i = 0, span; i < spans.length; i++) {\n    if ((span = spans[i]) && span.from > offset && span.to < end) {\n      ;(found || (found = [])).push(span)\n      spans[i] = null\n    }\n  }\n  return found\n}\n\nfunction withoutNulls(array) {\n  let result = []\n  for (let i = 0; i < array.length; i++)\n    if (array[i] != null) result.push(array[i])\n  return result\n}\n\n// : ([Decoration], Node, number) → DecorationSet\n// Build up a tree that corresponds to a set of decorations. `offset`\n// is a base offset that should be subtractet from the `from` and `to`\n// positions in the spans (so that we don't have to allocate new spans\n// for recursive calls).\nfunction buildTree(spans, node, offset, options) {\n  let children = [], hasNulls = false\n  node.forEach((childNode, localStart) => {\n    let found = takeSpansForNode(spans, childNode, localStart + offset)\n    if (found) {\n      hasNulls = true\n      let subtree = buildTree(found, childNode, offset + localStart + 1, options)\n      if (subtree != empty)\n        children.push(localStart, localStart + childNode.nodeSize, subtree)\n    }\n  })\n  let locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset).sort(byPos)\n  for (let i = 0; i < locals.length; i++) if (!locals[i].type.valid(node, locals[i])) {\n    if (options.onRemove) options.onRemove(locals[i].spec)\n    locals.splice(i--, 1)\n  }\n  return locals.length || children.length ? new DecorationSet(locals, children) : empty\n}\n\n// : (Decoration, Decoration) → number\n// Used to sort decorations so that ones with a low start position\n// come first, and within a set with the same start position, those\n// with an smaller end position come first.\nfunction byPos(a, b) {\n  return a.from - b.from || a.to - b.to\n}\n\n// : ([Decoration]) → [Decoration]\n// Scan a sorted array of decorations for partially overlapping spans,\n// and split those so that only fully overlapping spans are left (to\n// make subsequent rendering easier). Will return the input array if\n// no partially overlapping spans are found (the common case).\nfunction removeOverlap(spans) {\n  let working = spans\n  for (let i = 0; i < working.length - 1; i++) {\n    let span = working[i]\n    if (span.from != span.to) for (let j = i + 1; j < working.length; j++) {\n      let next = working[j]\n      if (next.from == span.from) {\n        if (next.to != span.to) {\n          if (working == spans) working = spans.slice()\n          // Followed by a partially overlapping larger span. Split that\n          // span.\n          working[j] = next.copy(next.from, span.to)\n          insertAhead(working, j + 1, next.copy(span.to, next.to))\n        }\n        continue\n      } else {\n        if (next.from < span.to) {\n          if (working == spans) working = spans.slice()\n          // The end of this one overlaps with a subsequent span. Split\n          // this one.\n          working[i] = span.copy(span.from, next.from)\n          insertAhead(working, j, span.copy(next.from, span.to))\n        }\n        break\n      }\n    }\n  }\n  return working\n}\n\nfunction insertAhead(array, i, deco) {\n  while (i < array.length && byPos(deco, array[i]) > 0) i++\n  array.splice(i, 0, deco)\n}\n\n// : (EditorView) → union<DecorationSet, DecorationGroup>\n// Get the decorations associated with the current props of a view.\nexport function viewDecorations(view) {\n  let found = []\n  view.someProp(\"decorations\", f => {\n    let result = f(view.state)\n    if (result && result != empty) found.push(result)\n  })\n  if (view.cursorWrapper)\n    found.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco]))\n  return DecorationGroup.from(found)\n}\n","import {Mark} from \"prosemirror-model\"\nimport {NodeSelection} from \"prosemirror-state\"\n\nimport {scrollRectIntoView, posAtCoords, coordsAtPos, endOfTextblock, storeScrollPos, resetScrollPos} from \"./domcoords\"\nimport {docViewDesc} from \"./viewdesc\"\nimport {initInput, destroyInput, dispatchEvent, ensureListeners} from \"./input\"\nimport {SelectionReader, selectionToDOM, needsCursorWrapper} from \"./selection\"\nimport {Decoration, viewDecorations} from \"./decoration\"\nimport browser from \"./browser\"\n\nexport {Decoration, DecorationSet} from \"./decoration\"\n\n// Exported for testing\nexport {serializeForClipboard as __serializeForClipboard, parseFromClipboard as __parseFromClipboard} from \"./clipboard\"\n\n// ::- An editor view manages the DOM structure that represents an\n// editable document. Its state and behavior are determined by its\n// [props](#view.DirectEditorProps).\nexport class EditorView {\n  // :: (?union<dom.Node, (dom.Node), {mount: dom.Node}>, DirectEditorProps)\n  // Create a view. `place` may be a DOM node that the editor should\n  // be appended to, a function that will place it into the document,\n  // or an object whose `mount` property holds the node to use as the\n  // document container. If it is `null`, the editor will not be added\n  // to the document.\n  constructor(place, props) {\n    this._props = props\n    // :: EditorState\n    // The view's current [state](#state.EditorState).\n    this.state = props.state\n\n    this.dispatch = this.dispatch.bind(this)\n\n    this._root = null\n    this.focused = false\n\n    // :: dom.Element\n    // An editable DOM node containing the document. (You probably\n    // should not directly interfere with its content.)\n    this.dom = (place && place.mount) || document.createElement(\"div\")\n    if (place) {\n      if (place.appendChild) place.appendChild(this.dom)\n      else if (place.apply) place(this.dom)\n      else if (place.mount) this.mounted = true\n    }\n\n    this.editable = getEditable(this)\n    this.redraw = false\n    this.cursorWrapper = null\n    updateCursorWrapper(this)\n    this.nodeViews = buildNodeViews(this)\n    this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this)\n\n    this.lastSelectedViewDesc = null\n    // :: ?{slice: Slice, move: bool}\n    // When editor content is being dragged, this object contains\n    // information about the dragged slice and whether it is being\n    // copied or moved. At any other time, it is null.\n    this.dragging = null\n    initInput(this) // Must be done before creating a SelectionReader\n\n    this.selectionReader = new SelectionReader(this)\n\n    this.pluginViews = []\n    this.updatePluginViews()\n  }\n\n  // :: DirectEditorProps\n  // The view's current [props](#view.EditorProps).\n  get props() {\n    if (this._props.state != this.state) {\n      let prev = this._props\n      this._props = {}\n      for (let name in prev) this._props[name] = prev[name]\n      this._props.state = this.state\n    }\n    return this._props\n  }\n\n  // :: (DirectEditorProps)\n  // Update the view's props. Will immediately cause an update to\n  // the DOM.\n  update(props) {\n    if (props.handleDOMEvents != this._props.handleDOMEvents) ensureListeners(this)\n    this._props = props\n    let nodeViews = buildNodeViews(this)\n    if (changedNodeViews(nodeViews, this.nodeViews)) {\n      this.nodeViews = nodeViews\n      this.redraw = true\n    }\n    this.updateState(props.state)\n  }\n\n  // :: (DirectEditorProps)\n  // Update the view by updating existing props object with the object\n  // given as argument. Equivalent to `view.update(Object.assign({},\n  // view.props, props))`.\n  setProps(props) {\n    let updated = {}\n    for (let name in this._props) updated[name] = this._props[name]\n    updated.state = this.state\n    for (let name in props) updated[name] = props[name]\n    this.update(updated)\n  }\n\n  // :: (EditorState)\n  // Update the editor's `state` prop, without touching any of the\n  // other props.\n  updateState(state) {\n    let prev = this.state\n    this.state = state\n    if (prev.plugins != state.plugins) ensureListeners(this)\n\n    this.domObserver.flush()\n    if (this.inDOMChange && this.inDOMChange.stateUpdated(state)) return\n\n    let prevEditable = this.editable\n    this.editable = getEditable(this)\n    updateCursorWrapper(this)\n    let innerDeco = viewDecorations(this), outerDeco = computeDocDeco(this)\n\n    let scroll = prev.config != state.config ? \"reset\"\n        : state.scrollToSelection > prev.scrollToSelection ? \"to selection\" : \"preserve\"\n    let updateDoc = this.redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco)\n    let updateSel = updateDoc || !state.selection.eq(prev.selection) || this.selectionReader.domChanged()\n    let oldScrollPos = scroll == \"preserve\" && updateSel && storeScrollPos(this)\n\n    if (updateSel) {\n      this.domObserver.stop()\n      let forceSelUpdate = false\n      if (updateDoc) {\n        // Work around an issue in Chrome where changing the DOM\n        // around the active selection puts it into a broken state\n        // where the thing the user sees differs from the selection\n        // reported by the Selection object (#710)\n        let startSelContext = browser.chrome && selectionContext(this.root)\n        if (this.redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {\n          this.docView.destroy()\n          this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this)\n          this.redraw = false\n        }\n        this.selectionReader.clearDOMState()\n        if (startSelContext)\n          forceSelUpdate = needChromeSelectionForce(startSelContext, this.root)\n      }\n      selectionToDOM(this, false, forceSelUpdate)\n      this.domObserver.start()\n    }\n\n    if (prevEditable != this.editable) this.selectionReader.editableChanged()\n    this.updatePluginViews(prev)\n\n    if (scroll == \"reset\") {\n      this.dom.scrollTop = 0\n    } else if (scroll == \"to selection\") {\n      let startDOM = this.root.getSelection().focusNode\n      if (this.someProp(\"handleScrollToSelection\", f => f(this)))\n        {} // Handled\n      else if (state.selection instanceof NodeSelection)\n        scrollRectIntoView(this, this.docView.domAfterPos(state.selection.from).getBoundingClientRect(), startDOM)\n      else\n        scrollRectIntoView(this, this.coordsAtPos(state.selection.head), startDOM)\n    } else if (oldScrollPos) {\n      resetScrollPos(oldScrollPos)\n    }\n  }\n\n  destroyPluginViews() {\n    let view\n    while (view = this.pluginViews.pop()) if (view.destroy) view.destroy()\n  }\n\n  updatePluginViews(prevState) {\n    let plugins = this.state.plugins\n    if (!prevState || prevState.plugins != plugins) {\n      this.destroyPluginViews()\n      for (let i = 0; i < plugins.length; i++) {\n        let plugin = plugins[i]\n        if (plugin.spec.view) this.pluginViews.push(plugin.spec.view(this))\n      }\n    } else {\n      for (let i = 0; i < this.pluginViews.length; i++) {\n        let pluginView = this.pluginViews[i]\n        if (pluginView.update) pluginView.update(this, prevState)\n      }\n    }\n  }\n\n  // :: (string, ?(prop: *) → *) → *\n  // Goes over the values of a prop, first those provided directly,\n  // then those from plugins (in order), and calls `f` every time a\n  // non-undefined value is found. When `f` returns a truthy value,\n  // that is immediately returned. When `f` isn't provided, it is\n  // treated as the identity function (the prop value is returned\n  // directly).\n  someProp(propName, f) {\n    let prop = this._props && this._props[propName], value\n    if (prop != null && (value = f ? f(prop) : prop)) return value\n    let plugins = this.state.plugins\n    if (plugins) for (let i = 0; i < plugins.length; i++) {\n      let prop = plugins[i].props[propName]\n      if (prop != null && (value = f ? f(prop) : prop)) return value\n    }\n  }\n\n  // :: () → bool\n  // Query whether the view has focus.\n  hasFocus() {\n    return this.root.activeElement == this.dom\n  }\n\n  // :: ()\n  // Focus the editor.\n  focus() {\n    this.domObserver.stop()\n    selectionToDOM(this, true)\n    this.domObserver.start()\n    if (this.editable) this.dom.focus()\n  }\n\n  // :: union<dom.Document, dom.DocumentFragment>\n  // Get the document root in which the editor exists. This will\n  // usually be the top-level `document`, but might be a [shadow\n  // DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)\n  // root if the editor is inside one.\n  get root() {\n    let cached = this._root\n    if (cached == null) for (let search = this.dom.parentNode; search; search = search.parentNode) {\n      if (search.nodeType == 9 || (search.nodeType == 11 && search.host))\n        return this._root = search\n    }\n    return cached || document\n  }\n\n  // :: ({left: number, top: number}) → ?{pos: number, inside: number}\n  // Given a pair of viewport coordinates, return the document\n  // position that corresponds to them. May return null if the given\n  // coordinates aren't inside of the visible editor. When an object\n  // is returned, its `pos` property is the position nearest to the\n  // coordinates, and its `inside` property holds the position of the\n  // inner node that the position falls inside of, or -1 if it is at\n  // the top level, not in any node.\n  posAtCoords(coords) {\n    let pos = posAtCoords(this, coords)\n    if (this.inDOMChange && pos) {\n      pos.pos = this.inDOMChange.mapping.map(pos.pos)\n      if (pos.inside != -1) pos.inside = this.inDOMChange.mapping.map(pos.inside)\n    }\n    return pos\n  }\n\n  // :: (number) → {left: number, right: number, top: number, bottom: number}\n  // Returns the viewport rectangle at a given document position. `left`\n  // and `right` will be the same number, as this returns a flat\n  // cursor-ish rectangle.\n  coordsAtPos(pos) {\n    if (this.inDOMChange)\n      pos = this.inDOMChange.mapping.invert().map(pos)\n    return coordsAtPos(this, pos)\n  }\n\n  // :: (number) → {node: dom.Node, offset: number}\n  // Find the DOM position that corresponds to the given document\n  // position. Note that you should **not** mutate the editor's\n  // internal DOM, only inspect it (and even that is usually not\n  // necessary).\n  domAtPos(pos) {\n    if (this.inDOMChange)\n      pos = this.inDOMChange.mapping.invert().map(pos)\n    return this.docView.domFromPos(pos)\n  }\n\n  // :: (number) → ?dom.Node\n  // Find the DOM node that represents the document node after the\n  // given position. May return `null` when the position doesn't point\n  // in front of a node or if the node is inside an opaque node view.\n  //\n  // This is intended to be able to call things like\n  // `getBoundingClientRect` on that DOM node. Do **not** mutate the\n  // editor DOM directly, or add styling this way, since that will be\n  // immediately overriden by the editor as it redraws the node.\n  nodeDOM(pos) {\n    if (this.inDOMChange)\n      pos = this.inDOMChange.mapping.invert().map(pos)\n    let desc = this.docView.descAt(pos)\n    return desc ? desc.nodeDOM : null\n  }\n\n  // :: (dom.Node, number, ?number) → number\n  // Find the document position that corresponds to a given DOM\n  // position. (Whenever possible, it is preferable to inspect the\n  // document structure directly, rather than poking around in the\n  // DOM, but sometimes—for example when interpreting an event\n  // target—you don't have a choice.)\n  //\n  // The `bias` parameter can be used to influence which side of a DOM\n  // node to use when the position is inside a leaf node.\n  posAtDOM(node, offset, bias = -1) {\n    let pos = this.docView.posFromDOM(node, offset, bias)\n    if (pos == null) throw new RangeError(\"DOM position not inside the editor\")\n    if (this.inDOMChange)\n      pos = this.inDOMChange.mapping.map(pos)\n    return pos\n  }\n\n  // :: (union<\"up\", \"down\", \"left\", \"right\", \"forward\", \"backward\">, ?EditorState) → bool\n  // Find out whether the selection is at the end of a textblock when\n  // moving in a given direction. When, for example, given `\"left\"`,\n  // it will return true if moving left from the current cursor\n  // position would leave that position's parent textblock. Will apply\n  // to the view's current state by default, but it is possible to\n  // pass a different state.\n  endOfTextblock(dir, state) {\n    return endOfTextblock(this, state || this.state, dir)\n  }\n\n  // :: ()\n  // Removes the editor from the DOM and destroys all [node\n  // views](#view.NodeView).\n  destroy() {\n    if (!this.docView) return\n    destroyInput(this)\n    this.destroyPluginViews()\n    this.selectionReader.destroy()\n    if (this.mounted) {\n      this.docView.update(this.state.doc, [], viewDecorations(this), this)\n      this.dom.textContent = \"\"\n    } else if (this.dom.parentNode) {\n      this.dom.parentNode.removeChild(this.dom)\n    }\n    this.docView.destroy()\n    this.docView = null\n  }\n\n  // Used for testing.\n  dispatchEvent(event) {\n    return dispatchEvent(this, event)\n  }\n\n  // :: (Transaction)\n  // Dispatch a transaction. Will call\n  // [`dispatchTransaction`](#view.DirectEditorProps.dispatchTransaction)\n  // when given, and otherwise defaults to applying the transaction to\n  // the current state and calling\n  // [`updateState`](#view.EditorView.updateState) with the result.\n  // This method is bound to the view instance, so that it can be\n  // easily passed around.\n  dispatch(tr) {\n    let dispatchTransaction = this._props.dispatchTransaction\n    if (dispatchTransaction) dispatchTransaction.call(this, tr)\n    else this.updateState(this.state.apply(tr))\n  }\n}\n\nfunction computeDocDeco(view) {\n  let attrs = Object.create(null)\n  attrs.class = \"ProseMirror\" + (view.focused ? \" ProseMirror-focused\" : \"\")\n  attrs.contenteditable = String(view.editable)\n\n  view.someProp(\"attributes\", value => {\n    if (typeof value == \"function\") value = value(view.state)\n    if (value) for (let attr in value) {\n      if (attr == \"class\")\n        attrs.class += \" \" + value[attr]\n      else if (!attrs[attr] && attr != \"contenteditable\" && attr != \"nodeName\")\n        attrs[attr] = String(value[attr])\n    }\n  })\n\n  return [Decoration.node(0, view.state.doc.content.size, attrs)]\n}\n\nfunction cursorWrapperDOM(visible) {\n  let span = document.createElement(\"span\")\n  span.textContent = \"\\ufeff\" // zero-width non-breaking space\n  if (!visible) {\n    span.style.position = \"absolute\"\n    span.style.left = \"-100000px\"\n  }\n  return span\n}\n\nfunction updateCursorWrapper(view) {\n  let $pos = needsCursorWrapper(view.state)\n  // On IE/Edge, moving the DOM selection will abort a mouse drag, so\n  // there we delay the creation of the wrapper when the mouse is down.\n  if ($pos && !(browser.ie && view.mouseDown)) {\n    let visible = view.state.selection.visible\n    // Needs a cursor wrapper\n    let marks = view.state.storedMarks || $pos.marks(), dom\n    if (!view.cursorWrapper || !Mark.sameSet(view.cursorWrapper.deco.spec.marks, marks) ||\n        view.cursorWrapper.dom.textContent != \"\\ufeff\" ||\n        view.cursorWrapper.deco.spec.visible != visible)\n      dom = cursorWrapperDOM(visible)\n    else if (view.cursorWrapper.deco.pos != $pos.pos)\n      dom = view.cursorWrapper.dom\n    if (dom)\n      view.cursorWrapper = {dom, deco: Decoration.widget($pos.pos, dom, {isCursorWrapper: true, marks, raw: true, visible})}\n  } else {\n    view.cursorWrapper = null\n  }\n}\n\nfunction getEditable(view) {\n  return !view.someProp(\"editable\", value => value(view.state) === false)\n}\n\nfunction selectionContext(root) {\n  let {focusOffset: offset, focusNode: node} = root.getSelection()\n  if (!node || node.nodeType == 3) return null\n  return [node, offset,\n          node.nodeType == 1 ? node.childNodes[offset - 1] : null,\n          node.nodeType == 1 ? node.childNodes[offset] : null]\n}\n\nfunction needChromeSelectionForce(context, root) {\n  let newContext = selectionContext(root)\n  if (!newContext || newContext[0].nodeType == 3) return false\n  for (let i = 0; i < context.length; i++) if (newContext[i] != context[i]) return true\n  return false\n}\n\nfunction buildNodeViews(view) {\n  let result = {}\n  view.someProp(\"nodeViews\", obj => {\n    for (let prop in obj) if (!Object.prototype.hasOwnProperty.call(result, prop))\n      result[prop] = obj[prop]\n  })\n  return result\n}\n\nfunction changedNodeViews(a, b) {\n  let nA = 0, nB = 0\n  for (let prop in a) {\n    if (a[prop] != b[prop]) return true\n    nA++\n  }\n  for (let _ in b) nB++\n  return nA != nB\n}\n\n// EditorProps:: interface\n//\n// Props are configuration values that can be passed to an editor view\n// or included in a plugin. This interface lists the supported props.\n//\n// The various event-handling functions may all return `true` to\n// indicate that they handled the given event. The view will then take\n// care to call `preventDefault` on the event, except with\n// `handleDOMEvents`, where the handler itself is responsible for that.\n//\n// How a prop is resolved depends on the prop. Handler functions are\n// called one at a time, starting with the base props and then\n// searching through the plugins (in order of appearance) until one of\n// them returns true. For some props, the first plugin that yields a\n// value gets precedence.\n//\n//   handleDOMEvents:: ?Object<(view: EditorView, event: dom.Event) → bool>\n//   Can be an object mapping DOM event type names to functions that\n//   handle them. Such functions will be called before any handling\n//   ProseMirror does of events fired on the editable DOM element.\n//   Contrary to the other event handling props, when returning true\n//   from such a function, you are responsible for calling\n//   `preventDefault` yourself (or not, if you want to allow the\n//   default behavior).\n//\n//   handleKeyDown:: ?(view: EditorView, event: dom.KeyboardEvent) → bool\n//   Called when the editor receives a `keydown` event.\n//\n//   handleKeyPress:: ?(view: EditorView, event: dom.KeyboardEvent) → bool\n//   Handler for `keypress` events.\n//\n//   handleTextInput:: ?(view: EditorView, from: number, to: number, text: string) → bool\n//   Whenever the user directly input text, this handler is called\n//   before the input is applied. If it returns `true`, the default\n//   behavior of actually inserting the text is suppressed.\n//\n//   handleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) → bool\n//   Called for each node around a click, from the inside out. The\n//   `direct` flag will be true for the inner node.\n//\n//   handleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) → bool\n//   Called when the editor is clicked, after `handleClickOn` handlers\n//   have been called.\n//\n//   handleDoubleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) → bool\n//   Called for each node around a double click.\n//\n//   handleDoubleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) → bool\n//   Called when the editor is double-clicked, after `handleDoubleClickOn`.\n//\n//   handleTripleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) → bool\n//   Called for each node around a triple click.\n//\n//   handleTripleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) → bool\n//   Called when the editor is triple-clicked, after `handleTripleClickOn`.\n//\n//   handlePaste:: ?(view: EditorView, event: dom.Event, slice: Slice) → bool\n//   Can be used to override the behavior of pasting. `slice` is the\n//   pasted content parsed by the editor, but you can directly access\n//   the event to get at the raw content.\n//\n//   handleDrop:: ?(view: EditorView, event: dom.Event, slice: Slice, moved: bool) → bool\n//   Called when something is dropped on the editor. `moved` will be\n//   true if this drop moves from the current selection (which should\n//   thus be deleted).\n//\n//   handleScrollToSelection:: ?(view: EditorView) → bool\n//   Called when the view, after updating its state, tries to scroll\n//   the selection into view. A handler function may return false to\n//   indicate that it did not handle the scrolling and further\n//   handlers or the default behavior should be tried.\n//\n//   createSelectionBetween:: ?(view: EditorView, anchor: ResolvedPos, head: ResolvedPos) → ?Selection\n//   Can be used to override the way a selection is created when\n//   reading a DOM selection between the given anchor and head.\n//\n//   domParser:: ?DOMParser\n//   The [parser](#model.DOMParser) to use when reading editor changes\n//   from the DOM. Defaults to calling\n//   [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) on the\n//   editor's schema.\n//\n//   transformPastedHTML:: ?(html: string) → string\n//   Can be used to transform pasted HTML text, _before_ it is parsed,\n//   for example to clean it up.\n//\n//   clipboardParser:: ?DOMParser\n//   The [parser](#model.DOMParser) to use when reading content from\n//   the clipboard. When not given, the value of the\n//   [`domParser`](#view.EditorProps.domParser) prop is used.\n//\n//   transformPastedText:: ?(text: string) → string\n//   Transform pasted plain text.\n//\n//   clipboardTextParser:: ?(text: string, $context: ResolvedPos) → Slice\n//   A function to parse text from the clipboard into a document\n//   slice. Called after\n//   [`transformPastedText`](#view.EditorProps.transformPastedText).\n//   The default behavior is to split the text into lines, wrap them\n//   in `<p>` tags, and call\n//   [`clipboardParser`](#view.EditorProps.clipboardParser) on it.\n//\n//   transformPasted:: ?(Slice) → Slice\n//   Can be used to transform pasted content before it is applied to\n//   the document.\n//\n//   nodeViews:: ?Object<(node: Node, view: EditorView, getPos: () → number, decorations: [Decoration]) → NodeView>\n//   Allows you to pass custom rendering and behavior logic for nodes\n//   and marks. Should map node and mark names to constructor\n//   functions that produce a [`NodeView`](#view.NodeView) object\n//   implementing the node's display behavior. For nodes, the third\n//   argument `getPos` is a function that can be called to get the\n//   node's current position, which can be useful when creating\n//   transactions to update it. For marks, the third argument is a\n//   boolean that indicates whether the mark's content is inline.\n//\n//   `decorations` is an array of node or inline decorations that are\n//   active around the node. They are automatically drawn in the\n//   normal way, and you will usually just want to ignore this, but\n//   they can also be used as a way to provide context information to\n//   the node view without adding it to the document itself.\n//\n//   clipboardSerializer:: ?DOMSerializer\n//   The DOM serializer to use when putting content onto the\n//   clipboard. If not given, the result of\n//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)\n//   will be used.\n//\n//   clipboardTextSerializer:: ?(Slice) → string\n//   A function that will be called to get the text for the current\n//   selection when copying text to the clipboard. By default, the\n//   editor will use [`textBetween`](#model.Node.textBetween) on the\n//   selected range.\n//\n//   decorations:: ?(state: EditorState) → ?DecorationSet\n//   A set of [document decorations](#view.Decoration) to show in the\n//   view.\n//\n//   editable:: ?(state: EditorState) → bool\n//   When this returns false, the content of the view is not directly\n//   editable.\n//\n//   attributes:: ?union<Object<string>, (EditorState) → ?Object<string>>\n//   Control the DOM attributes of the editable element. May be either\n//   an object or a function going from an editor state to an object.\n//   By default, the element will get a class `\"ProseMirror\"`, and\n//   will have its `contentEditable` attribute determined by the\n//   [`editable` prop](#view.EditorProps.editable). Additional classes\n//   provided here will be added to the class. For other attributes,\n//   the value provided first (as in\n//   [`someProp`](#view.EditorView.someProp)) will be used.\n//\n//   scrollThreshold:: ?number | {top: number, right: number, bottom: number, left: number}\n//   Determines the distance (in pixels) between the cursor and the\n//   end of the visible viewport at which point, when scrolling the\n//   cursor into view, scrolling takes place. Defaults to 0.\n//\n//   scrollMargin:: ?number | {top: number, right: number, bottom: number, left: number}\n//   Determines the extra space (in pixels) that is left above or\n//   below the cursor when it is scrolled into view. Defaults to 5.\n\n// DirectEditorProps:: interface extends EditorProps\n//\n// The props object given directly to the editor view supports two\n// fields that can't be used in plugins:\n//\n//   state:: EditorState\n//   The current state of the editor.\n//\n//   dispatchTransaction:: ?(tr: Transaction)\n//   The callback over which to send transactions (state updates)\n//   produced by the view. If you specify this, you probably want to\n//   make sure this ends up calling the view's\n//   [`updateState`](#view.EditorView.updateState) method with a new\n//   state that has the transaction\n//   [applied](#state.EditorState.apply). The callback will be bound to have\n//   the view instance as its `this` binding.\n","import {Selection} from \"prosemirror-state\"\nimport {Slice} from \"prosemirror-model\"\n\n// ::- Gap cursor selections are represented using this class. Its\n// `$anchor` and `$head` properties both point at the cursor position.\nexport class GapCursor extends Selection {\n  // : (ResolvedPos)\n  constructor($pos) {\n    super($pos, $pos)\n  }\n\n  map(doc, mapping) {\n    let $pos = doc.resolve(mapping.map(this.head))\n    return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos)\n  }\n\n  content() { return Slice.empty }\n\n  eq(other) {\n    return other instanceof GapCursor && other.head == this.head\n  }\n\n  toJSON() {\n    return {type: \"gapcursor\", pos: this.head}\n  }\n\n  static fromJSON(doc, json) {\n    if (typeof json.pos != \"number\") throw new RangeError(\"Invalid input for GapCursor.fromJSON\")\n    return new GapCursor(doc.resolve(json.pos))\n  }\n\n  getBookmark() { return new GapBookmark(this.anchor) }\n\n  static valid($pos) {\n    let parent = $pos.parent\n    if (parent.isTextblock || !closedBefore($pos) || !closedAfter($pos)) return false\n    let override = parent.type.spec.allowGapCursor\n    if (override != null) return override\n    let deflt = parent.contentMatchAt($pos.index()).defaultType\n    return deflt && deflt.isTextblock\n  }\n\n  static findFrom($pos, dir, mustMove) {\n    if (!mustMove && GapCursor.valid($pos)) return $pos\n\n    let pos = $pos.pos, next = null\n    // Scan up from this position\n    for (let d = $pos.depth;; d--) {\n      let parent = $pos.node(d)\n      if (dir > 0 ? $pos.indexAfter(d) < parent.childCount : $pos.index(d) > 0) {\n        next = parent.maybeChild(dir > 0 ? $pos.indexAfter(d) : $pos.index(d) - 1)\n        break\n      } else if (d == 0) {\n        return null\n      }\n      pos += dir\n      let $cur = $pos.doc.resolve(pos)\n      if (GapCursor.valid($cur)) return $cur\n    }\n\n    // And then down into the next node\n    for (;;) {\n      next = dir > 0 ? next.firstChild : next.lastChild\n      if (!next) break\n      pos += dir\n      let $cur = $pos.doc.resolve(pos)\n      if (GapCursor.valid($cur)) return $cur\n    }\n\n    return null\n  }\n}\n\nGapCursor.prototype.visible = false\n\nSelection.jsonID(\"gapcursor\", GapCursor)\n\nclass GapBookmark {\n  constructor(pos) {\n    this.pos = pos\n  }\n  map(mapping) {\n    return new GapBookmark(mapping.map(this.pos))\n  }\n  resolve(doc) {\n    let $pos = doc.resolve(this.pos)\n    return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos)\n  }\n}\n\nfunction closedBefore($pos) {\n  for (let d = $pos.depth; d >= 0; d--) {\n    let index = $pos.index(d)\n    // At the start of this parent, look at next one\n    if (index == 0) continue\n    // See if the node before (or its first ancestor) is closed\n    for (let before = $pos.node(d).child(index - 1);; before = before.lastChild) {\n      if ((before.childCount == 0 && !before.inlineContent) || before.isAtom || before.type.spec.isolating) return true\n      if (before.inlineContent) return false\n    }\n  }\n  // Hit start of document\n  return true\n}\n\nfunction closedAfter($pos) {\n  for (let d = $pos.depth; d >= 0; d--) {\n    let index = $pos.indexAfter(d), parent = $pos.node(d)\n    if (index == parent.childCount) continue\n    for (let after = parent.child(index);; after = after.firstChild) {\n      if ((after.childCount == 0 && !after.inlineContent) || after.isAtom || after.type.spec.isolating) return true\n      if (after.inlineContent) return false\n    }\n  }\n  return true\n}\n","var GOOD_LEAF_SIZE = 200\n\n// :: class<T> A rope sequence is a persistent sequence data structure\n// that supports appending, prepending, and slicing without doing a\n// full copy. It is represented as a mostly-balanced tree.\nvar RopeSequence = function RopeSequence () {};\n\nRopeSequence.prototype.append = function append (other) {\n  if (!other.length) { return this }\n  other = RopeSequence.from(other)\n\n  return (!this.length && other) ||\n    (other.length < GOOD_LEAF_SIZE && this.leafAppend(other)) ||\n    (this.length < GOOD_LEAF_SIZE && other.leafPrepend(this)) ||\n    this.appendInner(other)\n};\n\n// :: (union<[T], RopeSequence<T>>) → RopeSequence<T>\n// Prepend an array or other rope to this one, returning a new rope.\nRopeSequence.prototype.prepend = function prepend (other) {\n  if (!other.length) { return this }\n  return RopeSequence.from(other).append(this)\n};\n\nRopeSequence.prototype.appendInner = function appendInner (other) {\n  return new Append(this, other)\n};\n\n// :: (?number, ?number) → RopeSequence<T>\n// Create a rope repesenting a sub-sequence of this rope.\nRopeSequence.prototype.slice = function slice (from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.length;\n\n  if (from >= to) { return RopeSequence.empty }\n  return this.sliceInner(Math.max(0, from), Math.min(this.length, to))\n};\n\n// :: (number) → T\n// Retrieve the element at the given position from this rope.\nRopeSequence.prototype.get = function get (i) {\n  if (i < 0 || i >= this.length) { return undefined }\n  return this.getInner(i)\n};\n\n// :: ((element: T, index: number) → ?bool, ?number, ?number)\n// Call the given function for each element between the given\n// indices. This tends to be more efficient than looping over the\n// indices and calling `get`, because it doesn't have to descend the\n// tree for every element.\nRopeSequence.prototype.forEach = function forEach (f, from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.length;\n\n  if (from <= to)\n    { this.forEachInner(f, from, to, 0) }\n  else\n    { this.forEachInvertedInner(f, from, to, 0) }\n};\n\n// :: ((element: T, index: number) → U, ?number, ?number) → [U]\n// Map the given functions over the elements of the rope, producing\n// a flat array.\nRopeSequence.prototype.map = function map (f, from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.length;\n\n  var result = []\n  this.forEach(function (elt, i) { return result.push(f(elt, i)); }, from, to)\n  return result\n};\n\n// :: (?union<[T], RopeSequence<T>>) → RopeSequence<T>\n// Create a rope representing the given array, or return the rope\n// itself if a rope was given.\nRopeSequence.from = function from (values) {\n  if (values instanceof RopeSequence) { return values }\n  return values && values.length ? new Leaf(values) : RopeSequence.empty\n};\n\nvar Leaf = (function (RopeSequence) {\n  function Leaf(values) {\n    RopeSequence.call(this)\n    this.values = values\n  }\n\n  if ( RopeSequence ) Leaf.__proto__ = RopeSequence;\n  Leaf.prototype = Object.create( RopeSequence && RopeSequence.prototype );\n  Leaf.prototype.constructor = Leaf;\n\n  var prototypeAccessors = { length: {},depth: {} };\n\n  Leaf.prototype.flatten = function flatten () {\n    return this.values\n  };\n\n  Leaf.prototype.sliceInner = function sliceInner (from, to) {\n    if (from == 0 && to == this.length) { return this }\n    return new Leaf(this.values.slice(from, to))\n  };\n\n  Leaf.prototype.getInner = function getInner (i) {\n    return this.values[i]\n  };\n\n  Leaf.prototype.forEachInner = function forEachInner (f, from, to, start) {\n    var this$1 = this;\n\n    for (var i = from; i < to; i++)\n      { if (f(this$1.values[i], start + i) === false) { return false } }\n  };\n\n  Leaf.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {\n    var this$1 = this;\n\n    for (var i = from - 1; i >= to; i--)\n      { if (f(this$1.values[i], start + i) === false) { return false } }\n  };\n\n  Leaf.prototype.leafAppend = function leafAppend (other) {\n    if (this.length + other.length <= GOOD_LEAF_SIZE)\n      { return new Leaf(this.values.concat(other.flatten())) }\n  };\n\n  Leaf.prototype.leafPrepend = function leafPrepend (other) {\n    if (this.length + other.length <= GOOD_LEAF_SIZE)\n      { return new Leaf(other.flatten().concat(this.values)) }\n  };\n\n  prototypeAccessors.length.get = function () { return this.values.length };\n\n  prototypeAccessors.depth.get = function () { return 0 };\n\n  Object.defineProperties( Leaf.prototype, prototypeAccessors );\n\n  return Leaf;\n}(RopeSequence));\n\n// :: RopeSequence\n// The empty rope sequence.\nRopeSequence.empty = new Leaf([])\n\nvar Append = (function (RopeSequence) {\n  function Append(left, right) {\n    RopeSequence.call(this)\n    this.left = left\n    this.right = right\n    this.length = left.length + right.length\n    this.depth = Math.max(left.depth, right.depth) + 1\n  }\n\n  if ( RopeSequence ) Append.__proto__ = RopeSequence;\n  Append.prototype = Object.create( RopeSequence && RopeSequence.prototype );\n  Append.prototype.constructor = Append;\n\n  Append.prototype.flatten = function flatten () {\n    return this.left.flatten().concat(this.right.flatten())\n  };\n\n  Append.prototype.getInner = function getInner (i) {\n    return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length)\n  };\n\n  Append.prototype.forEachInner = function forEachInner (f, from, to, start) {\n    var leftLen = this.left.length\n    if (from < leftLen &&\n        this.left.forEachInner(f, from, Math.min(to, leftLen), start) === false)\n      { return false }\n    if (to > leftLen &&\n        this.right.forEachInner(f, Math.max(from - leftLen, 0), Math.min(this.length, to) - leftLen, start + leftLen) === false)\n      { return false }\n  };\n\n  Append.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {\n    var leftLen = this.left.length\n    if (from > leftLen &&\n        this.right.forEachInvertedInner(f, from - leftLen, Math.max(to, leftLen) - leftLen, start + leftLen) === false)\n      { return false }\n    if (to < leftLen &&\n        this.left.forEachInvertedInner(f, Math.min(from, leftLen), to, start) === false)\n      { return false }\n  };\n\n  Append.prototype.sliceInner = function sliceInner (from, to) {\n    if (from == 0 && to == this.length) { return this }\n    var leftLen = this.left.length\n    if (to <= leftLen) { return this.left.slice(from, to) }\n    if (from >= leftLen) { return this.right.slice(from - leftLen, to - leftLen) }\n    return this.left.slice(from, leftLen).append(this.right.slice(0, to - leftLen))\n  };\n\n  Append.prototype.leafAppend = function leafAppend (other) {\n    var inner = this.right.leafAppend(other)\n    if (inner) { return new Append(this.left, inner) }\n  };\n\n  Append.prototype.leafPrepend = function leafPrepend (other) {\n    var inner = this.left.leafPrepend(other)\n    if (inner) { return new Append(inner, this.right) }\n  };\n\n  Append.prototype.appendInner = function appendInner (other) {\n    if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1)\n      { return new Append(this.left, new Append(this.right, other)) }\n    return new Append(this, other)\n  };\n\n  return Append;\n}(RopeSequence));\n\nmodule.exports = RopeSequence\n","import RopeSequence from \"rope-sequence\"\nimport {Mapping} from \"prosemirror-transform\"\nimport {Plugin, PluginKey} from \"prosemirror-state\"\n\n// ProseMirror's history isn't simply a way to roll back to a previous\n// state, because ProseMirror supports applying changes without adding\n// them to the history (for example during collaboration).\n//\n// To this end, each 'Branch' (one for the undo history and one for\n// the redo history) keeps an array of 'Items', which can optionally\n// hold a step (an actual undoable change), and always hold a position\n// map (which is needed to move changes below them to apply to the\n// current document).\n//\n// An item that has both a step and a selection bookmark is the start\n// of an 'event' — a group of changes that will be undone or redone at\n// once. (It stores only the bookmark, since that way we don't have to\n// provide a document until the selection is actually applied, which\n// is useful when compressing.)\n\n// Used to schedule history compression\nconst max_empty_items = 500\n\nclass Branch {\n  constructor(items, eventCount) {\n    this.items = items\n    this.eventCount = eventCount\n  }\n\n  // : (EditorState, bool) → ?{transform: Transform, selection: ?SelectionBookmark, remaining: Branch}\n  // Pop the latest event off the branch's history and apply it\n  // to a document transform.\n  popEvent(state, preserveItems) {\n    if (this.eventCount == 0) return null\n\n    let end = this.items.length\n    for (;; end--) {\n      let next = this.items.get(end - 1)\n      if (next.selection) { --end; break }\n    }\n\n    let remap, mapFrom\n    if (preserveItems) {\n      remap = this.remapping(end, this.items.length)\n      mapFrom = remap.maps.length\n    }\n    let transform = state.tr\n    let selection, remaining\n    let addAfter = [], addBefore = []\n\n    this.items.forEach((item, i) => {\n      if (!item.step) {\n        if (!remap) {\n          remap = this.remapping(end, i + 1)\n          mapFrom = remap.maps.length\n        }\n        mapFrom--\n        addBefore.push(item)\n        return\n      }\n\n      if (remap) {\n        addBefore.push(new Item(item.map))\n        let step = item.step.map(remap.slice(mapFrom)), map\n\n        if (step && transform.maybeStep(step).doc) {\n          map = transform.mapping.maps[transform.mapping.maps.length - 1]\n          addAfter.push(new Item(map, null, null, addAfter.length + addBefore.length))\n        }\n        mapFrom--\n        if (map) remap.appendMap(map, mapFrom)\n      } else {\n        transform.maybeStep(item.step)\n      }\n\n      if (item.selection) {\n        selection = remap ? item.selection.map(remap.slice(mapFrom)) : item.selection\n        remaining = new Branch(this.items.slice(0, end).append(addBefore.reverse().concat(addAfter)), this.eventCount - 1)\n        return false\n      }\n    }, this.items.length, 0)\n\n    return {remaining, transform, selection}\n  }\n\n  // : (Transform, ?SelectionBookmark, Object) → Branch\n  // Create a new branch with the given transform added.\n  addTransform(transform, selection, histOptions, preserveItems) {\n    let newItems = [], eventCount = this.eventCount\n    let oldItems = this.items, lastItem = !preserveItems && oldItems.length ? oldItems.get(oldItems.length - 1) : null\n\n    for (let i = 0; i < transform.steps.length; i++) {\n      let step = transform.steps[i].invert(transform.docs[i])\n      let item = new Item(transform.mapping.maps[i], step, selection), merged\n      if (merged = lastItem && lastItem.merge(item)) {\n        item = merged\n        if (i) newItems.pop()\n        else oldItems = oldItems.slice(0, oldItems.length - 1)\n      }\n      newItems.push(item)\n      if (selection) {\n        eventCount++\n        selection = null\n      }\n      if (!preserveItems) lastItem = item\n    }\n    let overflow = eventCount - histOptions.depth\n    if (overflow > DEPTH_OVERFLOW) {\n      oldItems = cutOffEvents(oldItems, overflow)\n      eventCount -= overflow\n    }\n    return new Branch(oldItems.append(newItems), eventCount)\n  }\n\n  remapping(from, to) {\n    let maps = new Mapping\n    this.items.forEach((item, i) => {\n      let mirrorPos = item.mirrorOffset != null && i - item.mirrorOffset >= from\n          ? mirrorPos = maps.maps.length - item.mirrorOffset : null\n      maps.appendMap(item.map, mirrorPos)\n    }, from, to)\n    return maps\n  }\n\n  addMaps(array) {\n    if (this.eventCount == 0) return this\n    return new Branch(this.items.append(array.map(map => new Item(map))), this.eventCount)\n  }\n\n  // : (Transform, number)\n  // When the collab module receives remote changes, the history has\n  // to know about those, so that it can adjust the steps that were\n  // rebased on top of the remote changes, and include the position\n  // maps for the remote changes in its array of items.\n  rebased(rebasedTransform, rebasedCount) {\n    if (!this.eventCount) return this\n\n    let rebasedItems = [], start = Math.max(0, this.items.length - rebasedCount)\n\n    let mapping = rebasedTransform.mapping\n    let newUntil = rebasedTransform.steps.length\n    let eventCount = this.eventCount\n    this.items.forEach(item => { if (item.selection) eventCount-- }, start)\n\n    let iRebased = rebasedCount\n    this.items.forEach(item => {\n      let pos = mapping.getMirror(--iRebased)\n      if (pos == null) return\n      newUntil = Math.min(newUntil, pos)\n      let map = mapping.maps[pos]\n      if (item.step) {\n        let step = rebasedTransform.steps[pos].invert(rebasedTransform.docs[pos])\n        let selection = item.selection && item.selection.map(mapping.slice(iRebased, pos))\n        if (selection) eventCount++\n        rebasedItems.push(new Item(map, step, selection))\n      } else {\n        rebasedItems.push(new Item(map))\n      }\n    }, start)\n\n    let newMaps = []\n    for (let i = rebasedCount; i < newUntil; i++)\n      newMaps.push(new Item(mapping.maps[i]))\n    let items = this.items.slice(0, start).append(newMaps).append(rebasedItems)\n    let branch = new Branch(items, eventCount)\n\n    if (branch.emptyItemCount() > max_empty_items)\n      branch = branch.compress(this.items.length - rebasedItems.length)\n    return branch\n  }\n\n  emptyItemCount() {\n    let count = 0\n    this.items.forEach(item => { if (!item.step) count++ })\n    return count\n  }\n\n  // Compressing a branch means rewriting it to push the air (map-only\n  // items) out. During collaboration, these naturally accumulate\n  // because each remote change adds one. The `upto` argument is used\n  // to ensure that only the items below a given level are compressed,\n  // because `rebased` relies on a clean, untouched set of items in\n  // order to associate old items with rebased steps.\n  compress(upto = this.items.length) {\n    let remap = this.remapping(0, upto), mapFrom = remap.maps.length\n    let items = [], events = 0\n    this.items.forEach((item, i) => {\n      if (i >= upto) {\n        items.push(item)\n        if (item.selection) events++\n      } else if (item.step) {\n        let step = item.step.map(remap.slice(mapFrom)), map = step && step.getMap()\n        mapFrom--\n        if (map) remap.appendMap(map, mapFrom)\n        if (step) {\n          let selection = item.selection && item.selection.map(remap.slice(mapFrom))\n          if (selection) events++\n          let newItem = new Item(map.invert(), step, selection), merged, last = items.length - 1\n          if (merged = items.length && items[last].merge(newItem))\n            items[last] = merged\n          else\n            items.push(newItem)\n        }\n      } else if (item.map) {\n        mapFrom--\n      }\n    }, this.items.length, 0)\n    return new Branch(RopeSequence.from(items.reverse()), events)\n  }\n}\n\nBranch.empty = new Branch(RopeSequence.empty, 0)\n\nfunction cutOffEvents(items, n) {\n  let cutPoint\n  items.forEach((item, i) => {\n    if (item.selection && (n-- == 0)) {\n      cutPoint = i\n      return false\n    }\n  })\n  return items.slice(cutPoint)\n}\n\nclass Item {\n  constructor(map, step, selection, mirrorOffset) {\n    this.map = map\n    this.step = step\n    this.selection = selection\n    this.mirrorOffset = mirrorOffset\n  }\n\n  merge(other) {\n    if (this.step && other.step && !other.selection) {\n      let step = other.step.merge(this.step)\n      if (step) return new Item(step.getMap().invert(), step, this.selection)\n    }\n  }\n}\n\n// The value of the state field that tracks undo/redo history for that\n// state. Will be stored in the plugin state when the history plugin\n// is active.\nexport class HistoryState {\n  constructor(done, undone, prevRanges, prevTime) {\n    this.done = done\n    this.undone = undone\n    this.prevRanges = prevRanges\n    this.prevTime = prevTime\n  }\n}\n\nconst DEPTH_OVERFLOW = 20\n\n// : (HistoryState, EditorState, Transaction, Object)\n// Record a transformation in undo history.\nfunction applyTransaction(history, state, tr, options) {\n  let historyTr = tr.getMeta(historyKey), rebased\n  if (historyTr) return historyTr.historyState\n\n  if (tr.getMeta(closeHistoryKey)) history = new HistoryState(history.done, history.undone, null, 0)\n\n  let appended = tr.getMeta(\"appendedTransaction\")\n\n  if (tr.steps.length == 0) {\n    return history\n  } else if (appended && appended.getMeta(historyKey)) {\n    if (appended.getMeta(historyKey).redo)\n      return new HistoryState(history.done.addTransform(tr, null, options, mustPreserveItems(state)),\n                              history.undone, rangesFor(tr.mapping.maps[tr.steps.length - 1]), history.prevTime)\n    else\n      return new HistoryState(history.done, history.undone.addTransform(tr, null, options, mustPreserveItems(state)),\n                              null, history.prevTime)\n  } else if (tr.getMeta(\"addToHistory\") !== false && !(appended && appended.getMeta(\"addToHistory\") === false)) {\n    // Group transforms that occur in quick succession into one event.\n    let newGroup = history.prevTime < (tr.time || 0) - options.newGroupDelay ||\n        !appended && !isAdjacentTo(tr, history.prevRanges)\n    let prevRanges = appended ? mapRanges(history.prevRanges, tr.mapping) : rangesFor(tr.mapping.maps[tr.steps.length - 1])\n    return new HistoryState(history.done.addTransform(tr, newGroup ? state.selection.getBookmark() : null,\n                                                      options, mustPreserveItems(state)),\n                            Branch.empty, prevRanges, tr.time)\n  } else if (rebased = tr.getMeta(\"rebased\")) {\n    // Used by the collab module to tell the history that some of its\n    // content has been rebased.\n    return new HistoryState(history.done.rebased(tr, rebased),\n                            history.undone.rebased(tr, rebased),\n                            mapRanges(history.prevRanges, tr.mapping), history.prevTime)\n  } else {\n    return new HistoryState(history.done.addMaps(tr.mapping.maps),\n                            history.undone.addMaps(tr.mapping.maps),\n                            mapRanges(history.prevRanges, tr.mapping), history.prevTime)\n  }\n}\n\nfunction isAdjacentTo(transform, prevRanges) {\n  if (!prevRanges) return false\n  if (!transform.docChanged) return true\n  let adjacent = false\n  transform.mapping.maps[0].forEach((start, end) => {\n    for (let i = 0; i < prevRanges.length; i += 2)\n      if (start <= prevRanges[i + 1] && end >= prevRanges[i])\n        adjacent = true\n  })\n  return adjacent\n}\n\nfunction rangesFor(map) {\n  let result = []\n  map.forEach((_from, _to, from, to) => result.push(from, to))\n  return result\n}\n\nfunction mapRanges(ranges, mapping) {\n  if (!ranges) return null\n  let result = []\n  for (let i = 0; i < ranges.length; i += 2) {\n    let from = mapping.map(ranges[i], 1), to = mapping.map(ranges[i + 1], -1)\n    if (from <= to) result.push(from, to)\n  }\n  return result\n}\n\n// : (HistoryState, EditorState, (tr: Transaction), bool)\n// Apply the latest event from one branch to the document and shift the event\n// onto the other branch.\nfunction histTransaction(history, state, dispatch, redo) {\n  let preserveItems = mustPreserveItems(state), histOptions = historyKey.get(state).spec.config\n  let pop = (redo ? history.undone : history.done).popEvent(state, preserveItems)\n  if (!pop) return\n\n  let selection = pop.selection.resolve(pop.transform.doc)\n  let added = (redo ? history.done : history.undone).addTransform(pop.transform, state.selection.getBookmark(),\n                                                                  histOptions, preserveItems)\n\n  let newHist = new HistoryState(redo ? added : pop.remaining, redo ? pop.remaining : added, null, 0)\n  dispatch(pop.transform.setSelection(selection).setMeta(historyKey, {redo, historyState: newHist}).scrollIntoView())\n}\n\nlet cachedPreserveItems = false, cachedPreserveItemsPlugins = null\n// Check whether any plugin in the given state has a\n// `historyPreserveItems` property in its spec, in which case we must\n// preserve steps exactly as they came in, so that they can be\n// rebased.\nfunction mustPreserveItems(state) {\n  let plugins = state.plugins\n  if (cachedPreserveItemsPlugins != plugins) {\n    cachedPreserveItems = false\n    cachedPreserveItemsPlugins = plugins\n    for (let i = 0; i < plugins.length; i++) if (plugins[i].spec.historyPreserveItems) {\n      cachedPreserveItems = true\n      break\n    }\n  }\n  return cachedPreserveItems\n}\n\n// :: (Transaction) → Transaction\n// Set a flag on the given transaction that will prevent further steps\n// from being appended to an existing history event (so that they\n// require a separate undo command to undo).\nexport function closeHistory(tr) {\n  return tr.setMeta(closeHistoryKey, true)\n}\n\nconst historyKey = new PluginKey(\"history\")\nconst closeHistoryKey = new PluginKey(\"closeHistory\")\n\n// :: (?Object) → Plugin\n// Returns a plugin that enables the undo history for an editor. The\n// plugin will track undo and redo stacks, which can be used with the\n// [`undo`](#history.undo) and [`redo`](#history.redo) commands.\n//\n// You can set an `\"addToHistory\"` [metadata\n// property](#state.Transaction.setMeta) of `false` on a transaction\n// to prevent it from being rolled back by undo.\n//\n//   config::-\n//   Supports the following configuration options:\n//\n//     depth:: ?number\n//     The amount of history events that are collected before the\n//     oldest events are discarded. Defaults to 100.\n//\n//     newGroupDelay:: ?number\n//     The delay between changes after which a new group should be\n//     started. Defaults to 500 (milliseconds). Note that when changes\n//     aren't adjacent, a new group is always started.\nexport function history(config) {\n  config = {depth: config && config.depth || 100,\n            newGroupDelay: config && config.newGroupDelay || 500}\n  return new Plugin({\n    key: historyKey,\n\n    state: {\n      init() {\n        return new HistoryState(Branch.empty, Branch.empty, null, 0)\n      },\n      apply(tr, hist, state) {\n        return applyTransaction(hist, state, tr, config)\n      }\n    },\n\n    config\n  })\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// A command function that undoes the last change, if any.\nexport function undo(state, dispatch) {\n  let hist = historyKey.getState(state)\n  if (!hist || hist.done.eventCount == 0) return false\n  if (dispatch) histTransaction(hist, state, dispatch, false)\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// A command function that redoes the last undone change, if any.\nexport function redo(state, dispatch) {\n  let hist = historyKey.getState(state)\n  if (!hist || hist.undone.eventCount == 0) return false\n  if (dispatch) histTransaction(hist, state, dispatch, true)\n  return true\n}\n\n// :: (EditorState) → number\n// The amount of undoable events available in a given state.\nexport function undoDepth(state) {\n  let hist = historyKey.getState(state)\n  return hist ? hist.done.eventCount : 0\n}\n\n// :: (EditorState) → number\n// The amount of redoable events available in a given editor state.\nexport function redoDepth(state) {\n  let hist = historyKey.getState(state)\n  return hist ? hist.undone.eventCount : 0\n}\n","import {Plugin} from \"prosemirror-state\"\n\n// ::- Input rules are regular expressions describing a piece of text\n// that, when typed, causes something to happen. This might be\n// changing two dashes into an emdash, wrapping a paragraph starting\n// with `\"> \"` into a blockquote, or something entirely different.\nexport class InputRule {\n  // :: (RegExp, union<string, (state: EditorState, match: [string], start: number, end: number) → ?Transaction>)\n  // Create an input rule. The rule applies when the user typed\n  // something and the text directly in front of the cursor matches\n  // `match`, which should probably end with `$`.\n  //\n  // The `handler` can be a string, in which case the matched text, or\n  // the first matched group in the regexp, is replaced by that\n  // string.\n  //\n  // Or a it can be a function, which will be called with the match\n  // array produced by\n  // [`RegExp.exec`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec),\n  // as well as the start and end of the matched range, and which can\n  // return a [transaction](#state.Transaction) that describes the\n  // rule's effect, or null to indicate the input was not handled.\n  constructor(match, handler) {\n    this.match = match\n    this.handler = typeof handler == \"string\" ? stringHandler(handler) : handler\n  }\n}\n\nfunction stringHandler(string) {\n  return function(state, match, start, end) {\n    let insert = string\n    if (match[1]) {\n      let offset = match[0].lastIndexOf(match[1])\n      insert += match[0].slice(offset + match[1].length)\n      start += offset\n      let cutOff = start - end\n      if (cutOff > 0) {\n        insert = match[0].slice(offset - cutOff, offset) + insert\n        start = end\n      }\n    }\n    let marks = state.doc.resolve(start).marks()\n    return state.tr.replaceWith(start, end, state.schema.text(insert, marks))\n  }\n}\n\nconst MAX_MATCH = 500\n\n// :: (config: {rules: [InputRule]}) → Plugin\n// Create an input rules plugin. When enabled, it will cause text\n// input that matches any of the given rules to trigger the rule's\n// action.\nexport function inputRules({rules}) {\n  return new Plugin({\n    state: {\n      init() { return null },\n      apply(tr, prev) {\n        let stored = tr.getMeta(this)\n        if (stored) return stored\n        return tr.selectionSet || tr.docChanged ? null : prev\n      }\n    },\n\n    props: {\n      handleTextInput(view, from, to, text) {\n        let state = view.state, $from = state.doc.resolve(from)\n        if ($from.parent.type.spec.code) return false\n        let textBefore = $from.parent.textBetween(Math.max(0, $from.parentOffset - MAX_MATCH), $from.parentOffset,\n                                                  null, \"\\ufffc\") + text\n        for (let i = 0; i < rules.length; i++) {\n          let match = rules[i].match.exec(textBefore)\n          let tr = match && rules[i].handler(state, match, from - (match[0].length - text.length), to)\n          if (!tr) continue\n          view.dispatch(tr.setMeta(this, {transform: tr, from, to, text}))\n          return true\n        }\n        return false\n      }\n    },\n\n    isInputRules: true\n  })\n}\n\n// :: (EditorState, ?(Transaction)) → bool\n// This is a command that will undo an input rule, if applying such a\n// rule was the last thing that the user did.\nexport function undoInputRule(state, dispatch) {\n  let plugins = state.plugins\n  for (let i = 0; i < plugins.length; i++) {\n    let plugin = plugins[i], undoable\n    if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\n      if (dispatch) {\n        let tr = state.tr, toUndo = undoable.transform\n        for (let j = toUndo.steps.length - 1; j >= 0; j--)\n          tr.step(toUndo.steps[j].invert(toUndo.docs[j]))\n        let marks = tr.doc.resolve(undoable.from).marks()\n        dispatch(tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks)))\n      }\n      return true\n    }\n  }\n  return false\n}\n","import {InputRule} from \"./inputrules\"\n\n// :: InputRule Converts double dashes to an emdash.\nexport const emDash = new InputRule(/--$/, \"—\")\n// :: InputRule Converts three dots to an ellipsis character.\nexport const ellipsis = new InputRule(/\\.\\.\\.$/, \"…\")\n// :: InputRule “Smart” opening double quotes.\nexport const openDoubleQuote = new InputRule(/(?:^|[\\s\\{\\[\\(\\<'\"\\u2018\\u201C])(\")$/, \"“\")\n// :: InputRule “Smart” closing double quotes.\nexport const closeDoubleQuote = new InputRule(/\"$/, \"”\")\n// :: InputRule “Smart” opening single quotes.\nexport const openSingleQuote = new InputRule(/(?:^|[\\s\\{\\[\\(\\<'\"\\u2018\\u201C])(')$/, \"‘\")\n// :: InputRule “Smart” closing single quotes.\nexport const closeSingleQuote = new InputRule(/'$/, \"’\")\n\n// :: [InputRule] Smart-quote related input rules.\nexport const smartQuotes = [openDoubleQuote, closeDoubleQuote, openSingleQuote, closeSingleQuote]\n","import {InputRule} from \"./inputrules\"\nimport {findWrapping, canJoin} from \"prosemirror-transform\"\n\n// :: (RegExp, NodeType, ?union<Object, ([string]) → ?Object>, ?([string], Node) → bool) → InputRule\n// Build an input rule for automatically wrapping a textblock when a\n// given string is typed. The `regexp` argument is\n// directly passed through to the `InputRule` constructor. You'll\n// probably want the regexp to start with `^`, so that the pattern can\n// only occur at the start of a textblock.\n//\n// `nodeType` is the type of node to wrap in. If it needs attributes,\n// you can either pass them directly, or pass a function that will\n// compute them from the regular expression match.\n//\n// By default, if there's a node with the same type above the newly\n// wrapped node, the rule will try to [join](#transform.Transform.join) those\n// two nodes. You can pass a join predicate, which takes a regular\n// expression match and the node before the wrapped node, and can\n// return a boolean to indicate whether a join should happen.\nexport function wrappingInputRule(regexp, nodeType, getAttrs, joinPredicate) {\n  return new InputRule(regexp, (state, match, start, end) => {\n    let attrs = getAttrs instanceof Function ? getAttrs(match) : getAttrs\n    let tr = state.tr.delete(start, end)\n    let $start = tr.doc.resolve(start), range = $start.blockRange(), wrapping = range && findWrapping(range, nodeType, attrs)\n    if (!wrapping) return null\n    tr.wrap(range, wrapping)\n    let before = tr.doc.resolve(start - 1).nodeBefore\n    if (before && before.type == nodeType && canJoin(tr.doc, start - 1) &&\n        (!joinPredicate || joinPredicate(match, before)))\n      tr.join(start - 1)\n    return tr\n  })\n}\n\n// :: (RegExp, NodeType, ?union<Object, ([string]) → ?Object>) → InputRule\n// Build an input rule that changes the type of a textblock when the\n// matched text is typed into it. You'll usually want to start your\n// regexp with `^` to that it is only matched at the start of a\n// textblock. The optional `getAttrs` parameter can be used to compute\n// the new node's attributes, and works the same as in the\n// `wrappingInputRule` function.\nexport function textblockTypeInputRule(regexp, nodeType, getAttrs) {\n  return new InputRule(regexp, (state, match, start, end) => {\n    let $start = state.doc.resolve(start)\n    let attrs = getAttrs instanceof Function ? getAttrs(match) : getAttrs\n    if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), nodeType)) return null\n    return state.tr\n      .delete(start, end)\n      .setBlockType(start, start, nodeType, attrs)\n  })\n}\n","import { isNotUndefined } from 'option-t/lib/Undefinable';\nimport { mapForUndefinable } from 'option-t/lib/Undefinable/map';\nimport { inputRules, wrappingInputRule } from 'prosemirror-inputrules';\nimport { Schema } from 'prosemirror-model';\nimport { InputRuleFactory } from '../editor-type';\n\nconst todoRule: InputRuleFactory = nodeType => {\n  return wrappingInputRule(/^\\s*(\\[\\s?\\])\\s$/, nodeType);\n};\n\nexport function buildTodoInputRules(schema: Schema) {\n  const rules = [mapForUndefinable(schema.nodes.todo, todoRule)].filter(\n    isNotUndefined,\n  );\n  return inputRules({ rules });\n}\n","import { Node } from 'prosemirror-model';\nimport { NodeView } from 'prosemirror-view';\n\nfunction createTodo({ className }: { className: string }) {\n  const li = document.createElement('li');\n  li.className = className;\n  li.style.listStyleType = 'none';\n  return li;\n}\n\nfunction createCheckbox({ checked }: { checked: boolean }) {\n  const input = document.createElement('input');\n  input.type = 'checkbox';\n  input.checked = checked;\n  return input;\n}\n\nfunction createInlineBlock() {\n  const span = document.createElement('span');\n  span.style.display = 'inline-block';\n  return span;\n}\n\nexport class TodoNodeView implements NodeView {\n  public contentDOM: HTMLElement;\n  public dom: HTMLElement;\n\n  constructor(node: Node) {\n    const todo = createTodo({ className: 'todo' });\n    const checkbox = createCheckbox({ checked: node.attrs.checked });\n    const inlineBlock = createInlineBlock();\n    todo.appendChild(checkbox);\n    todo.appendChild(inlineBlock);\n\n    this.contentDOM = inlineBlock;\n    this.dom = todo;\n  }\n}\n","import { isNull, Nullable } from 'option-t/lib/Nullable';\nimport { Node, Schema } from 'prosemirror-model';\nimport { Plugin } from 'prosemirror-state';\nimport { unwrapUnsafeValue } from '../../../utils/unwrapUnsafeValue';\nimport { buildTodoInputRules } from './TodoInputRule';\nimport { TodoNodeView } from './TodoNodeView';\n\nexport function isTodo(node: Node): boolean {\n  return node.type.name === 'todo';\n}\n\nfunction isCheckbox(target: Nullable<EventTarget>): boolean {\n  if (isNull(target)) {\n    return false;\n  }\n\n  const element = unwrapUnsafeValue<HTMLElement>(target);\n  return (\n    element.nodeName.toLowerCase() === 'input' &&\n    element.getAttribute('type') === 'checkbox'\n  );\n}\n\nconst clickPlugin = new Plugin({\n  props: {\n    nodeViews: {\n      todo(node) {\n        return new TodoNodeView(node);\n      },\n    },\n    handleClickOn(view, _pos, node, nodePos, event: MouseEvent) {\n      if (!isTodo(node) || !isCheckbox(event.target)) {\n        return false;\n      }\n\n      // FIXME: Create toggle check command\n      view.dispatch(\n        view.state.tr.setNodeMarkup(nodePos, undefined, {\n          checked: !node.attrs.checked,\n        }),\n      );\n\n      return true;\n    },\n  },\n});\n\nexport function buildTodoPlugins(schema: Schema): Plugin[] {\n  return [buildTodoInputRules(schema), clickPlugin];\n}\n","import { NodeSpec } from 'prosemirror-model';\nimport { unwrapUnsafeValue } from '../../../utils/unwrapUnsafeValue';\n\nconst todo: NodeSpec = {\n  attrs: { checked: { default: false } },\n  content: 'paragraph',\n  defining: true,\n  group: 'block',\n  parseDOM: [\n    {\n      tag: 'li.todo',\n      getAttrs(dom) {\n        if (typeof dom === 'string') {\n          return {};\n        }\n\n        const element = unwrapUnsafeValue<HTMLElement>(dom);\n\n        return {\n          checked: element.hasAttribute('checked')\n            ? Boolean(element.getAttribute('checked'))\n            : false,\n        };\n      },\n    },\n  ],\n};\n\nexport const todoSchema = {\n  spec: {\n    nodes: {\n      todo,\n    },\n  },\n};\n","export { buildTodoPlugins } from './TodoPlugin';\nexport { todoSchema } from './TodoSchema';\n","/**\n * @see https://github.com/ProseMirror/prosemirror-example-setup/blob/b8f2f91e2bc2be4442437709cd7d48d6cd9a3302/src/inputrules.js\n */\nimport { isNotUndefined } from 'option-t/lib/Undefinable';\nimport { mapForUndefinable } from 'option-t/lib/Undefinable/map';\nimport {\n  ellipsis,\n  emDash,\n  InputRule,\n  inputRules,\n  smartQuotes,\n  textblockTypeInputRule,\n  wrappingInputRule,\n} from 'prosemirror-inputrules';\nimport { NodeType, Schema } from 'prosemirror-model';\nimport { InputRuleFactory } from '../editor-type';\n\nconst blockQuoteRule: InputRuleFactory = nodeType => {\n  return wrappingInputRule(/^\\s*>\\s$/, nodeType);\n};\n\nconst orderedListRule: InputRuleFactory = nodeType => {\n  return wrappingInputRule(\n    /^(\\d+)\\.\\s$/,\n    nodeType,\n    match => ({ order: +match[1] }),\n    (match, node) => node.childCount + node.attrs.order === +match[1],\n  );\n};\n\nconst bulletListRule: InputRuleFactory = nodeType => {\n  return wrappingInputRule(/^\\s*([-+*])\\s$/, nodeType);\n};\n\nconst codeBlockRule: InputRuleFactory = nodeType => {\n  return textblockTypeInputRule(/^```$/, nodeType);\n};\n\nfunction headingRule(nodeType: NodeType, maxLevel: number): InputRule {\n  return textblockTypeInputRule(\n    new RegExp('^(#{1,' + maxLevel + '})\\\\s$'),\n    nodeType,\n    match => ({ level: match[1].length }),\n  );\n}\n\nexport function buildInputRules(schema: Schema) {\n  const rules = [\n    ...smartQuotes.concat(ellipsis, emDash),\n    mapForUndefinable(schema.nodes.blockquote, blockQuoteRule),\n    mapForUndefinable(schema.nodes.ordered_list, orderedListRule),\n    mapForUndefinable(schema.nodes.bullet_list, bulletListRule),\n    mapForUndefinable(schema.nodes.code_block, codeBlockRule),\n    mapForUndefinable(schema.nodes.heading, type => headingRule(type, 6)),\n  ].filter(isNotUndefined);\n  return inputRules({ rules });\n}\n","import {findWrapping, liftTarget, canSplit, ReplaceAroundStep} from \"prosemirror-transform\"\nimport {Slice, Fragment, NodeRange} from \"prosemirror-model\"\n\nconst olDOM = [\"ol\", 0], ulDOM = [\"ul\", 0], liDOM = [\"li\", 0]\n\n// :: NodeSpec\n// An ordered list [node spec](#model.NodeSpec). Has a single\n// attribute, `order`, which determines the number at which the list\n// starts counting, and defaults to 1. Represented as an `<ol>`\n// element.\nexport const orderedList = {\n  attrs: {order: {default: 1}},\n  parseDOM: [{tag: \"ol\", getAttrs(dom) {\n    return {order: dom.hasAttribute(\"start\") ? +dom.getAttribute(\"start\") : 1}\n  }}],\n  toDOM(node) {\n    return node.attrs.order == 1 ? olDOM : [\"ol\", {start: node.attrs.order}, 0]\n  }\n}\n\n// :: NodeSpec\n// A bullet list node spec, represented in the DOM as `<ul>`.\nexport const bulletList = {\n  parseDOM: [{tag: \"ul\"}],\n  toDOM() { return ulDOM }\n}\n\n// :: NodeSpec\n// A list item (`<li>`) spec.\nexport const listItem = {\n  parseDOM: [{tag: \"li\"}],\n  toDOM() { return liDOM },\n  defining: true\n}\n\nfunction add(obj, props) {\n  let copy = {}\n  for (let prop in obj) copy[prop] = obj[prop]\n  for (let prop in props) copy[prop] = props[prop]\n  return copy\n}\n\n// :: (OrderedMap<NodeSpec>, string, ?string) → OrderedMap<NodeSpec>\n// Convenience function for adding list-related node types to a map\n// specifying the nodes for a schema. Adds\n// [`orderedList`](#schema-list.orderedList) as `\"ordered_list\"`,\n// [`bulletList`](#schema-list.bulletList) as `\"bullet_list\"`, and\n// [`listItem`](#schema-list.listItem) as `\"list_item\"`.\n//\n// `itemContent` determines the content expression for the list items.\n// If you want the commands defined in this module to apply to your\n// list structure, it should have a shape like `\"paragraph block*\"` or\n// `\"paragraph (ordered_list | bullet_list)*\"`. `listGroup` can be\n// given to assign a group name to the list node types, for example\n// `\"block\"`.\nexport function addListNodes(nodes, itemContent, listGroup) {\n  return nodes.append({\n    ordered_list: add(orderedList, {content: \"list_item+\", group: listGroup}),\n    bullet_list: add(bulletList, {content: \"list_item+\", group: listGroup}),\n    list_item: add(listItem, {content: itemContent})\n  })\n}\n\n// :: (NodeType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Returns a command function that wraps the selection in a list with\n// the given type an attributes. If `dispatch` is null, only return a\n// value to indicate whether this is possible, but don't actually\n// perform the change.\nexport function wrapInList(listType, attrs) {\n  return function(state, dispatch) {\n    let {$from, $to} = state.selection\n    let range = $from.blockRange($to), doJoin = false, outerRange = range\n    if (!range) return false\n    // This is at the top of an existing list item\n    if (range.depth >= 2 && $from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {\n      // Don't do anything if this is the top of the list\n      if ($from.index(range.depth - 1) == 0) return false\n      let $insert = state.doc.resolve(range.start - 2)\n      outerRange = new NodeRange($insert, $insert, range.depth)\n      if (range.endIndex < range.parent.childCount)\n        range = new NodeRange($from, state.doc.resolve($to.end(range.depth)), range.depth)\n      doJoin = true\n    }\n    let wrap = findWrapping(outerRange, listType, attrs, range)\n    if (!wrap) return false\n    if (dispatch) dispatch(doWrapInList(state.tr, range, wrap, doJoin, listType).scrollIntoView())\n    return true\n  }\n}\n\nfunction doWrapInList(tr, range, wrappers, joinBefore, listType) {\n  let content = Fragment.empty\n  for (let i = wrappers.length - 1; i >= 0; i--)\n    content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content))\n\n  tr.step(new ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end,\n                                new Slice(content, 0, 0), wrappers.length, true))\n\n  let found = 0\n  for (let i = 0; i < wrappers.length; i++) if (wrappers[i].type == listType) found = i + 1\n  let splitDepth = wrappers.length - found\n\n  let splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0), parent = range.parent\n  for (let i = range.startIndex, e = range.endIndex, first = true; i < e; i++, first = false) {\n    if (!first && canSplit(tr.doc, splitPos, splitDepth)) {\n      tr.split(splitPos, splitDepth)\n      splitPos += 2 * splitDepth\n    }\n    splitPos += parent.child(i).nodeSize\n  }\n  return tr\n}\n\n// :: (NodeType) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Build a command that splits a non-empty textblock at the top level\n// of a list item by also splitting that list item.\nexport function splitListItem(itemType) {\n  return function(state, dispatch) {\n    let {$from, $to, node} = state.selection\n    if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) return false\n    let grandParent = $from.node(-1)\n    if (grandParent.type != itemType) return false\n    if ($from.parent.content.size == 0) {\n      // In an empty block. If this is a nested list, the wrapping\n      // list item should be split. Otherwise, bail out and let next\n      // command handle lifting.\n      if ($from.depth == 2 || $from.node(-3).type != itemType ||\n          $from.index(-2) != $from.node(-2).childCount - 1) return false\n      if (dispatch) {\n        let wrap = Fragment.empty, keepItem = $from.index(-1) > 0\n        // Build a fragment containing empty versions of the structure\n        // from the outer list item to the parent node of the cursor\n        for (let d = $from.depth - (keepItem ? 1 : 2); d >= $from.depth - 3; d--)\n          wrap = Fragment.from($from.node(d).copy(wrap))\n        // Add a second list item with an empty default start node\n        wrap = wrap.append(Fragment.from(itemType.createAndFill()))\n        let tr = state.tr.replace($from.before(keepItem ? null : -1), $from.after(-3), new Slice(wrap, keepItem ? 3 : 2, 2))\n        tr.setSelection(state.selection.constructor.near(tr.doc.resolve($from.pos + (keepItem ? 3 : 2))))\n        dispatch(tr.scrollIntoView())\n      }\n      return true\n    }\n    let nextType = $to.pos == $from.end() ? grandParent.defaultContentType(0) : null\n    let tr = state.tr.delete($from.pos, $to.pos)\n    let types = nextType && [null, {type: nextType}]\n    if (!canSplit(tr.doc, $from.pos, 2, types)) return false\n    if (dispatch) dispatch(tr.split($from.pos, 2, types).scrollIntoView())\n    return true\n  }\n}\n\n// :: (NodeType) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Create a command to lift the list item around the selection up into\n// a wrapping list.\nexport function liftListItem(itemType) {\n  return function(state, dispatch) {\n    let {$from, $to} = state.selection\n    let range = $from.blockRange($to, node => node.childCount && node.firstChild.type == itemType)\n    if (!range) return false\n    if (!dispatch) return true\n    if ($from.node(range.depth - 1).type == itemType) // Inside a parent list\n      return liftToOuterList(state, dispatch, itemType, range)\n    else // Outer list node\n      return liftOutOfList(state, dispatch, range)\n  }\n}\n\nfunction liftToOuterList(state, dispatch, itemType, range) {\n  let tr = state.tr, end = range.end, endOfList = range.$to.end(range.depth)\n  if (end < endOfList) {\n    // There are siblings after the lifted items, which must become\n    // children of the last item\n    tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList,\n                                  new Slice(Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true))\n    range = new NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth)\n  }\n  dispatch(tr.lift(range, liftTarget(range)).scrollIntoView())\n  return true\n}\n\nfunction liftOutOfList(state, dispatch, range) {\n  let tr = state.tr, list = range.parent\n  // Merge the list items into a single big item\n  for (let pos = range.end, i = range.endIndex - 1, e = range.startIndex; i > e; i--) {\n    pos -= list.child(i).nodeSize\n    tr.delete(pos - 1, pos + 1)\n  }\n  let $start = tr.doc.resolve(range.start), item = $start.nodeAfter\n  let atStart = range.startIndex == 0, atEnd = range.endIndex == list.childCount\n  let parent = $start.node(-1), indexBefore = $start.index(-1)\n  if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1,\n                         item.content.append(atEnd ? Fragment.empty : Fragment.from(list))))\n    return false\n  let start = $start.pos, end = start + item.nodeSize\n  // Strip off the surrounding list. At the sides where we're not at\n  // the end of the list, the existing list is closed. At sides where\n  // this is the end, it is overwritten to its end.\n  tr.step(new ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1,\n                                new Slice((atStart ? Fragment.empty : Fragment.from(list.copy(Fragment.empty)))\n                                          .append(atEnd ? Fragment.empty : Fragment.from(list.copy(Fragment.empty))),\n                                          atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1))\n  dispatch(tr.scrollIntoView())\n  return true\n}\n\n// :: (NodeType) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Create a command to sink the list item around the selection down\n// into an inner list.\nexport function sinkListItem(itemType) {\n  return function(state, dispatch) {\n    let {$from, $to} = state.selection\n    let range = $from.blockRange($to, node => node.childCount && node.firstChild.type == itemType)\n    if (!range) return false\n    let startIndex = range.startIndex\n    if (startIndex == 0) return false\n    let parent = range.parent, nodeBefore = parent.child(startIndex - 1)\n    if (nodeBefore.type != itemType) return false\n\n    if (dispatch) {\n      let nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type\n      let inner = Fragment.from(nestedBefore ? itemType.create() : null)\n      let slice = new Slice(Fragment.from(itemType.create(null, Fragment.from(parent.copy(inner)))),\n                            nestedBefore ? 3 : 1, 0)\n      let before = range.start, after = range.end\n      dispatch(state.tr.step(new ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after,\n                                                   before, after, slice, 1, true))\n               .scrollIntoView())\n    }\n    return true\n  }\n}\n","/**\n * @see https://github.com/ProseMirror/prosemirror-example-setup/blob/afbc42a68803a57af3f29dd93c3c522c30ea3ed6/src/keymap.js\n */\nimport { Nullable } from 'option-t/lib/Nullable';\nimport { isNotUndefined, isUndefined } from 'option-t/lib/Undefinable';\nimport { tapUndefinable } from 'option-t/lib/Undefinable/tap';\nimport { unwrapOrFromUndefinable } from 'option-t/lib/Undefinable/unwrapOr';\nimport {\n  chainCommands,\n  exitCode,\n  joinDown,\n  joinUp,\n  lift,\n  selectParentNode,\n  setBlockType,\n  toggleMark,\n  wrapIn,\n} from 'prosemirror-commands';\nimport { redo, undo } from 'prosemirror-history';\nimport { undoInputRule } from 'prosemirror-inputrules';\nimport { MarkType, NodeType, Schema } from 'prosemirror-model';\nimport {\n  liftListItem,\n  sinkListItem,\n  splitListItem,\n  wrapInList,\n} from 'prosemirror-schema-list';\nimport { Command } from '../editor-type';\n\nconst mac = isUndefined(navigator) ? /Mac/.test(navigator.platform) : false;\n\nexport function buildKeymap(\n  schema: Schema,\n  mapKeys: Record<string, string | false> = {},\n): Record<string, Nullable<Command>> {\n  const keys: Record<string, Nullable<Command>> = {};\n\n  function bind(key: string, cmd: Command) {\n    const mappedKey = mapKeys[key];\n    if (mappedKey === false) {\n      return;\n    }\n\n    const finalKey = unwrapOrFromUndefinable(mappedKey, key);\n    keys[finalKey] = cmd;\n  }\n\n  bind('Mod-z', undo);\n  bind('Shift-Mod-z', redo);\n  bind('Backspace', undoInputRule);\n  if (!mac) bind('Mod-y', redo);\n\n  bind('Alt-ArrowUp', joinUp);\n  bind('Alt-ArrowDown', joinDown);\n  bind('Mod-BracketLeft', lift);\n  bind('Escape', selectParentNode);\n\n  tapUndefinable<MarkType>(schema.marks.strong, type => {\n    bind('Mod-b', toggleMark(type));\n  });\n  tapUndefinable<MarkType>(schema.marks.em, type => {\n    bind('Mod-i', toggleMark(type));\n  });\n  tapUndefinable<MarkType>(schema.marks.code, type => {\n    bind('Mod-`', toggleMark(type));\n  });\n\n  tapUndefinable<NodeType>(schema.nodes.bullet_list, type => {\n    bind('Shift-Ctrl-8', wrapInList(type));\n  });\n  tapUndefinable<NodeType>(schema.nodes.ordered_list, type => {\n    bind('Shift-Ctrl-9', wrapInList(type));\n  });\n  tapUndefinable<NodeType>(schema.nodes.blockquote, type => {\n    bind('Ctrl->', wrapIn(type));\n  });\n  tapUndefinable<NodeType>(schema.nodes.hard_break, type => {\n    const br = type;\n    const cmd = chainCommands(exitCode, (state, dispatch) => {\n      if (isNotUndefined(dispatch)) {\n        dispatch(state.tr.replaceSelectionWith(br.create()).scrollIntoView());\n      }\n      return true;\n    });\n    bind('Mod-Enter', cmd);\n    bind('Shift-Enter', cmd);\n    if (mac) bind('Ctrl-Enter', cmd);\n  });\n  tapUndefinable<NodeType>(schema.nodes.list_item, type => {\n    bind('Enter', splitListItem(type));\n    bind('Shift-Tab', liftListItem(type));\n    bind('Tab', sinkListItem(type));\n  });\n  tapUndefinable<NodeType>(schema.nodes.todo, type => {\n    bind('Enter', splitListItem(type));\n    bind('Shift-Tab', liftListItem(type));\n    bind('Tab', sinkListItem(type));\n  });\n  tapUndefinable<NodeType>(schema.nodes.paragraph, type => {\n    bind('Shift-Ctrl-0', setBlockType(type));\n  });\n  tapUndefinable<NodeType>(schema.nodes.code_block, type => {\n    bind('Shift-Ctrl-\\\\', setBlockType(type));\n  });\n  tapUndefinable<NodeType>(schema.nodes.heading, type => {\n    for (let i = 1; i <= 6; i++) {\n      bind('Shift-Ctrl-' + i, setBlockType(type, { level: i }));\n    }\n  });\n  tapUndefinable<NodeType>(schema.nodes.horizontal_rule, type => {\n    const hr = type;\n    bind('Mod-_', (state, dispatch) => {\n      if (isNotUndefined(dispatch)) {\n        dispatch(state.tr.replaceSelectionWith(hr.create()).scrollIntoView());\n      }\n      return true;\n    });\n  });\n\n  return keys;\n}\n","import { baseKeymap } from 'prosemirror-commands';\nimport { dropCursor } from 'prosemirror-dropcursor';\nimport { gapCursor } from 'prosemirror-gapcursor';\nimport { history } from 'prosemirror-history';\nimport { keymap } from 'prosemirror-keymap';\nimport { Schema } from 'prosemirror-model';\nimport { Plugin } from 'prosemirror-state';\nimport { buildTodoPlugins } from '../TodoPlugin';\nimport { buildInputRules } from './DefaultInputRule';\nimport { buildKeymap } from './DefaultKeymap';\n\nexport function buildPlugins(schema: Schema): Array<Plugin<Schema>> {\n  return [\n    buildInputRules(schema),\n    ...buildTodoPlugins(schema),\n    keymap(buildKeymap(schema, {})),\n    keymap(baseKeymap),\n    history(),\n    dropCursor(),\n    gapCursor(),\n  ];\n}\n","import {Schema} from \"prosemirror-model\"\n\n// :: Object\n// [Specs](#model.NodeSpec) for the nodes defined in this schema.\nexport const nodes = {\n  // :: NodeSpec The top level document node.\n  doc: {\n    content: \"block+\"\n  },\n\n  // :: NodeSpec A plain paragraph textblock. Represented in the DOM\n  // as a `<p>` element.\n  paragraph: {\n    content: \"inline*\",\n    group: \"block\",\n    parseDOM: [{tag: \"p\"}],\n    toDOM() { return [\"p\", 0] }\n  },\n\n  // :: NodeSpec A blockquote (`<blockquote>`) wrapping one or more blocks.\n  blockquote: {\n    content: \"block+\",\n    group: \"block\",\n    defining: true,\n    parseDOM: [{tag: \"blockquote\"}],\n    toDOM() { return [\"blockquote\", 0] }\n  },\n\n  // :: NodeSpec A horizontal rule (`<hr>`).\n  horizontal_rule: {\n    group: \"block\",\n    parseDOM: [{tag: \"hr\"}],\n    toDOM() { return [\"hr\"] }\n  },\n\n  // :: NodeSpec A heading textblock, with a `level` attribute that\n  // should hold the number 1 to 6. Parsed and serialized as `<h1>` to\n  // `<h6>` elements.\n  heading: {\n    attrs: {level: {default: 1}},\n    content: \"inline*\",\n    group: \"block\",\n    defining: true,\n    parseDOM: [{tag: \"h1\", attrs: {level: 1}},\n               {tag: \"h2\", attrs: {level: 2}},\n               {tag: \"h3\", attrs: {level: 3}},\n               {tag: \"h4\", attrs: {level: 4}},\n               {tag: \"h5\", attrs: {level: 5}},\n               {tag: \"h6\", attrs: {level: 6}}],\n    toDOM(node) { return [\"h\" + node.attrs.level, 0] }\n  },\n\n  // :: NodeSpec A code listing. Disallows marks or non-text inline\n  // nodes by default. Represented as a `<pre>` element with a\n  // `<code>` element inside of it.\n  code_block: {\n    content: \"text*\",\n    marks: \"\",\n    group: \"block\",\n    code: true,\n    defining: true,\n    parseDOM: [{tag: \"pre\", preserveWhitespace: \"full\"}],\n    toDOM() { return [\"pre\", [\"code\", 0]] }\n  },\n\n  // :: NodeSpec The text node.\n  text: {\n    group: \"inline\"\n  },\n\n  // :: NodeSpec An inline image (`<img>`) node. Supports `src`,\n  // `alt`, and `href` attributes. The latter two default to the empty\n  // string.\n  image: {\n    inline: true,\n    attrs: {\n      src: {},\n      alt: {default: null},\n      title: {default: null}\n    },\n    group: \"inline\",\n    draggable: true,\n    parseDOM: [{tag: \"img[src]\", getAttrs(dom) {\n      return {\n        src: dom.getAttribute(\"src\"),\n        title: dom.getAttribute(\"title\"),\n        alt: dom.getAttribute(\"alt\")\n      }\n    }}],\n    toDOM(node) { return [\"img\", node.attrs] }\n  },\n\n  // :: NodeSpec A hard line break, represented in the DOM as `<br>`.\n  hard_break: {\n    inline: true,\n    group: \"inline\",\n    selectable: false,\n    parseDOM: [{tag: \"br\"}],\n    toDOM() { return [\"br\"] }\n  }\n}\n\n// :: Object [Specs](#model.MarkSpec) for the marks in the schema.\nexport const marks = {\n  // :: MarkSpec A link. Has `href` and `title` attributes. `title`\n  // defaults to the empty string. Rendered and parsed as an `<a>`\n  // element.\n  link: {\n    attrs: {\n      href: {},\n      title: {default: null}\n    },\n    inclusive: false,\n    parseDOM: [{tag: \"a[href]\", getAttrs(dom) {\n      return {href: dom.getAttribute(\"href\"), title: dom.getAttribute(\"title\")}\n    }}],\n    toDOM(node) { return [\"a\", node.attrs] }\n  },\n\n  // :: MarkSpec An emphasis mark. Rendered as an `<em>` element.\n  // Has parse rules that also match `<i>` and `font-style: italic`.\n  em: {\n    parseDOM: [{tag: \"i\"}, {tag: \"em\"}, {style: \"font-style=italic\"}],\n    toDOM() { return [\"em\"] }\n  },\n\n  // :: MarkSpec A strong mark. Rendered as `<strong>`, parse rules\n  // also match `<b>` and `font-weight: bold`.\n  strong: {\n    parseDOM: [{tag: \"strong\"},\n               // This works around a Google Docs misbehavior where\n               // pasted content will be inexplicably wrapped in `<b>`\n               // tags with a font-weight normal.\n               {tag: \"b\", getAttrs: node => node.style.fontWeight != \"normal\" && null},\n               {style: \"font-weight\", getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null}],\n    toDOM() { return [\"strong\"] }\n  },\n\n  // :: MarkSpec Code font mark. Represented as a `<code>` element.\n  code: {\n    parseDOM: [{tag: \"code\"}],\n    toDOM() { return [\"code\"] }\n  }\n}\n\n// :: Schema\n// This schema rougly corresponds to the document schema used by\n// [CommonMark](http://commonmark.org/), minus the list elements,\n// which are defined in the [`prosemirror-schema-list`](#schema-list)\n// module.\n//\n// To reuse elements from this schema, extend or read from its\n// `spec.nodes` and `spec.marks` [properties](#model.Schema.spec).\nexport const schema = new Schema({nodes, marks})\n","import { Schema } from 'prosemirror-model';\nimport { schema as basicSchema } from 'prosemirror-schema-basic';\nimport { addListNodes } from 'prosemirror-schema-list';\nimport { unwrapUnsafeValue } from '../../../utils/unwrapUnsafeValue';\nimport { todoSchema } from '../TodoPlugin';\n\ntype OrderedMap = ReturnType<typeof addListNodes>;\n\nexport function createSchema() {\n  const basicNodes = unwrapUnsafeValue<OrderedMap>(basicSchema.spec.nodes);\n  const nodes = addListNodes(basicNodes, 'paragraph block*', 'block');\n  const customNodes = unwrapUnsafeValue<OrderedMap>(todoSchema.spec.nodes);\n\n  return new Schema({\n    marks: basicSchema.spec.marks,\n    nodes: nodes.append(customNodes),\n  });\n}\n","export { buildPlugins } from './DefaultPlugin';\nexport { createSchema } from './DefaultSchema';\n","import { Nullable } from 'option-t/lib/Nullable';\nimport { mapOrElseForNullable } from 'option-t/lib/Nullable/mapOrElse';\nimport { Node, Schema } from 'prosemirror-model';\nimport { EditorState } from 'prosemirror-state';\nimport { unwrapUnsafeValue } from '../../utils/unwrapUnsafeValue';\nimport { buildPlugins } from './DefaultPlugin';\nimport { EditorContent } from './editor-type';\n\nfunction createEmptyDoc(schema: Schema): Node {\n  return schema.node('doc', {}, [schema.node('paragraph', {}, [])]);\n}\n\nexport function createStateFromContent(\n  schema: Schema,\n  content: Nullable<EditorContent>,\n) {\n  const doc = mapOrElseForNullable(\n    content,\n    () => createEmptyDoc(schema),\n    schema.nodeFromJSON,\n  );\n\n  return EditorState.create({\n    doc,\n    plugins: buildPlugins(schema),\n  });\n}\n\nexport function serializeEditorState(\n  editorState: EditorState,\n): Nullable<EditorContent> {\n  return unwrapUnsafeValue<EditorContent>(editorState.doc.toJSON());\n}\n","import { css } from '../../styled-components';\n\nexport const editorStyle = css`\n  .ProseMirror {\n    padding: 4px 8px 4px 14px;\n    line-height: 1.2;\n\n    p {\n      margin: 0;\n    }\n\n    input[type='checkbox']:checked + span {\n      opacity: ${({ theme }) => theme.inactiveOpacity};\n      text-decoration: line-through;\n    }\n  }\n\n  .ProseMirror-focused {\n    outline: none;\n  }\n`;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n *  * Return _v_ directly.\n *      * This value is passed as the input. But it maybe mutated by calling _fn_.\n *  * Call _fn_ with _v_ if _v_ is not `null` and `undefined`.\n */\nfunction tapMaybe(v, fn) {\n    if (v !== undefined && v !== null) {\n        fn(v);\n    }\n    return v;\n}\nexports.tapMaybe = tapMaybe;\n",null,"// HTML5 entities map: { name -> utf16string }\n//\n'use strict';\n\n/*eslint quotes:0*/\nmodule.exports = require('entities/maps/entities.json');\n","module.exports=/[!-#%-\\*,-/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E49\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/","\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n","\n'use strict';\n\n\n/* eslint-disable no-bitwise */\n\nvar decodeCache = {};\n\nfunction getDecodeCache(exclude) {\n  var i, ch, cache = decodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = decodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n    cache.push(ch);\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    ch = exclude.charCodeAt(i);\n    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);\n  }\n\n  return cache;\n}\n\n\n// Decode percent-encoded string.\n//\nfunction decode(string, exclude) {\n  var cache;\n\n  if (typeof exclude !== 'string') {\n    exclude = decode.defaultChars;\n  }\n\n  cache = getDecodeCache(exclude);\n\n  return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n    var i, l, b1, b2, b3, b4, chr,\n        result = '';\n\n    for (i = 0, l = seq.length; i < l; i += 3) {\n      b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n\n      if (b1 < 0x80) {\n        result += cache[b1];\n        continue;\n      }\n\n      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {\n        // 110xxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n\n        if ((b2 & 0xC0) === 0x80) {\n          chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);\n\n          if (chr < 0x80) {\n            result += '\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 3;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {\n        // 1110xxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n          chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);\n\n          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {\n            result += '\\ufffd\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 6;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {\n        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n        b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n          chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);\n\n          if (chr < 0x10000 || chr > 0x10FFFF) {\n            result += '\\ufffd\\ufffd\\ufffd\\ufffd';\n          } else {\n            chr -= 0x10000;\n            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));\n          }\n\n          i += 9;\n          continue;\n        }\n      }\n\n      result += '\\ufffd';\n    }\n\n    return result;\n  });\n}\n\n\ndecode.defaultChars   = ';/?:@&=+$,#';\ndecode.componentChars = '';\n\n\nmodule.exports = decode;\n","\n'use strict';\n\n\nmodule.exports = function format(url) {\n  var result = '';\n\n  result += url.protocol || '';\n  result += url.slashes ? '//' : '';\n  result += url.auth ? url.auth + '@' : '';\n\n  if (url.hostname && url.hostname.indexOf(':') !== -1) {\n    // ipv6 address\n    result += '[' + url.hostname + ']';\n  } else {\n    result += url.hostname || '';\n  }\n\n  result += url.port ? ':' + url.port : '';\n  result += url.pathname || '';\n  result += url.search || '';\n  result += url.hash || '';\n\n  return result;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.pathname = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = [ '<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t' ],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = [ '{', '}', '|', '\\\\', '^', '`' ].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = [ '\\'' ].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = [ '%', '/', '?', ';', '#' ].concat(autoEscape),\n    hostEndingChars = [ '/', '?', '#' ],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    /* eslint-disable no-script-url */\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    };\n    /* eslint-enable no-script-url */\n\nfunction urlParse(url, slashesDenoteHost) {\n  if (url && url instanceof Url) { return url; }\n\n  var u = new Url();\n  u.parse(url, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, slashesDenoteHost) {\n  var i, l, lowerProto, hec, slashes,\n      rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    lowerProto = proto.toLowerCase();\n    this.protocol = proto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = auth;\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) {\n      hostEnd = rest.length;\n    }\n\n    if (rest[hostEnd - 1] === ':') { hostEnd--; }\n    var host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost(host);\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) { continue; }\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    }\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    rest = rest.slice(0, qm);\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '';\n  }\n\n  return this;\n};\n\nUrl.prototype.parseHost = function(host) {\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nmodule.exports = urlParse;\n","'use strict';\n\n\nmodule.exports.encode = require('./encode');\nmodule.exports.decode = require('./decode');\nmodule.exports.format = require('./format');\nmodule.exports.parse  = require('./parse');\n","module.exports=/[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/","module.exports=/[\\0-\\x1F\\x7F-\\x9F]/","module.exports=/[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804\\uDCBD|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/","module.exports=/[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/","'use strict';\n\nexports.Any = require('./properties/Any/regex');\nexports.Cc  = require('./categories/Cc/regex');\nexports.Cf  = require('./categories/Cf/regex');\nexports.P   = require('./categories/P/regex');\nexports.Z   = require('./categories/Z/regex');\n","// Utilities\n//\n'use strict';\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction isString(obj) { return _class(obj) === '[object String]'; }\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction has(object, key) {\n  return _hasOwnProperty.call(object, key);\n}\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object');\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt(src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isValidEntityCode(c) {\n  /*eslint no-bitwise:0*/\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) { return false; }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) { return false; }\n  if (c === 0x0B) { return false; }\n  if (c >= 0x0E && c <= 0x1F) { return false; }\n  if (c >= 0x7F && c <= 0x9F) { return false; }\n  // out of range\n  if (c > 0x10FFFF) { return false; }\n  return true;\n}\n\nfunction fromCodePoint(c) {\n  /*eslint no-bitwise:0*/\n  if (c > 0xffff) {\n    c -= 0x10000;\n    var surrogate1 = 0xd800 + (c >> 10),\n        surrogate2 = 0xdc00 + (c & 0x3ff);\n\n    return String.fromCharCode(surrogate1, surrogate2);\n  }\n  return String.fromCharCode(c);\n}\n\n\nvar UNESCAPE_MD_RE  = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\nvar ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;\nvar UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');\n\nvar DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;\n\nvar entities = require('./entities');\n\nfunction replaceEntityPattern(match, name) {\n  var code = 0;\n\n  if (has(entities, name)) {\n    return entities[name];\n  }\n\n  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    code = name[1].toLowerCase() === 'x' ?\n      parseInt(name.slice(2), 16)\n    :\n      parseInt(name.slice(1), 10);\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code);\n    }\n  }\n\n  return match;\n}\n\n/*function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n}*/\n\nfunction unescapeMd(str) {\n  if (str.indexOf('\\\\') < 0) { return str; }\n  return str.replace(UNESCAPE_MD_RE, '$1');\n}\n\nfunction unescapeAll(str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) { return str; }\n\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) { return escaped; }\n    return replaceEntityPattern(match, entity);\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nvar HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nvar HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\n\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\n\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n\nfunction escapeRE(str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&');\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n  return false;\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace(code) {\n  if (code >= 0x2000 && code <= 0x200A) { return true; }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true;\n  }\n  return false;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*eslint-disable max-len*/\nvar UNICODE_PUNCT_RE = require('uc.micro/categories/P/regex');\n\n// Currently without astral characters support.\nfunction isPunctChar(ch) {\n  return UNICODE_PUNCT_RE.test(ch);\n}\n\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct(ch) {\n  switch (ch) {\n    case 0x21/* ! */:\n    case 0x22/* \" */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x27/* ' */:\n    case 0x28/* ( */:\n    case 0x29/* ) */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2C/* , */:\n    case 0x2D/* - */:\n    case 0x2E/* . */:\n    case 0x2F/* / */:\n    case 0x3A/* : */:\n    case 0x3B/* ; */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x3F/* ? */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7C/* | */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference(str) {\n  // use .toUpperCase() instead of .toLowerCase()\n  // here to avoid a conflict with Object.prototype\n  // members (most notably, `__proto__`)\n  return str.trim().replace(/\\s+/g, ' ').toUpperCase();\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nexports.lib                 = {};\nexports.lib.mdurl           = require('mdurl');\nexports.lib.ucmicro         = require('uc.micro');\n\nexports.assign              = assign;\nexports.isString            = isString;\nexports.has                 = has;\nexports.unescapeMd          = unescapeMd;\nexports.unescapeAll         = unescapeAll;\nexports.isValidEntityCode   = isValidEntityCode;\nexports.fromCodePoint       = fromCodePoint;\n// exports.replaceEntities     = replaceEntities;\nexports.escapeHtml          = escapeHtml;\nexports.arrayReplaceAt      = arrayReplaceAt;\nexports.isSpace             = isSpace;\nexports.isWhiteSpace        = isWhiteSpace;\nexports.isMdAsciiPunct      = isMdAsciiPunct;\nexports.isPunctChar         = isPunctChar;\nexports.escapeRE            = escapeRE;\nexports.normalizeReference  = normalizeReference;\n","// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n'use strict';\n\nmodule.exports = function parseLinkLabel(state, start, disableNested) {\n  var level, found, marker, prevPos,\n      labelEnd = -1,\n      max = state.posMax,\n      oldPos = state.pos;\n\n  state.pos = start + 1;\n  level = 1;\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n    if (marker === 0x5D /* ] */) {\n      level--;\n      if (level === 0) {\n        found = true;\n        break;\n      }\n    }\n\n    prevPos = state.pos;\n    state.md.inline.skipToken(state);\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++;\n      } else if (disableNested) {\n        state.pos = oldPos;\n        return -1;\n      }\n    }\n  }\n\n  if (found) {\n    labelEnd = state.pos;\n  }\n\n  // restore old state\n  state.pos = oldPos;\n\n  return labelEnd;\n};\n","// Parse link destination\n//\n'use strict';\n\n\nvar isSpace     = require('../common/utils').isSpace;\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkDestination(str, pos, max) {\n  var code, level,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++;\n    while (pos < max) {\n      code = str.charCodeAt(pos);\n      if (code === 0x0A /* \\n */ || isSpace(code)) { return result; }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1;\n        result.str = unescapeAll(str.slice(start + 1, pos));\n        result.ok = true;\n        return result;\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2;\n        continue;\n      }\n\n      pos++;\n    }\n\n    // no closing '>'\n    return result;\n  }\n\n  // this should be ... } else { ... branch\n\n  level = 0;\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n\n    if (code === 0x20) { break; }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break; }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos += 2;\n      continue;\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++;\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break; }\n      level--;\n    }\n\n    pos++;\n  }\n\n  if (start === pos) { return result; }\n  if (level !== 0) { return result; }\n\n  result.str = unescapeAll(str.slice(start, pos));\n  result.lines = lines;\n  result.pos = pos;\n  result.ok = true;\n  return result;\n};\n","// Parse link title\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkTitle(str, pos, max) {\n  var code,\n      marker,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (pos >= max) { return result; }\n\n  marker = str.charCodeAt(pos);\n\n  if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return result; }\n\n  pos++;\n\n  // if opening marker is \"(\", switch it to closing marker \")\"\n  if (marker === 0x28) { marker = 0x29; }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === marker) {\n      result.pos = pos + 1;\n      result.lines = lines;\n      result.str = unescapeAll(str.slice(start + 1, pos));\n      result.ok = true;\n      return result;\n    } else if (code === 0x0A) {\n      lines++;\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++;\n      if (str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n\n    pos++;\n  }\n\n  return result;\n};\n","// Just a shortcut for bulk export\n'use strict';\n\n\nexports.parseLinkLabel       = require('./parse_link_label');\nexports.parseLinkDestination = require('./parse_link_destination');\nexports.parseLinkTitle       = require('./parse_link_title');\n","/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n'use strict';\n\n\nvar assign          = require('./common/utils').assign;\nvar unescapeAll     = require('./common/utils').unescapeAll;\nvar escapeHtml      = require('./common/utils').escapeHtml;\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar default_rules = {};\n\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(tokens[idx].content) +\n          '</code>';\n};\n\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n';\n};\n\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx],\n      info = token.info ? unescapeAll(token.info).trim() : '',\n      langName = '',\n      highlighted, i, tmpAttrs, tmpToken;\n\n  if (info) {\n    langName = info.split(/\\s+/g)[0];\n  }\n\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .clone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    i        = token.attrIndex('class');\n    tmpAttrs = token.attrs ? token.attrs.slice() : [];\n\n    if (i < 0) {\n      tmpAttrs.push([ 'class', options.langPrefix + langName ]);\n    } else {\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    }\n\n    // Fake token just to render attributes\n    tmpToken = {\n      attrs: tmpAttrs\n    };\n\n    return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'\n          + highlighted\n          + '</code></pre>\\n';\n  }\n\n\n  return  '<pre><code' + slf.renderAttrs(token) + '>'\n        + highlighted\n        + '</code></pre>\\n';\n};\n\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env);\n\n  return slf.renderToken(tokens, idx, options);\n};\n\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n';\n};\n\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content);\n};\n\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\n\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer() {\n\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  var i, l, result;\n\n  if (!token.attrs) { return ''; }\n\n  result = '';\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  var nextToken,\n      result = '',\n      needLf = false,\n      token = tokens[idx];\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return '';\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token);\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  }\n\n  // Check if we need to add a newline after this tag\n  if (token.block) {\n    needLf = true;\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        nextToken = tokens[idx + 1];\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>';\n\n  return result;\n};\n\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  var type,\n      result = '',\n      rules = this.rules;\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n\n  return result;\n};\n\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  var result = '';\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    if (tokens[i].type === 'text') {\n      result += tokens[i].content;\n    } else if (tokens[i].type === 'image') {\n      result += this.renderInlineAsText(tokens[i].children, options, env);\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  var i, len, type,\n      result = '',\n      rules = this.rules;\n\n  for (i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[tokens[i].type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = Renderer;\n","/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n'use strict';\n\n\n/**\n * new Ruler()\n **/\nfunction Ruler() {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = [];\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Helper methods, should not be used directly\n\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (var i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  var self = this;\n  var chains = [ '' ];\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return; }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName);\n      }\n    });\n  });\n\n  self.__cache__ = {};\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = [];\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return; }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return; }\n\n      self.__cache__[chain].push(rule.fn);\n    });\n  });\n};\n\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  var index = this.__find__(name);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name); }\n\n  this.__rules__[index].fn = fn;\n  this.__rules__[index].alt = opt.alt || [];\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  var index = this.__find__(beforeName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName); }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  var index = this.__find__(afterName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName); }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  var opt = options || {};\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = true;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false; });\n\n  this.enable(list, ignoreInvalid);\n};\n\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = false;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__();\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || [];\n};\n\nmodule.exports = Ruler;\n","// Normalize input string\n\n'use strict';\n\n\nvar NEWLINES_RE  = /\\r[\\n\\u0085]?|[\\u2424\\u2028\\u0085]/g;\nvar NULL_RE      = /\\u0000/g;\n\n\nmodule.exports = function inline(state) {\n  var str;\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n');\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD');\n\n  state.src = str;\n};\n","'use strict';\n\n\nmodule.exports = function block(state) {\n  var token;\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0);\n    token.content  = state.src;\n    token.map      = [ 0, 1 ];\n    token.children = [];\n    state.tokens.push(token);\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens);\n  }\n};\n","'use strict';\n\nmodule.exports = function inline(state) {\n  var tokens = state.tokens, tok, i, l;\n\n  // Parse inlines\n  for (i = 0, l = tokens.length; i < l; i++) {\n    tok = tokens[i];\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n    }\n  }\n};\n","// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n'use strict';\n\n\nvar arrayReplaceAt = require('../common/utils').arrayReplaceAt;\n\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\n\nmodule.exports = function linkify(state) {\n  var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,\n      level, htmlLinkLevel, url, fullUrl, urlText,\n      blockTokens = state.tokens,\n      links;\n\n  if (!state.md.options.linkify) { return; }\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n\n    tokens = blockTokens[j].children;\n\n    htmlLinkLevel = 0;\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (i = tokens.length - 1; i >= 0; i--) {\n      currentToken = tokens[i];\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--;\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n        continue;\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n      if (htmlLinkLevel > 0) { continue; }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n\n        text = currentToken.content;\n        links = state.md.linkify.match(text);\n\n        // Now split string to nodes\n        nodes = [];\n        level = currentToken.level;\n        lastPos = 0;\n\n        for (ln = 0; ln < links.length; ln++) {\n\n          url = links[ln].url;\n          fullUrl = state.md.normalizeLink(url);\n          if (!state.md.validateLink(fullUrl)) { continue; }\n\n          urlText = links[ln].text;\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n\n          pos = links[ln].index;\n\n          if (pos > lastPos) {\n            token         = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level   = level;\n            nodes.push(token);\n          }\n\n          token         = new state.Token('link_open', 'a', 1);\n          token.attrs   = [ [ 'href', fullUrl ] ];\n          token.level   = level++;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          token         = new state.Token('text', '', 0);\n          token.content = urlText;\n          token.level   = level;\n          nodes.push(token);\n\n          token         = new state.Token('link_close', 'a', -1);\n          token.level   = --level;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          lastPos = links[ln].lastIndex;\n        }\n        if (lastPos < text.length) {\n          token         = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level   = level;\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n};\n","// Simple typographyc replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// (p) (P) -> §\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n'use strict';\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - miltiplication 2 x 4 -> 2 × 4\n\nvar RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nvar SCOPED_ABBR_TEST_RE = /\\((c|tm|r|p)\\)/i;\n\nvar SCOPED_ABBR_RE = /\\((c|tm|r|p)\\)/ig;\nvar SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  p: '§',\n  tm: '™'\n};\n\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\n\nfunction replace_scoped(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\nfunction replace_rare(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n                    .replace(/\\+-/g, '±')\n                    // .., ..., ....... -> …\n                    // but ?..... & !..... -> ?.. & !..\n                    .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..')\n                    .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n                    // em-dash\n                    .replace(/(^|[^-])---([^-]|$)/mg, '$1\\u2014$2')\n                    // en-dash\n                    .replace(/(^|\\s)--(\\s|$)/mg, '$1\\u2013$2')\n                    .replace(/(^|[^-\\s])--([^-\\s]|$)/mg, '$1\\u2013$2');\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\n\nmodule.exports = function replace(state) {\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline') { continue; }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n\n  }\n};\n","// Convert straight quotation marks to typographic ones\n//\n'use strict';\n\n\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\nvar QUOTE_TEST_RE = /['\"]/;\nvar QUOTE_RE = /['\"]/g;\nvar APOSTROPHE = '\\u2019'; /* ’ */\n\n\nfunction replaceAt(str, index, ch) {\n  return str.substr(0, index) + ch + str.substr(index + 1);\n}\n\nfunction process_inlines(tokens, state) {\n  var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar,\n      isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace,\n      canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;\n\n  stack = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n\n    thisLevel = tokens[i].level;\n\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) { break; }\n    }\n    stack.length = j + 1;\n\n    if (token.type !== 'text') { continue; }\n\n    text = token.content;\n    pos = 0;\n    max = text.length;\n\n    /*eslint no-labels:0,block-scoped-var:0*/\n    OUTER:\n    while (pos < max) {\n      QUOTE_RE.lastIndex = pos;\n      t = QUOTE_RE.exec(text);\n      if (!t) { break; }\n\n      canOpen = canClose = true;\n      pos = t.index + 1;\n      isSingle = (t[0] === \"'\");\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      lastChar = 0x20;\n\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1);\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20\n          if (tokens[j].type !== 'text') continue;\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n          break;\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      nextChar = 0x20;\n\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos);\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20\n          if (tokens[j].type !== 'text') continue;\n\n          nextChar = tokens[j].content.charCodeAt(0);\n          break;\n        }\n      }\n\n      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n      isLastWhiteSpace = isWhiteSpace(lastChar);\n      isNextWhiteSpace = isWhiteSpace(nextChar);\n\n      if (isNextWhiteSpace) {\n        canOpen = false;\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false;\n        }\n      }\n\n      if (isLastWhiteSpace) {\n        canClose = false;\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false;\n        }\n      }\n\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false;\n        }\n      }\n\n      if (canOpen && canClose) {\n        // treat this as the middle of the word\n        canOpen = false;\n        canClose = isNextPunctChar;\n      }\n\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE);\n        }\n        continue;\n      }\n\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          item = stack[j];\n          if (stack[j].level < thisLevel) { break; }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j];\n\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2];\n              closeQuote = state.md.options.quotes[3];\n            } else {\n              openQuote = state.md.options.quotes[0];\n              closeQuote = state.md.options.quotes[1];\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote);\n            tokens[item.token].content = replaceAt(\n              tokens[item.token].content, item.pos, openQuote);\n\n            pos += closeQuote.length - 1;\n            if (item.token === i) { pos += openQuote.length - 1; }\n\n            text = token.content;\n            max = text.length;\n\n            stack.length = j;\n            continue OUTER;\n          }\n        }\n      }\n\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        });\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE);\n      }\n    }\n  }\n}\n\n\nmodule.exports = function smartquotes(state) {\n  /*eslint max-depth:0*/\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline' ||\n        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue;\n    }\n\n    process_inlines(state.tokens[blkIdx].children, state);\n  }\n};\n","// Token class\n\n'use strict';\n\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = '';\n\n  /**\n   * Token#info -> String\n   *\n   * fence infostring\n   **/\n  this.info     = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false;\n}\n\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  var attrs, i, len;\n\n  if (!this.attrs) { return -1; }\n\n  attrs = this.attrs;\n\n  for (i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i; }\n  }\n  return -1;\n};\n\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [ attrData ];\n  }\n};\n\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet(name, value) {\n  var idx = this.attrIndex(name),\n      attrData = [ name, value ];\n\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet(name) {\n  var idx = this.attrIndex(name), value = null;\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n  return value;\n};\n\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  var idx = this.attrIndex(name);\n\n  if (idx < 0) {\n    this.attrPush([ name, value ]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\n\nmodule.exports = Token;\n","// Core state object\n//\n'use strict';\n\nvar Token = require('../token');\n\n\nfunction StateCore(src, md, env) {\n  this.src = src;\n  this.env = env;\n  this.tokens = [];\n  this.inlineMode = false;\n  this.md = md; // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token;\n\n\nmodule.exports = StateCore;\n","/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n'use strict';\n\n\nvar Ruler  = require('./ruler');\n\n\nvar _rules = [\n  [ 'normalize',      require('./rules_core/normalize')      ],\n  [ 'block',          require('./rules_core/block')          ],\n  [ 'inline',         require('./rules_core/inline')         ],\n  [ 'linkify',        require('./rules_core/linkify')        ],\n  [ 'replacements',   require('./rules_core/replacements')   ],\n  [ 'smartquotes',    require('./rules_core/smartquotes')    ]\n];\n\n\n/**\n * new Core()\n **/\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n}\n\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  var i, l, rules;\n\n  rules = this.ruler.getRules('');\n\n  for (i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\n\nCore.prototype.State = require('./rules_core/state_core');\n\n\nmodule.exports = Core;\n","// GFM table, non-standard\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.blkIndent,\n      max = state.eMarks[line];\n\n  return state.src.substr(pos, max - pos);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      escapes = 0,\n      lastPos = 0,\n      backTicked = false,\n      lastBackTick = 0;\n\n  ch  = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x60/* ` */) {\n      if (backTicked) {\n        // make \\` close code sequence, but not open it;\n        // the reason is: `\\` is correct code block\n        backTicked = false;\n        lastBackTick = pos;\n      } else if (escapes % 2 === 0) {\n        backTicked = true;\n        lastBackTick = pos;\n      }\n    } else if (ch === 0x7c/* | */ && (escapes % 2 === 0) && !backTicked) {\n      result.push(str.substring(lastPos, pos));\n      lastPos = pos + 1;\n    }\n\n    if (ch === 0x5c/* \\ */) {\n      escapes++;\n    } else {\n      escapes = 0;\n    }\n\n    pos++;\n\n    // If there was an un-closed backtick, go back to just after\n    // the last backtick, but as if it was a normal character\n    if (pos === max && backTicked) {\n      backTicked = false;\n      pos = lastBackTick + 1;\n    }\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(str.substring(lastPos));\n\n  return result;\n}\n\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, nextLine, columns, columnCount, token,\n      aligns, t, tableLines, tbodyLines;\n\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false; }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  ch = state.src.charCodeAt(pos++);\n  if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */) { return false; }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n\n  columns = lineText.split('|');\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n  columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n\n  // header row will define an amount of columns in the entire table,\n  // and align row shouldn't be smaller than that (the rest of the rows can)\n  columnCount = columns.length;\n  if (columnCount > aligns.length) { return false; }\n\n  if (silent) { return true; }\n\n  token     = state.push('table_open', 'table', 1);\n  token.map = tableLines = [ startLine, 0 ];\n\n  token     = state.push('thead_open', 'thead', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  token     = state.push('tr_open', 'tr', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  for (i = 0; i < columns.length; i++) {\n    token          = state.push('th_open', 'th', 1);\n    token.map      = [ startLine, startLine + 1 ];\n    if (aligns[i]) {\n      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n    }\n\n    token          = state.push('inline', '', 0);\n    token.content  = columns[i].trim();\n    token.map      = [ startLine, startLine + 1 ];\n    token.children = [];\n\n    token          = state.push('th_close', 'th', -1);\n  }\n\n  token     = state.push('tr_close', 'tr', -1);\n  token     = state.push('thead_close', 'thead', -1);\n\n  token     = state.push('tbody_open', 'tbody', 1);\n  token.map = tbodyLines = [ startLine + 2, 0 ];\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    lineText = getLine(state, nextLine).trim();\n    if (lineText.indexOf('|') === -1) { break; }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\n    columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n\n    token = state.push('tr_open', 'tr', 1);\n    for (i = 0; i < columnCount; i++) {\n      token          = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n      }\n\n      token          = state.push('inline', '', 0);\n      token.content  = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n\n      token          = state.push('td_close', 'td', -1);\n    }\n    token = state.push('tr_close', 'tr', -1);\n  }\n  token = state.push('tbody_close', 'tbody', -1);\n  token = state.push('table_close', 'table', -1);\n\n  tableLines[1] = tbodyLines[1] = nextLine;\n  state.line = nextLine;\n  return true;\n};\n","// Code block (4 spaces padded)\n\n'use strict';\n\n\nmodule.exports = function code(state, startLine, endLine/*, silent*/) {\n  var nextLine, last, token;\n\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false; }\n\n  last = nextLine = startLine + 1;\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n    break;\n  }\n\n  state.line = last;\n\n  token         = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, true);\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// fences (``` lang, ~~~ lang)\n\n'use strict';\n\n\nmodule.exports = function fence(state, startLine, endLine, silent) {\n  var marker, len, params, nextLine, mem, token, markup,\n      haveEndMarker = false,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (pos + 3 > max) { return false; }\n\n  marker = state.src.charCodeAt(pos);\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false;\n  }\n\n  // scan marker length\n  mem = pos;\n  pos = state.skipChars(pos, marker);\n\n  len = pos - mem;\n\n  if (len < 3) { return false; }\n\n  markup = state.src.slice(mem, pos);\n  params = state.src.slice(pos, max);\n\n  if (params.indexOf(String.fromCharCode(marker)) >= 0) { return false; }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true; }\n\n  // search end of block\n  nextLine = startLine;\n\n  for (;;) {\n    nextLine++;\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue; }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n\n    pos = state.skipChars(pos, marker);\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue; }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos);\n\n    if (pos < max) { continue; }\n\n    haveEndMarker = true;\n    // found!\n    break;\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine];\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n\n  token         = state.push('fence', 'code', 0);\n  token.info    = params;\n  token.content = state.getLines(startLine + 1, nextLine, len, true);\n  token.markup  = markup;\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// Block quotes\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n  var adjustTab,\n      ch,\n      i,\n      initial,\n      l,\n      lastLineEmpty,\n      lines,\n      nextLine,\n      offset,\n      oldBMarks,\n      oldBSCount,\n      oldIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      spaceAfterMarker,\n      terminate,\n      terminatorRules,\n      token,\n      wasOutdented,\n      oldLineMax = state.lineMax,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true; }\n\n  // skip spaces after \">\" and re-calculate offset\n  initial = offset = state.sCount[startLine] + pos - (state.bMarks[startLine] + state.tShift[startLine]);\n\n  // skip one optional space after '>'\n  if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n    // ' >   test '\n    //     ^ -- position start of line here:\n    pos++;\n    initial++;\n    offset++;\n    adjustTab = false;\n    spaceAfterMarker = true;\n  } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n    spaceAfterMarker = true;\n\n    if ((state.bsCount[startLine] + offset) % 4 === 3) {\n      // '  >\\t  test '\n      //       ^ -- position start of line here (tab has width===1)\n      pos++;\n      initial++;\n      offset++;\n      adjustTab = false;\n    } else {\n      // ' >\\t  test '\n      //    ^ -- position start of line here + shift bsCount slightly\n      //         to make extra space appear\n      adjustTab = true;\n    }\n  } else {\n    spaceAfterMarker = false;\n  }\n\n  oldBMarks = [ state.bMarks[startLine] ];\n  state.bMarks[startLine] = pos;\n\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (isSpace(ch)) {\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;\n      } else {\n        offset++;\n      }\n    } else {\n      break;\n    }\n\n    pos++;\n  }\n\n  oldBSCount = [ state.bsCount[startLine] ];\n  state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n  lastLineEmpty = pos >= max;\n\n  oldSCount = [ state.sCount[startLine] ];\n  state.sCount[startLine] = offset - initial;\n\n  oldTShift = [ state.tShift[startLine] ];\n  state.tShift[startLine] = pos - state.bMarks[startLine];\n\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n  wasOutdented = false;\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    if (state.sCount[nextLine] < state.blkIndent) wasOutdented = true;\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !wasOutdented) {\n      // This line is inside the blockquote.\n\n      // skip spaces after \">\" and re-calculate offset\n      initial = offset = state.sCount[nextLine] + pos - (state.bMarks[nextLine] + state.tShift[nextLine]);\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++;\n        initial++;\n        offset++;\n        adjustTab = false;\n        spaceAfterMarker = true;\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true;\n\n        if ((state.bsCount[nextLine] + offset) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++;\n          initial++;\n          offset++;\n          adjustTab = false;\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true;\n        }\n      } else {\n        spaceAfterMarker = false;\n      }\n\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n\n        pos++;\n      }\n\n      lastLineEmpty = pos >= max;\n\n      oldBSCount.push(state.bsCount[nextLine]);\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n      oldSCount.push(state.sCount[nextLine]);\n      state.sCount[nextLine] = offset - initial;\n\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break; }\n\n    // Case 3: another tag found.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine;\n\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] -= state.blkIndent;\n      }\n\n      break;\n    }\n\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldBSCount.push(state.bsCount[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n    oldSCount.push(state.sCount[nextLine]);\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1;\n  }\n\n  oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n\n  token        = state.push('blockquote_open', 'blockquote', 1);\n  token.markup = '>';\n  token.map    = lines = [ startLine, 0 ];\n\n  state.md.block.tokenize(state, startLine, nextLine);\n\n  token        = state.push('blockquote_close', 'blockquote', -1);\n  token.markup = '>';\n\n  state.lineMax = oldLineMax;\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n    state.sCount[i + startLine] = oldSCount[i];\n    state.bsCount[i + startLine] = oldBSCount[i];\n  }\n  state.blkIndent = oldIndent;\n\n  return true;\n};\n","// Horizontal rule\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker, cnt, ch, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  cnt = 1;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) { return false; }\n    if (ch === marker) { cnt++; }\n  }\n\n  if (cnt < 3) { return false; }\n\n  if (silent) { return true; }\n\n  state.line = startLine + 1;\n\n  token        = state.push('hr', 'hr', 0);\n  token.map    = [ startLine, state.line ];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\n  return true;\n};\n","// Lists\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker(state, startLine) {\n  var marker, pos, max, ch;\n\n  pos = state.bMarks[startLine] + state.tShift[startLine];\n  max = state.eMarks[startLine];\n\n  marker = state.src.charCodeAt(pos++);\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1;\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1;\n    }\n  }\n\n  return pos;\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker(state, startLine) {\n  var ch,\n      start = state.bMarks[startLine] + state.tShift[startLine],\n      pos = start,\n      max = state.eMarks[startLine];\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1; }\n\n  ch = state.src.charCodeAt(pos++);\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1; }\n\n    ch = state.src.charCodeAt(pos++);\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1; }\n\n      continue;\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break;\n    }\n\n    return -1;\n  }\n\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\n\nfunction markTightParagraphs(state, idx) {\n  var i, l,\n      level = state.level + 2;\n\n  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true;\n      state.tokens[i].hidden = true;\n      i += 2;\n    }\n  }\n}\n\n\nmodule.exports = function list(state, startLine, endLine, silent) {\n  var ch,\n      contentStart,\n      i,\n      indent,\n      indentAfterMarker,\n      initial,\n      isOrdered,\n      itemLines,\n      l,\n      listLines,\n      listTokIdx,\n      markerCharCode,\n      markerValue,\n      max,\n      nextLine,\n      offset,\n      oldIndent,\n      oldLIndent,\n      oldParentType,\n      oldTShift,\n      oldTight,\n      pos,\n      posAfterMarker,\n      prevEmptyEnd,\n      start,\n      terminate,\n      terminatorRules,\n      token,\n      isTerminatingParagraph = false,\n      tight = true;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.tShift[startLine] >= state.blkIndent) {\n      isTerminatingParagraph = true;\n    }\n  }\n\n  // Detect list type and position after marker\n  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {\n    isOrdered = true;\n    start = state.bMarks[startLine] + state.tShift[startLine];\n    markerValue = Number(state.src.substr(start, posAfterMarker - start - 1));\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false;\n\n  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {\n    isOrdered = false;\n\n  } else {\n    return false;\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;\n  }\n\n  // We should terminate list on style change. Remember first one to compare.\n  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true; }\n\n  // Start list\n  listTokIdx = state.tokens.length;\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1);\n    if (markerValue !== 1) {\n      token.attrs = [ [ 'start', markerValue ] ];\n    }\n\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1);\n  }\n\n  token.map    = listLines = [ startLine, 0 ];\n  token.markup = String.fromCharCode(markerCharCode);\n\n  //\n  // Iterate list items\n  //\n\n  nextLine = startLine;\n  prevEmptyEnd = false;\n  terminatorRules = state.md.block.ruler.getRules('list');\n\n  oldParentType = state.parentType;\n  state.parentType = 'list';\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker;\n    max = state.eMarks[nextLine];\n\n    initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);\n\n    while (pos < max) {\n      ch = state.src.charCodeAt(pos);\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n      } else if (ch === 0x20) {\n        offset++;\n      } else {\n        break;\n      }\n\n      pos++;\n    }\n\n    contentStart = pos;\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1;\n    } else {\n      indentAfterMarker = offset - initial;\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1; }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    indent = initial + indentAfterMarker;\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1);\n    token.markup = String.fromCharCode(markerCharCode);\n    token.map    = itemLines = [ startLine, 0 ];\n\n    oldIndent = state.blkIndent;\n    oldTight = state.tight;\n    oldTShift = state.tShift[startLine];\n    oldLIndent = state.sCount[startLine];\n    state.blkIndent = indent;\n    state.tight = true;\n    state.tShift[startLine] = contentStart - state.bMarks[startLine];\n    state.sCount[startLine] = offset;\n\n    if (contentStart >= max && state.isEmpty(startLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine);\n    } else {\n      state.md.block.tokenize(state, startLine, endLine, true);\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false;\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - startLine) > 1 && state.isEmpty(state.line - 1);\n\n    state.blkIndent = oldIndent;\n    state.tShift[startLine] = oldTShift;\n    state.sCount[startLine] = oldLIndent;\n    state.tight = oldTight;\n\n    token        = state.push('list_item_close', 'li', -1);\n    token.markup = String.fromCharCode(markerCharCode);\n\n    nextLine = startLine = state.line;\n    itemLines[1] = nextLine;\n    contentStart = state.bMarks[startLine];\n\n    if (nextLine >= endLine) { break; }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    // fail if terminating block found\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1);\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1);\n  }\n  token.markup = String.fromCharCode(markerCharCode);\n\n  listLines[1] = nextLine;\n  state.line = nextLine;\n\n  state.parentType = oldParentType;\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx);\n  }\n\n  return true;\n};\n","'use strict';\n\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function reference(state, startLine, _endLine, silent) {\n  var ch,\n      destEndPos,\n      destEndLineNo,\n      endLine,\n      href,\n      i,\n      l,\n      label,\n      labelEnd,\n      oldParentType,\n      res,\n      start,\n      str,\n      terminate,\n      terminatorRules,\n      title,\n      lines = 0,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine],\n      nextLine = startLine + 1;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false; }\n\n  // Simple check to quickly interrupt scan on [link](url) at the start of line.\n  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54\n  while (++pos < max) {\n    if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&\n        state.src.charCodeAt(pos - 1) !== 0x5C/* \\ */) {\n      if (pos + 1 === max) { return false; }\n      if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false; }\n      break;\n    }\n  }\n\n  endLine = state.lineMax;\n\n  // jump line-by-line until empty one or EOF\n  terminatorRules = state.md.block.ruler.getRules('reference');\n\n  oldParentType = state.parentType;\n  state.parentType = 'reference';\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  max = str.length;\n\n  for (pos = 1; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x5B /* [ */) {\n      return false;\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos;\n      break;\n    } else if (ch === 0x0A /* \\n */) {\n      lines++;\n    } else if (ch === 0x5C /* \\ */) {\n      pos++;\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false; }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  res = state.md.helpers.parseLinkDestination(str, pos, max);\n  if (!res.ok) { return false; }\n\n  href = state.md.normalizeLink(res.str);\n  if (!state.md.validateLink(href)) { return false; }\n\n  pos = res.pos;\n  lines += res.lines;\n\n  // save cursor state, we could require to rollback later\n  destEndPos = pos;\n  destEndLineNo = lines;\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  start = pos;\n  for (; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  res = state.md.helpers.parseLinkTitle(str, pos, max);\n  if (pos < max && start !== pos && res.ok) {\n    title = res.str;\n    pos = res.pos;\n    lines += res.lines;\n  } else {\n    title = '';\n    pos = destEndPos;\n    lines = destEndLineNo;\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    ch = str.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n    pos++;\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = '';\n      pos = destEndPos;\n      lines = destEndLineNo;\n      while (pos < max) {\n        ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false;\n  }\n\n  label = normalizeReference(str.slice(1, labelEnd));\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false;\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /*istanbul ignore if*/\n  if (silent) { return true; }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {};\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title: title, href: href };\n  }\n\n  state.parentType = oldParentType;\n\n  state.line = startLine + lines + 1;\n  return true;\n};\n","// heading (#, ##, ...)\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch, level, tmp, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  ch  = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false; }\n\n  // count heading level\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false; }\n\n  if (silent) { return true; }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos);\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n\n  state.line = startLine + 1;\n\n  token        = state.push('heading_open', 'h' + String(level), 1);\n  token.markup = '########'.slice(0, level);\n  token.map    = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = state.src.slice(pos, max).trim();\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token        = state.push('heading_close', 'h' + String(level), -1);\n  token.markup = '########'.slice(0, level);\n\n  return true;\n};\n","// lheading (---, ===)\n\n'use strict';\n\n\nmodule.exports = function lheading(state, startLine, endLine/*, silent*/) {\n  var content, terminate, i, l, token, pos, max, level, marker,\n      nextLine = startLine + 1, oldParentType,\n      terminatorRules = state.md.block.ruler.getRules('paragraph');\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph'; // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos);\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker);\n          pos = state.skipSpaces(pos);\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2);\n            break;\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false;\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine + 1;\n\n  token          = state.push('heading_open', 'h' + String(level), 1);\n  token.markup   = String.fromCharCode(marker);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line - 1 ];\n  token.children = [];\n\n  token          = state.push('heading_close', 'h' + String(level), -1);\n  token.markup   = String.fromCharCode(marker);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// List of valid html blocks names, accorting to commonmark spec\n// http://jgm.github.io/CommonMark/spec.html#html-blocks\n\n'use strict';\n\n\nmodule.exports = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'meta',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'source',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n];\n","// Regexps to match html elements\n\n'use strict';\n\nvar attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\n\nvar unquoted      = '[^\"\\'=<>`\\\\x00-\\\\x20]+';\nvar single_quoted = \"'[^']*'\";\nvar double_quoted = '\"[^\"]*\"';\n\nvar attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';\n\nvar attribute   = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)';\n\nvar open_tag    = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>';\n\nvar close_tag   = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>';\nvar comment     = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';\nvar processing  = '<[?].*?[?]>';\nvar declaration = '<![A-Z]+\\\\s+[^>]*>';\nvar cdata       = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>';\n\nvar HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +\n                        '|' + processing + '|' + declaration + '|' + cdata + ')');\nvar HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');\n\nmodule.exports.HTML_TAG_RE = HTML_TAG_RE;\nmodule.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;\n","// HTML block\n\n'use strict';\n\n\nvar block_names = require('../common/html_blocks');\nvar HTML_OPEN_CLOSE_TAG_RE = require('../common/html_re').HTML_OPEN_CLOSE_TAG_RE;\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nvar HTML_SEQUENCES = [\n  [ /^<(script|pre|style)(?=(\\s|>|$))/i, /<\\/(script|pre|style)>/i, true ],\n  [ /^<!--/,        /-->/,   true ],\n  [ /^<\\?/,         /\\?>/,   true ],\n  [ /^<![A-Z]/,     />/,     true ],\n  [ /^<!\\[CDATA\\[/, /\\]\\]>/, true ],\n  [ new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true ],\n  [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false ]\n];\n\n\nmodule.exports = function html_block(state, startLine, endLine, silent) {\n  var i, nextLine, token, lineText,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (!state.md.options.html) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  lineText = state.src.slice(pos, max);\n\n  for (i = 0; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break; }\n  }\n\n  if (i === HTML_SEQUENCES.length) { return false; }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n\n  nextLine = startLine + 1;\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++; }\n        break;\n      }\n    }\n  }\n\n  state.line = nextLine;\n\n  token         = state.push('html_block', '', 0);\n  token.map     = [ startLine, nextLine ];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n\n  return true;\n};\n","// Paragraph\n\n'use strict';\n\n\nmodule.exports = function paragraph(state, startLine/*, endLine*/) {\n  var content, terminate, i, l, token, oldParentType,\n      nextLine = startLine + 1,\n      terminatorRules = state.md.block.ruler.getRules('paragraph'),\n      endLine = state.lineMax;\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph';\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine;\n\n  token          = state.push('paragraph_open', 'p', 1);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token          = state.push('paragraph_close', 'p', -1);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// Parser state class\n\n'use strict';\n\nvar Token = require('../token');\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction StateBlock(src, md, env, tokens) {\n  var ch, s, start, pos, len, indent, offset, indent_found;\n\n  this.src = src;\n\n  // link to parser instance\n  this.md     = md;\n\n  this.env = env;\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n\n  this.bMarks = [];  // line begin offsets for fast jumps\n  this.eMarks = [];  // line end offsets for fast jumps\n  this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = [];  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = [];\n\n  // block parser variables\n  this.blkIndent  = 0; // required block content indent\n                       // (for example, if we are in list)\n  this.line       = 0; // line index in src\n  this.lineMax    = 0; // lines count\n  this.tight      = false;  // loose/tight mode for lists\n  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root';\n\n  this.level = 0;\n\n  // renderer\n  this.result = '';\n\n  // Create caches\n  // Generate markers.\n  s = this.src;\n  indent_found = false;\n\n  for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {\n    ch = s.charCodeAt(pos);\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++;\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n        continue;\n      } else {\n        indent_found = true;\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++; }\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n      this.sCount.push(offset);\n      this.bsCount.push(0);\n\n      indent_found = false;\n      indent = 0;\n      offset = 0;\n      start = pos + 1;\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n  this.sCount.push(0);\n  this.bsCount.push(0);\n\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  var token = new Token(type, tag, nesting);\n  token.block = true;\n\n  if (nesting < 0) { this.level--; }\n  token.level = this.level;\n  if (nesting > 0) { this.level++; }\n\n  this.tokens.push(token);\n  return token;\n};\n\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (var max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n  return from;\n};\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  var ch;\n\n  for (var max = this.src.length; pos < max; pos++) {\n    ch = this.src.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n  }\n  return pos;\n};\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1; }\n  }\n  return pos;\n};\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (var max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break; }\n  }\n  return pos;\n};\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }\n  }\n  return pos;\n};\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  var i, lineIndent, ch, first, last, queue, lineStart,\n      line = begin;\n\n  if (begin >= end) {\n    return '';\n  }\n\n  queue = new Array(end - begin);\n\n  for (i = 0; line < end; line++, i++) {\n    lineIndent = 0;\n    lineStart = first = this.bMarks[line];\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n\n    while (first < last && lineIndent < indent) {\n      ch = this.src.charCodeAt(first);\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n        } else {\n          lineIndent++;\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++;\n      } else {\n        break;\n      }\n\n      first++;\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n    } else {\n      queue[i] = this.src.slice(first, last);\n    }\n  }\n\n  return queue.join('');\n};\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token;\n\n\nmodule.exports = StateBlock;\n","/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\nvar _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  [ 'table',      require('./rules_block/table'),      [ 'paragraph', 'reference' ] ],\n  [ 'code',       require('./rules_block/code') ],\n  [ 'fence',      require('./rules_block/fence'),      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'blockquote', require('./rules_block/blockquote'), [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'hr',         require('./rules_block/hr'),         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'list',       require('./rules_block/list'),       [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'reference',  require('./rules_block/reference') ],\n  [ 'heading',    require('./rules_block/heading'),    [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'lheading',   require('./rules_block/lheading') ],\n  [ 'html_block', require('./rules_block/html_block'), [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'paragraph',  require('./rules_block/paragraph') ]\n];\n\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock() {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });\n  }\n}\n\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      line = startLine,\n      hasEmptyLines = false,\n      maxNesting = state.md.options.maxNesting;\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n    if (line >= endLine) { break; }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break; }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine;\n      break;\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n\n    for (i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n      if (ok) { break; }\n    }\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines;\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n\n    line = state.line;\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++;\n      state.line = line;\n    }\n  }\n};\n\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  var state;\n\n  if (!src) { return; }\n\n  state = new this.State(src, md, env, outTokens);\n\n  this.tokenize(state, state.line, state.lineMax);\n};\n\n\nParserBlock.prototype.State = require('./rules_block/state_block');\n\n\nmodule.exports = ParserBlock;\n","// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n'use strict';\n\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos;\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n\n  if (pos === state.pos) { return false; }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos); }\n\n  state.pos = pos;\n\n  return true;\n};\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParcerInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n};*/\n","// Proceess '\\n'\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function newline(state, silent) {\n  var pmax, max, pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false; }\n\n  pmax = state.pending.length - 1;\n  max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        state.pending = state.pending.replace(/ +$/, '');\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }\n\n  state.pos = pos;\n  return true;\n};\n","// Process escaped chars and hardbreaks\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nvar ESCAPED = [];\n\nfor (var i = 0; i < 256; i++) { ESCAPED.push(0); }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });\n\n\nmodule.exports = function escape(state, silent) {\n  var ch, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) { return false; }\n\n  pos++;\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch < 256 && ESCAPED[ch] !== 0) {\n      if (!silent) { state.pending += state.src[pos]; }\n      state.pos += 2;\n      return true;\n    }\n\n    if (ch === 0x0A) {\n      if (!silent) {\n        state.push('hardbreak', 'br', 0);\n      }\n\n      pos++;\n      // skip leading whitespaces from next line\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n\n      state.pos = pos;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += '\\\\'; }\n  state.pos++;\n  return true;\n};\n","// Parse backticks\n\n'use strict';\n\nmodule.exports = function backtick(state, silent) {\n  var start, max, marker, matchStart, matchEnd, token,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60/* ` */) { return false; }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }\n\n  marker = state.src.slice(start, pos);\n\n  matchStart = matchEnd = pos;\n\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }\n\n    if (matchEnd - matchStart === marker.length) {\n      if (!silent) {\n        token         = state.push('code_inline', 'code', 0);\n        token.markup  = marker;\n        token.content = state.src.slice(pos, matchStart)\n                                 .replace(/[ \\n]+/g, ' ')\n                                 .trim();\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += marker; }\n  state.pos += marker.length;\n  return true;\n};\n","// ~~strike through~~\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function strikethrough(state, silent) {\n  var i, scanned, token, len, ch,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x7E/* ~ */) { return false; }\n\n  scanned = state.scanDelims(state.pos, true);\n  len = scanned.length;\n  ch = String.fromCharCode(marker);\n\n  if (len < 2) { return false; }\n\n  if (len % 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch;\n    len--;\n  }\n\n  for (i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch + ch;\n\n    state.delimiters.push({\n      marker: marker,\n      jump:   i,\n      token:  state.tokens.length - 1,\n      level:  state.level,\n      end:    -1,\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function strikethrough(state) {\n  var i, j,\n      startDelim,\n      endDelim,\n      token,\n      loneMarkers = [],\n      delimiters = state.delimiters,\n      max = state.delimiters.length;\n\n  for (i = 0; i < max; i++) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue;\n    }\n\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    token         = state.tokens[startDelim.token];\n    token.type    = 's_open';\n    token.tag     = 's';\n    token.nesting = 1;\n    token.markup  = '~~';\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = 's_close';\n    token.tag     = 's';\n    token.nesting = -1;\n    token.markup  = '~~';\n    token.content = '';\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n\n      loneMarkers.push(endDelim.token - 1);\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    i = loneMarkers.pop();\n    j = i + 1;\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++;\n    }\n\n    j--;\n\n    if (i !== j) {\n      token = state.tokens[j];\n      state.tokens[j] = state.tokens[i];\n      state.tokens[i] = token;\n    }\n  }\n};\n","// Process *this* and _that_\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function emphasis(state, silent) {\n  var i, scanned, token,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }\n\n  scanned = state.scanDelims(state.pos, marker === 0x2A);\n\n  for (i = 0; i < scanned.length; i++) {\n    token         = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker: marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // An amount of characters before this one that's equivalent to\n      // current one. In plain English: if this delimiter does not open\n      // an emphasis, neither do previous `jump` characters.\n      //\n      // Used to skip sequences like \"*****\" in one step, for 1st asterisk\n      // value will be 0, for 2nd it's 1 and so on.\n      //\n      jump:   i,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token:  state.tokens.length - 1,\n\n      // Token level.\n      //\n      level:  state.level,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end:    -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function emphasis(state) {\n  var i,\n      startDelim,\n      endDelim,\n      token,\n      ch,\n      isStrong,\n      delimiters = state.delimiters,\n      max = state.delimiters.length;\n\n  for (i = max - 1; i >= 0; i--) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               delimiters[startDelim.end + 1].token === endDelim.token + 1 &&\n               delimiters[i - 1].marker === startDelim.marker;\n\n    ch = String.fromCharCode(startDelim.marker);\n\n    token         = state.tokens[startDelim.token];\n    token.type    = isStrong ? 'strong_open' : 'em_open';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = 1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = isStrong ? 'strong_close' : 'em_close';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = -1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n};\n","// Process [link](<to> \"stuff\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function link(state, silent) {\n  var attrs,\n      code,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      res,\n      ref,\n      title,\n      token,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos,\n      parseReference = true;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 1;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false;\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n    pos++;\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    token        = state.push('link_open', 'a', 1);\n    token.attrs  = attrs = [ [ 'href', href ] ];\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n\n    state.md.inline.tokenize(state);\n\n    token        = state.push('link_close', 'a', -1);\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Process ![image](<src> \"title\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function image(state, silent) {\n  var attrs,\n      code,\n      content,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      ref,\n      res,\n      title,\n      token,\n      tokens,\n      start,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 2;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd);\n\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens = []\n    );\n\n    token          = state.push('image', 'img', 0);\n    token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];\n    token.children = tokens;\n    token.content  = content;\n\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Process autolinks '<protocol:...>'\n\n'use strict';\n\n\n/*eslint max-len:0*/\nvar EMAIL_RE    = /^<([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;\nvar AUTOLINK_RE = /^<([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)>/;\n\n\nmodule.exports = function autolink(state, silent) {\n  var tail, linkMatch, emailMatch, url, fullUrl, token,\n      pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  tail = state.src.slice(pos);\n\n  if (tail.indexOf('>') < 0) { return false; }\n\n  if (AUTOLINK_RE.test(tail)) {\n    linkMatch = tail.match(AUTOLINK_RE);\n\n    url = linkMatch[0].slice(1, -1);\n    fullUrl = state.md.normalizeLink(url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += linkMatch[0].length;\n    return true;\n  }\n\n  if (EMAIL_RE.test(tail)) {\n    emailMatch = tail.match(EMAIL_RE);\n\n    url = emailMatch[0].slice(1, -1);\n    fullUrl = state.md.normalizeLink('mailto:' + url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += emailMatch[0].length;\n    return true;\n  }\n\n  return false;\n};\n","// Process html tags\n\n'use strict';\n\n\nvar HTML_TAG_RE = require('../common/html_re').HTML_TAG_RE;\n\n\nfunction isLetter(ch) {\n  /*eslint no-bitwise:0*/\n  var lc = ch | 0x20; // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);\n}\n\n\nmodule.exports = function html_inline(state, silent) {\n  var ch, match, max, token,\n      pos = state.pos;\n\n  if (!state.md.options.html) { return false; }\n\n  // Check start\n  max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false;\n  }\n\n  // Quick fail on second char\n  ch = state.src.charCodeAt(pos + 1);\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false;\n  }\n\n  match = state.src.slice(pos).match(HTML_TAG_RE);\n  if (!match) { return false; }\n\n  if (!silent) {\n    token         = state.push('html_inline', '', 0);\n    token.content = state.src.slice(pos, pos + match[0].length);\n  }\n  state.pos += match[0].length;\n  return true;\n};\n","// Process html entity - &#123;, &#xAF;, &quot;, ...\n\n'use strict';\n\nvar entities          = require('../common/entities');\nvar has               = require('../common/utils').has;\nvar isValidEntityCode = require('../common/utils').isValidEntityCode;\nvar fromCodePoint     = require('../common/utils').fromCodePoint;\n\n\nvar DIGITAL_RE = /^&#((?:x[a-f0-9]{1,8}|[0-9]{1,8}));/i;\nvar NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;\n\n\nmodule.exports = function entity(state, silent) {\n  var ch, code, match, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x26/* & */) { return false; }\n\n  if (pos + 1 < max) {\n    ch = state.src.charCodeAt(pos + 1);\n\n    if (ch === 0x23 /* # */) {\n      match = state.src.slice(pos).match(DIGITAL_RE);\n      if (match) {\n        if (!silent) {\n          code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n          state.pending += isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n        }\n        state.pos += match[0].length;\n        return true;\n      }\n    } else {\n      match = state.src.slice(pos).match(NAMED_RE);\n      if (match) {\n        if (has(entities, match[1])) {\n          if (!silent) { state.pending += entities[match[1]]; }\n          state.pos += match[0].length;\n          return true;\n        }\n      }\n    }\n  }\n\n  if (!silent) { state.pending += '&'; }\n  state.pos++;\n  return true;\n};\n","// For each opening emphasis-like marker find a matching closing one\n//\n'use strict';\n\n\nmodule.exports = function link_pairs(state) {\n  var i, j, lastDelim, currDelim,\n      delimiters = state.delimiters,\n      max = state.delimiters.length;\n\n  for (i = 0; i < max; i++) {\n    lastDelim = delimiters[i];\n\n    if (!lastDelim.close) { continue; }\n\n    j = i - lastDelim.jump - 1;\n\n    while (j >= 0) {\n      currDelim = delimiters[j];\n\n      if (currDelim.open &&\n          currDelim.marker === lastDelim.marker &&\n          currDelim.end < 0 &&\n          currDelim.level === lastDelim.level) {\n\n        // typeofs are for backward compatibility with plugins\n        var odd_match = (currDelim.close || lastDelim.open) &&\n                        typeof currDelim.length !== 'undefined' &&\n                        typeof lastDelim.length !== 'undefined' &&\n                        (currDelim.length + lastDelim.length) % 3 === 0;\n\n        if (!odd_match) {\n          lastDelim.jump = i - j;\n          lastDelim.open = false;\n          currDelim.end  = i;\n          currDelim.jump = 0;\n          break;\n        }\n      }\n\n      j -= currDelim.jump + 1;\n    }\n  }\n};\n","// Merge adjacent text nodes into one, and re-calculate all token levels\n//\n'use strict';\n\n\nmodule.exports = function text_collapse(state) {\n  var curr, last,\n      level = 0,\n      tokens = state.tokens,\n      max = state.tokens.length;\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels\n    level += tokens[curr].nesting;\n    tokens[curr].level = level;\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr]; }\n\n      last++;\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last;\n  }\n};\n","// Inline parser state\n\n'use strict';\n\n\nvar Token          = require('../token');\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  this.cache = {};        // Stores { start: end } pairs. Useful for backtrack\n                          // optimization of pairs parse (emphasis, strikes).\n\n  this.delimiters = [];   // Emphasis-like delimiters\n}\n\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  var token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n\n  var token = new Token(type, tag, nesting);\n\n  if (nesting < 0) { this.level--; }\n  token.level = this.level;\n  if (nesting > 0) { this.level++; }\n\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  return token;\n};\n\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  var pos = start, lastChar, nextChar, count, can_open, can_close,\n      isLastWhiteSpace, isLastPunctChar,\n      isNextWhiteSpace, isNextPunctChar,\n      left_flanking = true,\n      right_flanking = true,\n      max = this.posMax,\n      marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }\n\n  count = pos - start;\n\n  // treat end of the line as a whitespace\n  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n\n  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n  isLastWhiteSpace = isWhiteSpace(lastChar);\n  isNextWhiteSpace = isWhiteSpace(nextChar);\n\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n\n  if (!canSplitWord) {\n    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking  || isNextPunctChar);\n  } else {\n    can_open  = left_flanking;\n    can_close = right_flanking;\n  }\n\n  return {\n    can_open:  can_open,\n    can_close: can_close,\n    length:    count\n  };\n};\n\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n\nmodule.exports = StateInline;\n","/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Parser rules\n\nvar _rules = [\n  [ 'text',            require('./rules_inline/text') ],\n  [ 'newline',         require('./rules_inline/newline') ],\n  [ 'escape',          require('./rules_inline/escape') ],\n  [ 'backticks',       require('./rules_inline/backticks') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').tokenize ],\n  [ 'emphasis',        require('./rules_inline/emphasis').tokenize ],\n  [ 'link',            require('./rules_inline/link') ],\n  [ 'image',           require('./rules_inline/image') ],\n  [ 'autolink',        require('./rules_inline/autolink') ],\n  [ 'html_inline',     require('./rules_inline/html_inline') ],\n  [ 'entity',          require('./rules_inline/entity') ]\n];\n\nvar _rules2 = [\n  [ 'balance_pairs',   require('./rules_inline/balance_pairs') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').postProcess ],\n  [ 'emphasis',        require('./rules_inline/emphasis').postProcess ],\n  [ 'text_collapse',   require('./rules_inline/text_collapse') ]\n];\n\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline() {\n  var i;\n\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler();\n\n  for (i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n  }\n}\n\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  var ok, i, pos = state.pos,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      maxNesting = state.md.options.maxNesting,\n      cache = state.cache;\n\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos];\n    return;\n  }\n\n  if (state.level < maxNesting) {\n    for (i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++;\n      ok = rules[i](state, true);\n      state.level--;\n\n      if (ok) { break; }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax;\n  }\n\n  if (!ok) { state.pos++; }\n  cache[pos] = state.pos;\n};\n\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      end = state.posMax,\n      maxNesting = state.md.options.maxNesting;\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n\n    if (state.level < maxNesting) {\n      for (i = 0; i < len; i++) {\n        ok = rules[i](state, false);\n        if (ok) { break; }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break; }\n      continue;\n    }\n\n    state.pending += state.src[state.pos++];\n  }\n\n  if (state.pending) {\n    state.pushPending();\n  }\n};\n\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  var i, rules, len;\n  var state = new this.State(str, md, env, outTokens);\n\n  this.tokenize(state);\n\n  rules = this.ruler2.getRules('');\n  len = rules.length;\n\n  for (i = 0; i < len; i++) {\n    rules[i](state);\n  }\n};\n\n\nParserInline.prototype.State = require('./rules_inline/state_inline');\n\n\nmodule.exports = ParserInline;\n","'use strict';\n\n\nmodule.exports = function (opts) {\n  var re = {};\n\n  // Use direct extract instead of `regenerate` to reduse browserified size\n  re.src_Any = require('uc.micro/properties/Any/regex').source;\n  re.src_Cc  = require('uc.micro/categories/Cc/regex').source;\n  re.src_Z   = require('uc.micro/categories/Z/regex').source;\n  re.src_P   = require('uc.micro/categories/P/regex').source;\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [ re.src_Z, re.src_P, re.src_Cc ].join('|');\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [ re.src_Z, re.src_Cc ].join('|');\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  var text_separators = '[><\\uff5c]';\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter       = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  ////////////////////////////////////////////////////////////////////////////////\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth    = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')(?!-|_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-]).|' +  // allow `I'm_king` if no pair found\n          '\\\\.{2,3}[a-zA-Z0-9%/]|' + // github has ... in commit range links. Restrict to\n                                     // - english\n                                     // - percent-encoded\n                                     // - parts of file path\n                                     // until more examples found.\n          '\\\\.(?!' + re.src_ZCc + '|[.]).|' +\n          (opts && opts['---'] ?\n            '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            :\n            '\\\\-+|'\n          ) +\n          '\\\\,(?!' + re.src_ZCc + ').|' +      // allow `,,,` in paths\n          '\\\\!(?!' + re.src_ZCc + '|[!]).|' +\n          '\\\\?(?!' + re.src_ZCc + '|[?]).' +\n        ')+' +\n      '|\\\\/' +\n    ')?';\n\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]+';\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}';\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')';\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')';\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/*_root*/ + ')' +\n    ')';\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')';\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator;\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator;\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Main rules\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\\\\(|' + re.src_ZCc + ')(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n\n  return re;\n};\n","'use strict';\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Helpers\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\nfunction isString(obj) { return _class(obj) === '[object String]'; }\nfunction isObject(obj) { return _class(obj) === '[object Object]'; }\nfunction isRegExp(obj) { return _class(obj) === '[object RegExp]'; }\nfunction isFunction(obj) { return _class(obj) === '[object Function]'; }\n\n\nfunction escapeRE(str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&'); }\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\n\nfunction isOptionsObj(obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    return acc || defaultOptions.hasOwnProperty(k);\n  }, false);\n}\n\n\nvar defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http =  new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        );\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'https:':  'http:',\n  'ftp:':    'http:',\n  '//':      {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http =  new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        );\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0; }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0; }\n        return tail.match(self.re.no_http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto =  new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        );\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length;\n      }\n      return 0;\n    }\n  }\n};\n\n/*eslint-disable max-len*/\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\nvar tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nvar tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n\n/*eslint-enable max-len*/\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction resetScanCache(self) {\n  self.__index__ = -1;\n  self.__text_cache__   = '';\n}\n\nfunction createValidator(re) {\n  return function (text, pos) {\n    var tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length;\n    }\n    return 0;\n  };\n}\n\nfunction createNormalizer() {\n  return function (match, self) {\n    self.normalize(match);\n  };\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile(self) {\n\n  // Load & clone RE patterns.\n  var re = self.re = require('./lib/re')(self.__opts__);\n\n  // Define dynamic patterns\n  var tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n\n  re.src_tlds = tlds.join('|');\n\n  function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }\n\n  re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  var aliases = [];\n\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError(name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    var val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) { return; }\n\n    var compiled = { validate: null, link: null };\n\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return;\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return;\n    }\n\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return;\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\n\n  //\n  // Build schema condition\n  //\n  var slist = Object.keys(self.__compiled__)\n                      .filter(function (name) {\n                        // Filter disabled & fake schemas\n                        return name.length > 0 && self.__compiled__[name];\n                      })\n                      .map(escapeRE)\n                      .join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test   = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  );\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match(self, shift) {\n  var start = self.__index__,\n      end   = self.__last_index__,\n      text  = self.__text_cache__.slice(start, end);\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema    = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index     = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw       = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text      = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url       = text;\n}\n\nfunction createMatch(self, shift) {\n  var match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match;\n}\n\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt(schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options);\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__           = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__          = -1;\n  this.__last_index__     = -1; // Next scan position\n  this.__schema__         = '';\n  this.__text_cache__     = '';\n\n  this.__schemas__        = assign({}, defaultSchemas, schemas);\n  this.__compiled__       = {};\n\n  this.__tlds__           = tlds_default;\n  this.__tlds_replaced__  = false;\n\n  this.re = {};\n\n  compile(this);\n}\n\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add(schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this;\n};\n\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set(options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this;\n};\n\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__      = -1;\n\n  if (!text.length) { return false; }\n\n  var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__     = m[2];\n        this.__index__      = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break;\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__     = '';\n            this.__index__      = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n\n        shift = me.index + me[1].length;\n        next  = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__     = 'mailto:';\n          this.__index__      = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0;\n};\n\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest(text) {\n  return this.re.pretest.test(text);\n};\n\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0;\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match(text) {\n  var shift = 0, result = [];\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  var tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  return null;\n};\n\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n  list = Array.isArray(list) ? list : [ list ];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this;\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n                                  .sort()\n                                  .filter(function (el, idx, arr) {\n                                    return el !== arr[idx - 1];\n                                  })\n                                  .reverse();\n\n  compile(this);\n  return this;\n};\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize(match) {\n\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url; }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile() {\n};\n\n\nmodule.exports = LinkifyIt;\n","/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","// markdown-it default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   100            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {},\n    block: {},\n    inline: {}\n  }\n};\n","// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'text_collapse'\n      ]\n    }\n  }\n};\n","// Commonmark default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         true,         // Enable HTML tags in source\n    xhtmlOut:     true,         // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'text_collapse'\n      ]\n    }\n  }\n};\n","// Main parser class\n\n'use strict';\n\n\nvar utils        = require('./common/utils');\nvar helpers      = require('./helpers');\nvar Renderer     = require('./renderer');\nvar ParserCore   = require('./parser_core');\nvar ParserBlock  = require('./parser_block');\nvar ParserInline = require('./parser_inline');\nvar LinkifyIt    = require('linkify-it');\nvar mdurl        = require('mdurl');\nvar punycode     = require('punycode');\n\n\nvar config = {\n  'default': require('./presets/default'),\n  zero: require('./presets/zero'),\n  commonmark: require('./presets/commonmark')\n};\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nvar BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nvar GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n\nfunction validateLink(url) {\n  // url should be normalized at this point, and existing entities are decoded\n  var str = url.trim().toLowerCase();\n\n  return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];\n\nfunction normalizeLink(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed));\n}\n\nfunction normalizeLinkText(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.decode(mdurl.format(parsed));\n}\n\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(lang, str, true).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre class=\"hljs\"><code>' +\n *                hljs.highlight(lang, str, true).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt(presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options);\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {};\n      presetName = 'default';\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline();\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock();\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore();\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\n   **/\n  this.renderer = new Renderer();\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt();\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink;\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink;\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText;\n\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).\n   **/\n  this.utils = utils;\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers);\n\n\n  this.options = {};\n  this.configure(presetName);\n\n  if (options) { this.set(options); }\n}\n\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options);\n  return this;\n};\n\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you with - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  var self = this, presetName;\n\n  if (utils.isString(presets)) {\n    presetName = presets;\n    presets = config[presetName];\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name'); }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty'); }\n\n  if (presets.options) { self.set(presets.options); }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules);\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\n      }\n    });\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.enable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n  }\n\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.disable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));\n  plugin.apply(plugin, args);\n  return this;\n};\n\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and returns list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String');\n  }\n\n  var state = new this.core.State(src, this, env);\n\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parse(src, env), this.options, env);\n};\n\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  var state = new this.core.State(src, this, env);\n\n  state.inlineMode = true;\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\n\n\nmodule.exports = MarkdownIt;\n","'use strict';\n\n\nmodule.exports = require('./lib/');\n","import markdownit from \"markdown-it\"\nimport {schema} from \"./schema\"\nimport {Mark} from \"prosemirror-model\"\n\nfunction maybeMerge(a, b) {\n  if (a.isText && b.isText && Mark.sameSet(a.marks, b.marks))\n    return a.copy(a.text + b.text)\n}\n\n// Object used to track the context of a running parse.\nclass MarkdownParseState {\n  constructor(schema, tokenHandlers) {\n    this.schema = schema\n    this.stack = [{type: schema.topNodeType, content: []}]\n    this.marks = Mark.none\n    this.tokenHandlers = tokenHandlers\n  }\n\n  top() {\n    return this.stack[this.stack.length - 1]\n  }\n\n  push(elt) {\n    if (this.stack.length) this.top().content.push(elt)\n  }\n\n  // : (string)\n  // Adds the given text to the current position in the document,\n  // using the current marks as styling.\n  addText(text) {\n    if (!text) return\n    let nodes = this.top().content, last = nodes[nodes.length - 1]\n    let node = this.schema.text(text, this.marks), merged\n    if (last && (merged = maybeMerge(last, node))) nodes[nodes.length - 1] = merged\n    else nodes.push(node)\n  }\n\n  // : (Mark)\n  // Adds the given mark to the set of active marks.\n  openMark(mark) {\n    this.marks = mark.addToSet(this.marks)\n  }\n\n  // : (Mark)\n  // Removes the given mark from the set of active marks.\n  closeMark(mark) {\n    this.marks = mark.removeFromSet(this.marks)\n  }\n\n  parseTokens(toks) {\n    for (let i = 0; i < toks.length; i++) {\n      let tok = toks[i]\n      let handler = this.tokenHandlers[tok.type]\n      if (!handler)\n        throw new Error(\"Token type `\" + tok.type + \"` not supported by Markdown parser\")\n      handler(this, tok)\n    }\n  }\n\n  // : (NodeType, ?Object, ?[Node]) → ?Node\n  // Add a node at the current position.\n  addNode(type, attrs, content) {\n    let node = type.createAndFill(attrs, content, this.marks)\n    if (!node) return null\n    this.push(node)\n    return node\n  }\n\n  // : (NodeType, ?Object)\n  // Wrap subsequent content in a node of the given type.\n  openNode(type, attrs) {\n    this.stack.push({type: type, attrs: attrs, content: []})\n  }\n\n  // : () → ?Node\n  // Close and return the node that is currently on top of the stack.\n  closeNode() {\n    if (this.marks.length) this.marks = Mark.none\n    let info = this.stack.pop()\n    return this.addNode(info.type, info.attrs, info.content)\n  }\n}\n\nfunction attrs(spec, token) {\n  if (spec.getAttrs) return spec.getAttrs(token)\n  // For backwards compatibility when `attrs` is a Function\n  else if (spec.attrs instanceof Function) return spec.attrs(token)\n  else return spec.attrs\n}\n\n// Code content is represented as a single token with a `content`\n// property in Markdown-it.\nfunction noOpenClose(type) {\n  return type == \"code_inline\" || type == \"code_block\" || type == \"fence\"\n}\n\nfunction withoutTrailingNewline(str) {\n  return str[str.length - 1] == \"\\n\" ? str.slice(0, str.length - 1) : str\n}\n\nfunction noOp() {}\n\nfunction tokenHandlers(schema, tokens) {\n  let handlers = Object.create(null)\n  for (let type in tokens) {\n    let spec = tokens[type]\n    if (spec.block) {\n      let nodeType = schema.nodeType(spec.block)\n      if (noOpenClose(type)) {\n        handlers[type] = (state, tok) => {\n          state.openNode(nodeType, attrs(spec, tok))\n          state.addText(withoutTrailingNewline(tok.content))\n          state.closeNode()\n        }\n      } else {\n        handlers[type + \"_open\"] = (state, tok) => state.openNode(nodeType, attrs(spec, tok))\n        handlers[type + \"_close\"] = state => state.closeNode()\n      }\n    } else if (spec.node) {\n      let nodeType = schema.nodeType(spec.node)\n      handlers[type] = (state, tok) => state.addNode(nodeType, attrs(spec, tok))\n    } else if (spec.mark) {\n      let markType = schema.marks[spec.mark]\n      if (noOpenClose(type)) {\n        handlers[type] = (state, tok) => {\n          state.openMark(markType.create(attrs(spec, tok)))\n          state.addText(withoutTrailingNewline(tok.content))\n          state.closeMark(markType)\n        }\n      } else {\n        handlers[type + \"_open\"] = (state, tok) => state.openMark(markType.create(attrs(spec, tok)))\n        handlers[type + \"_close\"] = state => state.closeMark(markType)\n      }\n    } else if (spec.ignore) {\n      if (noOpenClose(type)) {\n        handlers[type] = noOp\n      } else {\n        handlers[type + '_open'] = noOp\n        handlers[type + '_close'] = noOp\n      }\n    } else {\n      throw new RangeError(\"Unrecognized parsing spec \" + JSON.stringify(spec))\n    }\n  }\n\n  handlers.text = (state, tok) => state.addText(tok.content)\n  handlers.inline = (state, tok) => state.parseTokens(tok.children)\n  handlers.softbreak = handlers.softbreak || (state => state.addText(\"\\n\"))\n\n  return handlers\n}\n\n// ::- A configuration of a Markdown parser. Such a parser uses\n// [markdown-it](https://github.com/markdown-it/markdown-it) to\n// tokenize a file, and then runs the custom rules it is given over\n// the tokens to create a ProseMirror document tree.\nexport class MarkdownParser {\n  // :: (Schema, MarkdownIt, Object)\n  // Create a parser with the given configuration. You can configure\n  // the markdown-it parser to parse the dialect you want, and provide\n  // a description of the ProseMirror entities those tokens map to in\n  // the `tokens` object, which maps token names to descriptions of\n  // what to do with them. Such a description is an object, and may\n  // have the following properties:\n  //\n  // **`node`**`: ?string`\n  //   : This token maps to a single node, whose type can be looked up\n  //     in the schema under the given name. Exactly one of `node`,\n  //     `block`, or `mark` must be set.\n  //\n  // **`block`**`: ?string`\n  //   : This token comes in `_open` and `_close` variants (which are\n  //     appended to the base token name provides a the object\n  //     property), and wraps a block of content. The block should be\n  //     wrapped in a node of the type named to by the property's\n  //     value.\n  //\n  // **`mark`**`: ?string`\n  //   : This token also comes in `_open` and `_close` variants, but\n  //     should add a mark (named by the value) to its content, rather\n  //     than wrapping it in a node.\n  //\n  // **`attrs`**`: ?Object`\n  //   : Attributes for the node or mark. When `getAttrs` is provided,\n  //     it takes precedence.\n  //\n  // **`getAttrs`**`: ?(MarkdownToken) → Object`\n  //   : A function used to compute the attributes for the node or mark\n  //     that takes a [markdown-it\n  //     token](https://markdown-it.github.io/markdown-it/#Token) and\n  //     returns an attribute object.\n  //\n  // **`ignore`**`: ?bool`\n  //   : When true, ignore content for the matched token.\n  constructor(schema, tokenizer, tokens) {\n    // :: Object The value of the `tokens` object used to construct\n    // this parser. Can be useful to copy and modify to base other\n    // parsers on.\n    this.tokens = tokens\n    this.schema = schema\n    this.tokenizer = tokenizer\n    this.tokenHandlers = tokenHandlers(schema, tokens)\n  }\n\n  // :: (string) → Node\n  // Parse a string as [CommonMark](http://commonmark.org/) markup,\n  // and create a ProseMirror document as prescribed by this parser's\n  // rules.\n  parse(text) {\n    let state = new MarkdownParseState(this.schema, this.tokenHandlers), doc\n    state.parseTokens(this.tokenizer.parse(text, {}))\n    do { doc = state.closeNode() } while (state.stack.length)\n    return doc\n  }\n}\n\n// :: MarkdownParser\n// A parser parsing unextended [CommonMark](http://commonmark.org/),\n// without inline HTML, and producing a document in the basic schema.\nexport const defaultMarkdownParser = new MarkdownParser(schema, markdownit(\"commonmark\", {html: false}), {\n  blockquote: {block: \"blockquote\"},\n  paragraph: {block: \"paragraph\"},\n  list_item: {block: \"list_item\"},\n  bullet_list: {block: \"bullet_list\"},\n  ordered_list: {block: \"ordered_list\", getAttrs: tok => ({order: +tok.attrGet(\"order\") || 1})},\n  heading: {block: \"heading\", getAttrs: tok => ({level: +tok.tag.slice(1)})},\n  code_block: {block: \"code_block\"},\n  fence: {block: \"code_block\", getAttrs: tok => ({params: tok.info || \"\"})},\n  hr: {node: \"horizontal_rule\"},\n  image: {node: \"image\", getAttrs: tok => ({\n    src: tok.attrGet(\"src\"),\n    title: tok.attrGet(\"title\") || null,\n    alt: tok.children[0] && tok.children[0].content || null\n  })},\n  hardbreak: {node: \"hard_break\"},\n\n  em: {mark: \"em\"},\n  strong: {mark: \"strong\"},\n  link: {mark: \"link\", getAttrs: tok => ({\n    href: tok.attrGet(\"href\"),\n    title: tok.attrGet(\"title\") || null\n  })},\n  code_inline: {mark: \"code\"}\n})\n","// ::- A specification for serializing a ProseMirror document as\n// Markdown/CommonMark text.\nexport class MarkdownSerializer {\n  // :: (Object<(state: MarkdownSerializerState, node: Node, parent: Node, index: number)>, Object)\n  // Construct a serializer with the given configuration. The `nodes`\n  // object should map node names in a given schema to function that\n  // take a serializer state and such a node, and serialize the node.\n  //\n  // The `marks` object should hold objects with `open` and `close`\n  // properties, which hold the strings that should appear before and\n  // after a piece of text marked that way, either directly or as a\n  // function that takes a serializer state and a mark, and returns a\n  // string.\n  //\n  // Mark information objects can also have a `mixable` property\n  // which, when `true`, indicates that the order in which the mark's\n  // opening and closing syntax appears relative to other mixable\n  // marks can be varied. (For example, you can say `**a *b***` and\n  // `*a **b***`, but not `` `a *b*` ``.)\n  //\n  // To disable character escaping in a mark, you can give it an\n  // `escape` property of `false`. Such a mark has to have the highest\n  // precedence (must always be the innermost mark).\n  //\n  // The `expelEnclosingWhitespace` mark property causes the\n  // serializer to move enclosing whitespace from inside the marks to\n  // outside the marks. This is necessary for emphasis marks as\n  // CommonMark does not permit enclosing whitespace inside emphasis\n  // marks, see: http://spec.commonmark.org/0.26/#example-330\n  constructor(nodes, marks) {\n    // :: Object<(MarkdownSerializerState, Node)> The node serializer\n    // functions for this serializer.\n    this.nodes = nodes\n    // :: Object The mark serializer info.\n    this.marks = marks\n  }\n\n  // :: (Node, ?Object) → string\n  // Serialize the content of the given node to\n  // [CommonMark](http://commonmark.org/).\n  serialize(content, options) {\n    let state = new MarkdownSerializerState(this.nodes, this.marks, options)\n    state.renderContent(content)\n    return state.out\n  }\n}\n\n// :: MarkdownSerializer\n// A serializer for the [basic schema](#schema).\nexport const defaultMarkdownSerializer = new MarkdownSerializer({\n  blockquote(state, node) {\n    state.wrapBlock(\"> \", null, node, () => state.renderContent(node))\n  },\n  code_block(state, node) {\n    state.write(\"```\" + (node.attrs.params || \"\") + \"\\n\")\n    state.text(node.textContent, false)\n    state.ensureNewLine()\n    state.write(\"```\")\n    state.closeBlock(node)\n  },\n  heading(state, node) {\n    state.write(state.repeat(\"#\", node.attrs.level) + \" \")\n    state.renderInline(node)\n    state.closeBlock(node)\n  },\n  horizontal_rule(state, node) {\n    state.write(node.attrs.markup || \"---\")\n    state.closeBlock(node)\n  },\n  bullet_list(state, node) {\n    state.renderList(node, \"  \", () => (node.attrs.bullet || \"*\") + \" \")\n  },\n  ordered_list(state, node) {\n    let start = node.attrs.order || 1\n    let maxW = String(start + node.childCount - 1).length\n    let space = state.repeat(\" \", maxW + 2)\n    state.renderList(node, space, i => {\n      let nStr = String(start + i)\n      return state.repeat(\" \", maxW - nStr.length) + nStr + \". \"\n    })\n  },\n  list_item(state, node) {\n    state.renderContent(node)\n  },\n  paragraph(state, node) {\n    state.renderInline(node)\n    state.closeBlock(node)\n  },\n\n  image(state, node) {\n    state.write(\"![\" + state.esc(node.attrs.alt || \"\") + \"](\" + state.esc(node.attrs.src) +\n                (node.attrs.title ? \" \" + state.quote(node.attrs.title) : \"\") + \")\")\n  },\n  hard_break(state, node, parent, index) {\n    for (let i = index + 1; i < parent.childCount; i++)\n      if (parent.child(i).type != node.type) {\n        state.write(\"\\\\\\n\")\n        return\n      }\n  },\n  text(state, node) {\n    state.text(node.text)\n  }\n}, {\n  em: {open: \"*\", close: \"*\", mixable: true, expelEnclosingWhitespace: true},\n  strong: {open: \"**\", close: \"**\", mixable: true, expelEnclosingWhitespace: true},\n  link: {\n    open: \"[\",\n    close(state, mark) {\n      return \"](\" + state.esc(mark.attrs.href) + (mark.attrs.title ? \" \" + state.quote(mark.attrs.title) : \"\") + \")\"\n    }\n  },\n  code: {open: \"`\", close: \"`\", escape: false}\n})\n\n// ::- This is an object used to track state and expose\n// methods related to markdown serialization. Instances are passed to\n// node and mark serialization methods (see `toMarkdown`).\nexport class MarkdownSerializerState {\n  constructor(nodes, marks, options) {\n    this.nodes = nodes\n    this.marks = marks\n    this.delim = this.out = \"\"\n    this.closed = false\n    this.inTightList = false\n    // :: Object\n    // The options passed to the serializer.\n    //   tightLists:: ?bool\n    //   Whether to render lists in a tight style. This can be overridden\n    //   on a node level by specifying a tight attribute on the node.\n    //   Defaults to false.\n    this.options = options || {}\n    if (typeof this.options.tightLists == \"undefined\")\n      this.options.tightLists = false\n  }\n\n  flushClose(size) {\n    if (this.closed) {\n      if (!this.atBlank()) this.out += \"\\n\"\n      if (size == null) size = 2\n      if (size > 1) {\n        let delimMin = this.delim\n        let trim = /\\s+$/.exec(delimMin)\n        if (trim) delimMin = delimMin.slice(0, delimMin.length - trim[0].length)\n        for (let i = 1; i < size; i++)\n          this.out += delimMin + \"\\n\"\n      }\n      this.closed = false\n    }\n  }\n\n  // :: (string, ?string, Node, ())\n  // Render a block, prefixing each line with `delim`, and the first\n  // line in `firstDelim`. `node` should be the node that is closed at\n  // the end of the block, and `f` is a function that renders the\n  // content of the block.\n  wrapBlock(delim, firstDelim, node, f) {\n    let old = this.delim\n    this.write(firstDelim || delim)\n    this.delim += delim\n    f()\n    this.delim = old\n    this.closeBlock(node)\n  }\n\n  atBlank() {\n    return /(^|\\n)$/.test(this.out)\n  }\n\n  // :: ()\n  // Ensure the current content ends with a newline.\n  ensureNewLine() {\n    if (!this.atBlank()) this.out += \"\\n\"\n  }\n\n  // :: (?string)\n  // Prepare the state for writing output (closing closed paragraphs,\n  // adding delimiters, and so on), and then optionally add content\n  // (unescaped) to the output.\n  write(content) {\n    this.flushClose()\n    if (this.delim && this.atBlank())\n      this.out += this.delim\n    if (content) this.out += content\n  }\n\n  // :: (Node)\n  // Close the block for the given node.\n  closeBlock(node) {\n    this.closed = node\n  }\n\n  // :: (string, ?bool)\n  // Add the given text to the document. When escape is not `false`,\n  // it will be escaped.\n  text(text, escape) {\n    let lines = text.split(\"\\n\")\n    for (let i = 0; i < lines.length; i++) {\n      var startOfLine = this.atBlank() || this.closed\n      this.write()\n      this.out += escape !== false ? this.esc(lines[i], startOfLine) : lines[i]\n      if (i != lines.length - 1) this.out += \"\\n\"\n    }\n  }\n\n  // :: (Node)\n  // Render the given node as a block.\n  render(node, parent, index) {\n    if (typeof parent == \"number\") throw new Error(\"!\")\n    this.nodes[node.type.name](this, node, parent, index)\n  }\n\n  // :: (Node)\n  // Render the contents of `parent` as block nodes.\n  renderContent(parent) {\n    parent.forEach((node, _, i) => this.render(node, parent, i))\n  }\n\n  // :: (Node)\n  // Render the contents of `parent` as inline content.\n  renderInline(parent) {\n    let active = [], trailing = \"\"\n    let progress = (node, _, index) => {\n      let marks = node ? node.marks : []\n\n      // Remove marks from `hard_break` that are the last node inside\n      // that mark to prevent parser edge cases with new lines just\n      // before closing marks.\n      // (FIXME it'd be nice if we had a schema-agnostic way to\n      // identify nodes that serialize as hard breaks)\n      if (node && node.type.name === \"hard_break\")\n        marks = marks.filter(m => {\n          if (index + 1 == parent.childCount) return false\n          let next = parent.child(index + 1)\n          return m.isInSet(next.marks) && (!next.isText || /\\S/.test(next.text))\n        })\n\n      let leading = trailing\n      trailing = \"\"\n      // If whitespace has to be expelled from the node, adjust\n      // leading and trailing accordingly.\n      if (node && node.isText && marks.some(mark => {\n        let info = this.marks[mark.type.name]\n        return info && info.expelEnclosingWhitespace\n      })) {\n        let [_, lead, inner, trail] = /^(\\s*)(.*?)(\\s*)$/m.exec(node.text)\n        leading += lead\n        trailing = trail\n        if (lead || trail) {\n          node = inner ? node.withText(inner) : null\n          if (!node) marks = active\n        }\n      }\n\n      let inner = marks.length && marks[marks.length - 1], noEsc = inner && this.marks[inner.type.name].escape === false\n      let len = marks.length - (noEsc ? 1 : 0)\n\n      // Try to reorder 'mixable' marks, such as em and strong, which\n      // in Markdown may be opened and closed in different order, so\n      // that order of the marks for the token matches the order in\n      // active.\n      outer: for (let i = 0; i < len; i++) {\n        let mark = marks[i]\n        if (!this.marks[mark.type.name].mixable) break\n        for (let j = 0; j < active.length; j++) {\n          let other = active[j]\n          if (!this.marks[other.type.name].mixable) break\n          if (mark.eq(other)) {\n            if (i > j)\n              marks = marks.slice(0, j).concat(mark).concat(marks.slice(j, i)).concat(marks.slice(i + 1, len))\n            else if (j > i)\n              marks = marks.slice(0, i).concat(marks.slice(i + 1, j)).concat(mark).concat(marks.slice(j, len))\n            continue outer\n          }\n        }\n      }\n\n      // Find the prefix of the mark set that didn't change\n      let keep = 0\n      while (keep < Math.min(active.length, len) && marks[keep].eq(active[keep])) ++keep\n\n      // Close the marks that need to be closed\n      while (keep < active.length)\n        this.text(this.markString(active.pop(), false), false)\n\n      // Output any previously expelled trailing whitespace outside the marks\n      if (leading) this.text(leading)\n\n      // Open the marks that need to be opened\n      if (node) {\n        while (active.length < len) {\n          let add = marks[active.length]\n          active.push(add)\n          this.text(this.markString(add, true), false)\n        }\n\n        // Render the node. Special case code marks, since their content\n        // may not be escaped.\n        if (noEsc && node.isText)\n          this.text(this.markString(inner, true) + node.text + this.markString(inner, false), false)\n        else\n          this.render(node, parent, index)\n      }\n    }\n    parent.forEach(progress)\n    progress(null)\n  }\n\n  // :: (Node, string, (number) → string)\n  // Render a node's content as a list. `delim` should be the extra\n  // indentation added to all lines except the first in an item,\n  // `firstDelim` is a function going from an item index to a\n  // delimiter for the first line of the item.\n  renderList(node, delim, firstDelim) {\n    if (this.closed && this.closed.type == node.type)\n      this.flushClose(3)\n    else if (this.inTightList)\n      this.flushClose(1)\n\n    let isTight = typeof node.attrs.tight != \"undefined\" ? node.attrs.tight : this.options.tightLists\n    let prevTight = this.inTightList\n    this.inTightList = isTight\n    node.forEach((child, _, i) => {\n      if (i && isTight) this.flushClose(1)\n      this.wrapBlock(delim, firstDelim(i), node, () => this.render(child, node, i))\n    })\n    this.inTightList = prevTight\n  }\n\n  // :: (string, ?bool) → string\n  // Escape the given string so that it can safely appear in Markdown\n  // content. If `startOfLine` is true, also escape characters that\n  // has special meaning only at the start of the line.\n  esc(str, startOfLine) {\n    str = str.replace(/[`*\\\\~\\[\\]]/g, \"\\\\$&\")\n    if (startOfLine) str = str.replace(/^[:#\\-*+]/, \"\\\\$&\").replace(/^(\\d+)\\./, \"$1\\\\.\")\n    return str\n  }\n\n  quote(str) {\n    var wrap = str.indexOf('\"') == -1 ? '\"\"' : str.indexOf(\"'\") == -1 ? \"''\" : \"()\"\n    return wrap[0] + str + wrap[1]\n  }\n\n  // :: (string, number) → string\n  // Repeat the given string `n` times.\n  repeat(str, n) {\n    let out = \"\"\n    for (let i = 0; i < n; i++) out += str\n    return out\n  }\n\n  // : (Mark, bool) → string\n  // Get the markdown string for a given opening or closing mark.\n  markString(mark, open) {\n    let info = this.marks[mark.type.name]\n    let value = open ? info.open : info.close\n    return typeof value == \"string\" ? value : value(this, mark)\n  }\n\n  // :: (string) → { leading: ?string, trailing: ?string }\n  // Get leading and trailing whitespace from a string. Values of\n  // leading or trailing property of the return object will be undefined\n  // if there is no match.\n  getEnclosingWhitespace(text) {\n    return {\n      leading: (text.match(/^(\\s+)/) || [])[0],\n      trailing: (text.match(/(\\s+)$/) || [])[0]\n    }\n  }\n\n}\n","import { tapMaybe } from 'option-t/lib/Maybe/tap';\nimport { MarkdownSerializer } from 'prosemirror-markdown';\nimport { Schema } from 'prosemirror-model';\n\nexport const customMarkdownSerializer = new MarkdownSerializer<Schema>(\n  {\n    blockquote(state, node) {\n      state.wrapBlock('> ', undefined, node, () => state.renderContent(node));\n    },\n    code_block(state, node) {\n      state.write('```' + (node.attrs.params || '') + '\\n');\n      state.text(node.textContent, false);\n      state.ensureNewLine();\n      state.write('```');\n      state.closeBlock(node);\n    },\n    heading(state, node) {\n      state.write(state.repeat('#', node.attrs.level) + ' ');\n      state.renderInline(node);\n      state.closeBlock(node);\n    },\n    horizontal_rule(state, node) {\n      state.write(node.attrs.markup || '---');\n      state.closeBlock(node);\n    },\n    bullet_list(state, node) {\n      state.renderList(node, '  ', () => (node.attrs.bullet || '*') + ' ');\n    },\n    ordered_list(state, node) {\n      const start = node.attrs.order || 1;\n      const maxW = String(start + node.childCount - 1).length;\n      const space = state.repeat(' ', maxW + 2);\n      state.renderList(node, space, i => {\n        const nStr = String(start + i);\n        return state.repeat(' ', maxW - nStr.length) + nStr + '. ';\n      });\n    },\n    list_item(state, node) {\n      state.renderContent(node);\n    },\n    todo(state, node) {\n      const check = node.attrs.checked ? 'x' : ' ';\n      state.write(`- [${check}] `);\n      state.renderContent(node);\n    },\n    paragraph(state, node) {\n      state.renderInline(node);\n      state.closeBlock(node);\n    },\n\n    image(state, node) {\n      state.write(\n        '![' +\n          state.esc(node.attrs.alt || '') +\n          '](' +\n          state.esc(node.attrs.src) +\n          // @ts-ignore\n          (node.attrs.title ? ' ' + state.quote(node.attrs.title) : '') +\n          ')',\n      );\n    },\n    hard_break(state, node, parent, index) {\n      for (let i = index + 1; i < parent.childCount; i++) {\n        if (parent.child(i).type !== node.type) {\n          state.write('\\\\\\n');\n          return;\n        }\n      }\n    },\n    text(state, node) {\n      tapMaybe(node.text, text => state.text(text));\n    },\n  },\n  {\n    code: { open: '`', close: '`', escape: false },\n    em: {\n      close: '*',\n      expelEnclosingWhitespace: true,\n      mixable: true,\n      open: '*',\n    },\n    link: {\n      open: '[',\n      // tslint:disable-next-line:no-any\n      close(state: any, mark: any) {\n        return (\n          '](' +\n          state.esc(mark.attrs.href) +\n          (mark.attrs.title ? ' ' + state.quote(mark.attrs.title) : '') +\n          ')'\n        );\n      },\n    },\n    strong: {\n      close: '**',\n      expelEnclosingWhitespace: true,\n      mixable: true,\n      open: '**',\n    },\n  },\n);\n","/**\n * @see https://github.com/atlassian/prosemirror-utils/blob/master/src/selection.js\n */\nimport { Nullable } from 'option-t/lib/Nullable';\nimport { Node } from 'prosemirror-model';\nimport { Selection } from 'prosemirror-state';\n\ninterface FindResult {\n  depth: number;\n  node: Node;\n  pos: number;\n  start: number;\n}\n\nexport function findParentNode(predicate: (node: Node) => boolean) {\n  return (selection: Selection): Nullable<FindResult> => {\n    const { $from } = selection;\n    for (let i = $from.depth; i > 0; i -= 1) {\n      const node = $from.node(i);\n      if (predicate(node)) {\n        return {\n          depth: i,\n          node,\n          pos: i > 0 ? $from.before(i) : 0,\n          start: $from.start(i),\n        };\n      }\n    }\n\n    return null;\n  };\n}\n","import { isNull } from 'option-t/lib/Nullable';\nimport { isNotUndefined } from 'option-t/lib/Undefinable';\nimport { Node } from 'prosemirror-model';\nimport { Command } from '../editor-type';\nimport { findParentNode } from '../utils/findParentNode';\n\nconst findTodo = findParentNode((node: Node) => node.type.name === 'todo');\n\nexport const toggleCheckbox: Command = (state, dispatch) => {\n  if (!isNotUndefined(dispatch)) {\n    return false;\n  }\n\n  const result = findTodo(state.selection);\n  if (isNull(result)) {\n    return false;\n  }\n\n  const { node, pos } = result;\n  const attrs = { checked: !node.attrs.checked };\n  dispatch(state.tr.setNodeMarkup(pos, undefined, attrs));\n  return true;\n};\n","import {\n  selectParentNode,\n  setBlockType,\n  toggleMark,\n  wrapIn,\n} from 'prosemirror-commands';\nimport { NodeType, Schema } from 'prosemirror-model';\nimport { wrapInList } from 'prosemirror-schema-list';\nimport { EditorState } from 'prosemirror-state';\nimport { Command, MenuItem } from './editor-type';\nimport { toggleCheckbox } from './TodoPlugin/TodoCommand';\n\nfunction alwaysTrue(): true {\n  return true;\n}\n\nexport function setBlockTypeMenu<\n  Options extends { longTitle: string; shortTitle: string }\n>(nodeType: NodeType, { longTitle, shortTitle, ...attrs }: Options): MenuItem {\n  const command = setBlockType(nodeType, attrs);\n\n  return {\n    active(state: EditorState) {\n      const { $from, to } = state.selection;\n      return to <= $from.end() && $from.parent.hasMarkup(nodeType);\n    },\n    enable(state: EditorState) {\n      return command(state);\n    },\n    longTitle,\n    run: command,\n    shortTitle,\n  };\n}\n\ninterface MenuItemParam {\n  longTitle: string;\n  run: Command;\n  shortTitle: string;\n  active?(state: EditorState): boolean;\n  enable?(state: EditorState): boolean;\n}\n\nfunction createItem({\n  longTitle,\n  run,\n  shortTitle,\n  active = alwaysTrue,\n  enable = alwaysTrue,\n}: MenuItemParam): MenuItem {\n  return {\n    active,\n    enable,\n    longTitle,\n    run,\n    shortTitle,\n  };\n}\n\nexport function createMenuItems(schema: Schema) {\n  const items: MenuItem[] = [\n    setBlockTypeMenu(schema.nodes.text, {\n      level: 1,\n      longTitle: 'plain',\n      shortTitle: 'Plain',\n    }),\n    {\n      longTitle: 'paragraph',\n      run: setBlockType(schema.marks.strong),\n      shortTitle: 'Para',\n    },\n    {\n      longTitle: 'blockquote',\n      run: wrapIn(schema.nodes.blockquote),\n      shortTitle: '>',\n    },\n    {\n      longTitle: 'bullet list',\n      run: wrapInList(schema.nodes.bullet_list),\n      shortTitle: '-',\n    },\n    {\n      longTitle: 'bullet list',\n      run: wrapInList(schema.nodes.ordered_list),\n      shortTitle: '1.',\n    },\n    {\n      longTitle: 'todo list',\n      run: wrapIn(schema.nodes.todo),\n      shortTitle: '☑',\n    },\n    {\n      longTitle: 'toggle checkbox',\n      run: toggleCheckbox,\n      shortTitle: '✔',\n    },\n    {\n      longTitle: 'heading',\n      run: setBlockType(schema.nodes.heading, { level: 1 }),\n      shortTitle: 'H1',\n    },\n    {\n      longTitle: 'heading',\n      run: setBlockType(schema.nodes.heading, { level: 2 }),\n      shortTitle: 'H2',\n    },\n    {\n      longTitle: 'heading',\n      run: setBlockType(schema.nodes.heading, { level: 3 }),\n      shortTitle: 'H3',\n    },\n    {\n      longTitle: 'select parent',\n      run: selectParentNode,\n      shortTitle: '□',\n    },\n    {\n      longTitle: 'strong',\n      run: toggleMark(schema.marks.strong),\n      shortTitle: 'Bold',\n    },\n    {\n      longTitle: 'em',\n      run: toggleMark(schema.marks.strong),\n      shortTitle: 'italic',\n    },\n  ].map(createItem);\n\n  return items;\n}\n","import { Nullable } from 'option-t/lib/Nullable';\nimport { EditorState } from 'prosemirror-state';\nimport { EditorView } from 'prosemirror-view';\nimport { noop } from '../../utils/noop';\nimport { EditorContent } from './editor-type';\n\nexport type OnChange = (getContent: () => Nullable<EditorContent>) => void;\n\ninterface EditorViewParam {\n  editorState: EditorState;\n  onChange: (\n    nextState: EditorState,\n    prevState: EditorState,\n    docChanged: boolean,\n  ) => void;\n}\n\nexport function createEditorView({\n  editorState,\n  onChange = noop,\n}: EditorViewParam) {\n  const editorView = new EditorView(undefined, {\n    dispatchTransaction(tr) {\n      const prevState = editorView.state;\n      const nextState = prevState.apply(tr);\n      onChange(nextState, prevState, tr.docChanged);\n    },\n    state: editorState,\n  });\n\n  return editorView;\n}\n","import { isNull } from 'option-t/lib/Nullable';\nimport { EditorState } from 'prosemirror-state';\nimport React, { useEffect, useLayoutEffect, useState } from 'react';\nimport { noop } from '../../utils/noop';\nimport { createEditorView } from './EditorView';\n\ninterface Props {\n  editorState: EditorState;\n  editorRef: React.RefObject<HTMLElement>;\n  onChange: (\n    nextState: EditorState,\n    prevState: EditorState,\n    docChanged: boolean,\n  ) => void;\n  onFocus?: (event: Event) => void;\n  onBlur?: (event: Event) => void;\n}\n\nexport const useEditor = ({\n  editorState,\n  editorRef,\n  onChange,\n  onFocus = noop,\n  onBlur = noop,\n}: Props) => {\n  const [editorView] = useState(() =>\n    createEditorView({ editorState, onChange }),\n  );\n\n  useLayoutEffect(\n    () => {\n      editorView.updateState(editorState);\n    },\n    [editorView, editorState],\n  );\n\n  useEffect(() => {\n    if (isNull(editorRef.current)) {\n      return;\n    }\n    editorRef.current.appendChild(editorView.dom);\n    editorView.update({ ...editorView.props });\n    editorView.dom.addEventListener('focus', onFocus);\n    editorView.dom.addEventListener('blur', onBlur);\n\n    return () => {\n      editorView.dom.removeEventListener('focus', onFocus);\n      editorView.dom.removeEventListener('blur', onBlur);\n      editorView.destroy();\n    };\n  }, []);\n\n  return editorView;\n};\n","import './registerProseMirror';\n\nexport { EditorMenu } from './components/EditorMenu';\nexport { createSchema } from './DefaultPlugin';\nexport { createStateFromContent, serializeEditorState } from './EditorState';\nexport { editorStyle } from './editorStyle';\nexport { customMarkdownSerializer } from './MarkdownPlugin/MarkdownSerializer';\nexport { createMenuItems } from './MenuItem';\nexport { useEditor } from './useEditor';\n","/**\n * The position of elements are oftern broken when showing virtual keyboard on iOS.\n * This helper will mitigate this behabior.\n *\n * @example\n * <input type=\"text\" value={value} onFocus={stickToTop} />\n */\nconst VIRTUAL_KEYBOARD_ANIMATION_DURATION = 200;\n\nexport function stickToTop() {\n  setTimeout(() => {\n    window.scrollTo(0, 0);\n  }, VIRTUAL_KEYBOARD_ANIMATION_DURATION);\n}\n","import { useMemo } from 'react';\n\n// tslint:disable-next-line:no-any\nexport function useDebouncedCallback<Args extends any[]>(\n  fn: (...args: Args) => void,\n  delay: number,\n  // tslint:disable-next-line:no-any\n  inputs: ReadonlyArray<any>,\n) {\n  return useMemo(\n    () => {\n      let timeoutId: NodeJS.Timeout;\n\n      return (...args: Args) => {\n        if (timeoutId) {\n          clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(() => {\n          fn(...args);\n        }, delay);\n      };\n    },\n    [...inputs, delay],\n  );\n}\n","import { isNull, Nullable } from 'option-t/lib/Nullable';\nimport { mapForNullable } from 'option-t/lib/Nullable/map';\nimport { EditorState } from 'prosemirror-state';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { AppState } from '../../../app/app-type';\nimport { CenterLayout } from '../../../app/components/layouts/CenterLayout';\nimport { VerticalStackItemLayout } from '../../../app/components/layouts/VerticalStackItemLayout';\nimport { VerticalStackLayout } from '../../../app/components/layouts/VerticalStackLayout';\nimport { VirtualKeyboardSpacer } from '../../../app/components/layouts/VirtualKeyboardSpacer';\nimport useRedux from '../../../app/useRedux';\nimport { Button } from '../../../components/Button';\nimport { Icon } from '../../../components/Icon';\nimport { Text } from '../../../components/Text';\nimport {\n  createMenuItems,\n  createSchema,\n  createStateFromContent,\n  customMarkdownSerializer,\n  EditorMenu,\n  editorStyle,\n  serializeEditorState,\n  useEditor,\n} from '../../../modules/editor';\nimport { EditorContent } from '../../../modules/editor/editor-type';\nimport { styled } from '../../../styled-components';\nimport { FontSize } from '../../../theme/theme-type';\nimport { stickToTop } from '../../../utils/stickToTop';\nimport { unwrapUnsafeValue } from '../../../utils/unwrapUnsafeValue';\nimport { useDebouncedCallback } from '../../../utils/useDebouncedCallback';\nimport { noteEffects } from '../NoteEffect';\n\nconst CHANGE_DELAY = 4000;\n\nconst NotePageWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  font-size: ${({ theme }) => theme.fontSize.large};\n  height: 100%;\n  width: 100%;\n\n  .ProseMirror {\n    font-size: ${({ theme }) => theme.fontSize.default};\n    -webkit-overflow-scrolling: touch;\n    overflow-y: auto;\n    height: 100%;\n    padding-bottom: 30%;\n    padding-top: ${({ theme }) => theme.space};\n  }\n\n  ${editorStyle}\n`;\n\nconst EditorRoot = styled.div`\n  height: 100%;\n`;\n\nconst MiniControl = styled.div`\n  align-items: center;\n  bottom: ${({ theme }) => theme.space};\n  display: flex;\n  left: 0;\n  margin-left: ${({ theme }) => theme.space};\n  opacity: ${({ theme }) => theme.inactiveOpacity};\n  position: absolute;\n  text-align: left;\n  transition: ${({ theme }) => theme.transition};\n  z-index: 100;\n\n  :hover {\n    opacity: ${({ theme }) => theme.activeOpacity};\n  }\n`;\n\nconst ButtonGroupLayout = styled.div`\n  ${Button} + ${Button} {\n    margin-left: ${({ theme }) => theme.space};\n  }\n`;\n\nconst StatusLayout = styled.div`\n  margin-left: ${({ theme }) => theme.space};\n`;\n\nconst LoadingLayout = styled(CenterLayout)`\n  font-size: 96px;\n  color: ${({ theme }) => theme.loadingColorFg};\n`;\n\nconst schema = createSchema();\nconst menuItems = createMenuItems(schema);\n\ninterface Props {}\n\nexport const NotePage: React.FunctionComponent<Props> = () => {\n  const [{ userId, saving, loading, note }, dispatch] = useRedux(mapState);\n  const [isVirtualKeyboardVisible, setFocused] = useState(false);\n  const editorContentRef = useRef(mapForNullable(note, _ => _.content));\n  const editorRef = useRef<HTMLDivElement>(null);\n  const noteId = '1';\n\n  const [editorState, setEditorState] = useState(() =>\n    createStateFromContent(schema, mapForNullable(note, _ => _.content)),\n  );\n\n  function save(content: Nullable<EditorContent>) {\n    if (isNull(userId) || isNull(content)) {\n      return;\n    }\n\n    const input = {\n      note: {\n        content,\n        id: noteId,\n      },\n      userId,\n    };\n\n    dispatch(noteEffects.save(input));\n  }\n\n  useEffect(\n    () => {\n      if (isNull(note)) {\n        return;\n      }\n\n      const state = createStateFromContent(schema, note.content);\n      setEditorState(state);\n    },\n    [note],\n  );\n\n  useEffect(\n    () => {\n      if (isNull(userId)) {\n        return;\n      }\n\n      dispatch(noteEffects.load({ userId, noteId }));\n    },\n    [userId],\n  );\n\n  const onSave = useCallback(\n    () => {\n      save(editorContentRef.current);\n    },\n    [dispatch, userId, noteId, editorContentRef.current],\n  );\n\n  const onChangeContent = useDebouncedCallback(\n    (state: EditorState) => {\n      const newContent = serializeEditorState(state);\n      editorContentRef.current = newContent;\n      save(newContent);\n    },\n    CHANGE_DELAY,\n    [dispatch, userId, noteId],\n  );\n\n  const onChange = useCallback(\n    (nextState: EditorState, _prevState: EditorState, docChanged: boolean) => {\n      if (docChanged) {\n        onChangeContent(nextState);\n      }\n\n      setEditorState(nextState);\n    },\n    [onChangeContent],\n  );\n\n  const onCopy = useCallback(\n    () => {\n      const text = customMarkdownSerializer.serialize(editorState.doc);\n      const input = { text };\n      dispatch(noteEffects.copyText(input));\n    },\n    [dispatch, editorState.doc],\n  );\n\n  const onFocus = useCallback(() => {\n    setFocused(true);\n    stickToTop();\n  }, []);\n\n  const onBlur = useCallback(() => {\n    setFocused(false);\n  }, []);\n\n  const editorView = useEditor({\n    editorRef,\n    editorState,\n    onBlur,\n    onChange,\n    onFocus,\n  });\n\n  const onDone = useCallback(\n    () => {\n      const element = unwrapUnsafeValue<HTMLDivElement>(editorView.dom);\n      element.blur();\n    },\n    [editorView],\n  );\n\n  if (loading) {\n    return (\n      <LoadingLayout>\n        <Icon icon=\"spinner\" spin={true} pulse={true} />\n      </LoadingLayout>\n    );\n  }\n\n  return (\n    <NotePageWrapper>\n      <VerticalStackLayout>\n        <VerticalStackItemLayout autoScale={true}>\n          <EditorRoot ref={editorRef} />\n          <MiniControl>\n            <ButtonGroupLayout>\n              <Button onClick={onDone}>Done</Button>\n              <Button onClick={onSave}>Save</Button>\n              <Button onClick={onCopy}>Copy</Button>\n            </ButtonGroupLayout>\n            <StatusLayout>\n              <Text size={FontSize.SMALL}>\n                {saving ? 'saving...' : 'saved'}\n              </Text>\n            </StatusLayout>\n          </MiniControl>\n          <EditorMenu\n            editorState={editorState}\n            menuItems={menuItems}\n            editorView={editorView}\n          />\n        </VerticalStackItemLayout>\n        <VirtualKeyboardSpacer\n          isVirtualKeyboardVisible={isVirtualKeyboardVisible}\n        />\n      </VerticalStackLayout>\n    </NotePageWrapper>\n  );\n};\n\nfunction mapState(state: AppState) {\n  const { saving, note } = state.note;\n  const { loading, user } = state.routing;\n\n  return {\n    loading,\n    note,\n    saving,\n    userId: user ? user.uid : null,\n  };\n}\n"]}